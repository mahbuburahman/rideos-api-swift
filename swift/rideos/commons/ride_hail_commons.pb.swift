// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rideos/commons/ride_hail_commons.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
// Copyright 2018-2019 rideOS, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Rideos_RideHailCommons_NotReadyForDispatchTaskAction: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case `default` // = 0

  /// Cancel all assigned tasks
  case cancelAll // = 1

  /// Unassign any tasks that can be unassigned. Cancel all other tasks.
  case unassignOrCancelAll // = 2

  /// Unassign any tasks that can be unassigned. Keep all other tasks.
  case unassignOrKeep // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .default
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .default
    case 1: self = .cancelAll
    case 2: self = .unassignOrCancelAll
    case 3: self = .unassignOrKeep
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .default: return 0
    case .cancelAll: return 1
    case .unassignOrCancelAll: return 2
    case .unassignOrKeep: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Rideos_RideHailCommons_NotReadyForDispatchTaskAction: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Rideos_RideHailCommons_NotReadyForDispatchTaskAction] = [
    .default,
    .cancelAll,
    .unassignOrCancelAll,
    .unassignOrKeep,
  ]
}

#endif  // swift(>=4.2)

public enum Rideos_RideHailCommons_TaskStage: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case waitingForAssignment // = 1
  case drivingToPickup // = 2
  case waitingForPickup // = 3
  case drivingToDropoff // = 4
  case completed // = 5
  case cancelled // = 6
  case replaced // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .waitingForAssignment
    case 2: self = .drivingToPickup
    case 3: self = .waitingForPickup
    case 4: self = .drivingToDropoff
    case 5: self = .completed
    case 6: self = .cancelled
    case 7: self = .replaced
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .waitingForAssignment: return 1
    case .drivingToPickup: return 2
    case .waitingForPickup: return 3
    case .drivingToDropoff: return 4
    case .completed: return 5
    case .cancelled: return 6
    case .replaced: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Rideos_RideHailCommons_TaskStage: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Rideos_RideHailCommons_TaskStage] = [
    .unknown,
    .waitingForAssignment,
    .drivingToPickup,
    .waitingForPickup,
    .drivingToDropoff,
    .completed,
    .cancelled,
    .replaced,
  ]
}

#endif  // swift(>=4.2)

/// Contact information
public struct Rideos_RideHailCommons_ContactInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the person to contact
  public var name: String = String()

  /// Phone number with international prefix e.g. `+1 555 555 555`.
  public var phoneNumber: String = String()

  /// URL to an external application for contact.
  public var contactURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Location where the vehicle will stop to pickup or drop-off a rider
public struct Rideos_RideHailCommons_Stop {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Rideos_RideHailCommons_Stop.OneOf_Type? = nil

  /// Client-provided identifier of a fixed stop position.
  public var predefinedStopID: String {
    get {
      if case .predefinedStopID(let v)? = type {return v}
      return String()
    }
    set {type = .predefinedStopID(newValue)}
  }

  /// Position of the rider or target as WGS84 coordinate.
  public var position: Rideos_Geo_V1_Position {
    get {
      if case .position(let v)? = type {return v}
      return Rideos_Geo_V1_Position()
    }
    set {type = .position(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    /// Client-provided identifier of a fixed stop position.
    case predefinedStopID(String)
    /// Position of the rider or target as WGS84 coordinate.
    case position(Rideos_Geo_V1_Position)

  #if !swift(>=4.1)
    public static func ==(lhs: Rideos_RideHailCommons_Stop.OneOf_Type, rhs: Rideos_RideHailCommons_Stop.OneOf_Type) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.predefinedStopID, .predefinedStopID): return {
        guard case .predefinedStopID(let l) = lhs, case .predefinedStopID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.position, .position): return {
        guard case .position(let l) = lhs, case .position(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Rideos_RideHailCommons_PredefinedStop {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var position: Rideos_Geo_V1_Position {
    get {return _position ?? Rideos_Geo_V1_Position()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var properties: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _position: Rideos_Geo_V1_Position? = nil
}

public struct Rideos_RideHailCommons_ViolatedConstraints {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Any avoid constraint IDs that were violated by the route.
  public var violatedAvoidConstraintIds: [String] = []

  /// If true, violates all operational constraints
  public var violatedOperationalConstraints: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_RideHailCommons_RoutingConstraints {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blacklistConstraintIds: [String] = []

  public var whitelistConstraintIds: [String] = []

  public var avoidConstraintIds: [String] = []

  public var operationalConstraintIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Grouping of vehicles for transporting riders
public struct Rideos_RideHailCommons_Fleet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Client-provided identifier of a fleet, must be unique and can not be reused after the fleet has been removed.
  public var id: String = String()

  /// Information about the fleet such as display name and additional properties.
  public var info: Rideos_RideHailCommons_FleetInfo {
    get {return _info ?? Rideos_RideHailCommons_FleetInfo()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  public var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  public mutating func clearInfo() {self._info = nil}

  /// Settings that will be used when optimizing the trips and vehicles in this fleet.
  public var optimizationSettings: Rideos_RideHailCommons_FleetOptimizationSettings {
    get {return _optimizationSettings ?? Rideos_RideHailCommons_FleetOptimizationSettings()}
    set {_optimizationSettings = newValue}
  }
  /// Returns true if `optimizationSettings` has been explicitly set.
  public var hasOptimizationSettings: Bool {return self._optimizationSettings != nil}
  /// Clears the value of `optimizationSettings`. Subsequent reads from it will return its default value.
  public mutating func clearOptimizationSettings() {self._optimizationSettings = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _info: Rideos_RideHailCommons_FleetInfo? = nil
  fileprivate var _optimizationSettings: Rideos_RideHailCommons_FleetOptimizationSettings? = nil
}

public struct Rideos_RideHailCommons_FleetOptimizationSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Set to true to force all trips to be private
  public var forcePrivateRides: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._forcePrivateRides ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._forcePrivateRides = newValue}
  }
  /// Returns true if `forcePrivateRides` has been explicitly set.
  public var hasForcePrivateRides: Bool {return _storage._forcePrivateRides != nil}
  /// Clears the value of `forcePrivateRides`. Subsequent reads from it will return its default value.
  public mutating func clearForcePrivateRides() {_uniqueStorage()._forcePrivateRides = nil}

  /// Optional. Set to true to allow trips to be reassigned to a different vehicle before being picked up
  public var enableVehicleReassignment: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._enableVehicleReassignment ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._enableVehicleReassignment = newValue}
  }
  /// Returns true if `enableVehicleReassignment` has been explicitly set.
  public var hasEnableVehicleReassignment: Bool {return _storage._enableVehicleReassignment != nil}
  /// Clears the value of `enableVehicleReassignment`. Subsequent reads from it will return its default value.
  public mutating func clearEnableVehicleReassignment() {_uniqueStorage()._enableVehicleReassignment = nil}

  /// Optional. Set the expected time that the `PickupRider` step will take for vehicles
  public var expectedPickupServiceTimeDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._expectedPickupServiceTimeDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._expectedPickupServiceTimeDuration = newValue}
  }
  /// Returns true if `expectedPickupServiceTimeDuration` has been explicitly set.
  public var hasExpectedPickupServiceTimeDuration: Bool {return _storage._expectedPickupServiceTimeDuration != nil}
  /// Clears the value of `expectedPickupServiceTimeDuration`. Subsequent reads from it will return its default value.
  public mutating func clearExpectedPickupServiceTimeDuration() {_uniqueStorage()._expectedPickupServiceTimeDuration = nil}

  /// Optional. Set the expected time that the `DropoffRider` step will take for vehicles
  public var expectedDropoffServiceTimeDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._expectedDropoffServiceTimeDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._expectedDropoffServiceTimeDuration = newValue}
  }
  /// Returns true if `expectedDropoffServiceTimeDuration` has been explicitly set.
  public var hasExpectedDropoffServiceTimeDuration: Bool {return _storage._expectedDropoffServiceTimeDuration != nil}
  /// Clears the value of `expectedDropoffServiceTimeDuration`. Subsequent reads from it will return its default value.
  public mutating func clearExpectedDropoffServiceTimeDuration() {_uniqueStorage()._expectedDropoffServiceTimeDuration = nil}

  /// Optional. Set the time window relative to trip creation that a rider must be picked up after and before
  /// This will be overwritten if specified by a specific Trip in the dispatch parameters.
  public var requiredPickupTimeWindow: Rideos_RideHailCommons_RelativeTimeWindow {
    get {return _storage._requiredPickupTimeWindow ?? Rideos_RideHailCommons_RelativeTimeWindow()}
    set {_uniqueStorage()._requiredPickupTimeWindow = newValue}
  }
  /// Returns true if `requiredPickupTimeWindow` has been explicitly set.
  public var hasRequiredPickupTimeWindow: Bool {return _storage._requiredPickupTimeWindow != nil}
  /// Clears the value of `requiredPickupTimeWindow`. Subsequent reads from it will return its default value.
  public mutating func clearRequiredPickupTimeWindow() {_uniqueStorage()._requiredPickupTimeWindow = nil}

  /// Optional. Set the time window relative to trip creation that a rider must be dropped off after and before
  /// This will be overwritten if specified by a specific Trip in the dispatch parameters.
  public var requiredDropoffTimeWindow: Rideos_RideHailCommons_RelativeTimeWindow {
    get {return _storage._requiredDropoffTimeWindow ?? Rideos_RideHailCommons_RelativeTimeWindow()}
    set {_uniqueStorage()._requiredDropoffTimeWindow = newValue}
  }
  /// Returns true if `requiredDropoffTimeWindow` has been explicitly set.
  public var hasRequiredDropoffTimeWindow: Bool {return _storage._requiredDropoffTimeWindow != nil}
  /// Clears the value of `requiredDropoffTimeWindow`. Subsequent reads from it will return its default value.
  public mutating func clearRequiredDropoffTimeWindow() {_uniqueStorage()._requiredDropoffTimeWindow = nil}

  /// Optional. Should only be set if allow_vehicle_reassignments is set to true, otherwise will be ignored.
  /// Provides configuration to fine tune vehicle reassignments.
  public var vehicleReassignmentConfiguration: Rideos_FleetPlannerCommons_VehicleReassignmentConfiguration {
    get {return _storage._vehicleReassignmentConfiguration ?? Rideos_FleetPlannerCommons_VehicleReassignmentConfiguration()}
    set {_uniqueStorage()._vehicleReassignmentConfiguration = newValue}
  }
  /// Returns true if `vehicleReassignmentConfiguration` has been explicitly set.
  public var hasVehicleReassignmentConfiguration: Bool {return _storage._vehicleReassignmentConfiguration != nil}
  /// Clears the value of `vehicleReassignmentConfiguration`. Subsequent reads from it will return its default value.
  public mutating func clearVehicleReassignmentConfiguration() {_uniqueStorage()._vehicleReassignmentConfiguration = nil}

  /// Optional. Set to override what costs we consider when optimizing the fleet.
  public var optimizationProfile: Rideos_RideHailCommons_OptimizationProfileWrapper {
    get {return _storage._optimizationProfile ?? Rideos_RideHailCommons_OptimizationProfileWrapper()}
    set {_uniqueStorage()._optimizationProfile = newValue}
  }
  /// Returns true if `optimizationProfile` has been explicitly set.
  public var hasOptimizationProfile: Bool {return _storage._optimizationProfile != nil}
  /// Clears the value of `optimizationProfile`. Subsequent reads from it will return its default value.
  public mutating func clearOptimizationProfile() {_uniqueStorage()._optimizationProfile = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Rideos_RideHailCommons_OptimizationProfileWrapper {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Rideos_FleetPlannerCommons_OptimizationProfile = .default

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_RideHailCommons_RelativeTimeWindow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var earliestRelativeTime: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _earliestRelativeTime ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_earliestRelativeTime = newValue}
  }
  /// Returns true if `earliestRelativeTime` has been explicitly set.
  public var hasEarliestRelativeTime: Bool {return self._earliestRelativeTime != nil}
  /// Clears the value of `earliestRelativeTime`. Subsequent reads from it will return its default value.
  public mutating func clearEarliestRelativeTime() {self._earliestRelativeTime = nil}

  public var latestRelativeTime: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _latestRelativeTime ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_latestRelativeTime = newValue}
  }
  /// Returns true if `latestRelativeTime` has been explicitly set.
  public var hasLatestRelativeTime: Bool {return self._latestRelativeTime != nil}
  /// Clears the value of `latestRelativeTime`. Subsequent reads from it will return its default value.
  public mutating func clearLatestRelativeTime() {self._latestRelativeTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _earliestRelativeTime: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _latestRelativeTime: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// Information about the fleet
public struct Rideos_RideHailCommons_FleetInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Human-readable name for display, e.g. when selecting a fleet from a list.
  public var displayName: String = String()

  /// Additional properties for storing partner-specific information about the fleet, as string key value pairs.
  public var properties: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_RideHailCommons_FleetInfoUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Specify a new display name to overwrite the saved value
  public var displayName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _displayName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_displayName = newValue}
  }
  /// Returns true if `displayName` has been explicitly set.
  public var hasDisplayName: Bool {return self._displayName != nil}
  /// Clears the value of `displayName`. Subsequent reads from it will return its default value.
  public mutating func clearDisplayName() {self._displayName = nil}

  /// Optional. Specify a new set of properties to overwrite the saved values
  public var properties: Rideos_RideHailCommons_PropertyUpdate {
    get {return _properties ?? Rideos_RideHailCommons_PropertyUpdate()}
    set {_properties = newValue}
  }
  /// Returns true if `properties` has been explicitly set.
  public var hasProperties: Bool {return self._properties != nil}
  /// Clears the value of `properties`. Subsequent reads from it will return its default value.
  public mutating func clearProperties() {self._properties = nil}

  /// Optional. Specify new optimization settings for the fleet
  public var optimizationSettings: Rideos_RideHailCommons_FleetOptimizationSettings {
    get {return _optimizationSettings ?? Rideos_RideHailCommons_FleetOptimizationSettings()}
    set {_optimizationSettings = newValue}
  }
  /// Returns true if `optimizationSettings` has been explicitly set.
  public var hasOptimizationSettings: Bool {return self._optimizationSettings != nil}
  /// Clears the value of `optimizationSettings`. Subsequent reads from it will return its default value.
  public mutating func clearOptimizationSettings() {self._optimizationSettings = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _displayName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _properties: Rideos_RideHailCommons_PropertyUpdate? = nil
  fileprivate var _optimizationSettings: Rideos_RideHailCommons_FleetOptimizationSettings? = nil
}

/// Vehicle that is part of a fleet
public struct Rideos_RideHailCommons_Vehicle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Client-provided identifier of a vehicle that needs to be unique across all fleets.
  public var id: String = String()

  /// Client-provided identifier of the fleet the vehicle is assigned to. The fleet needs to exist before the vehicle.
  public var fleetID: String = String()

  /// Immutable definition of the vehicle, if this information changes a new vehicle needs to be created.
  public var definition: Rideos_RideHailCommons_VehicleDefinition {
    get {return _definition ?? Rideos_RideHailCommons_VehicleDefinition()}
    set {_definition = newValue}
  }
  /// Returns true if `definition` has been explicitly set.
  public var hasDefinition: Bool {return self._definition != nil}
  /// Clears the value of `definition`. Subsequent reads from it will return its default value.
  public mutating func clearDefinition() {self._definition = nil}

  /// Information about the vehicle and driver, such as contact information and additional properties.
  public var info: Rideos_RideHailCommons_VehicleInfo {
    get {return _info ?? Rideos_RideHailCommons_VehicleInfo()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  public var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  public mutating func clearInfo() {self._info = nil}

  /// Current state of the vehicle, e.g. its position, last active time and plan.
  public var state: Rideos_RideHailCommons_VehicleState {
    get {return _state ?? Rideos_RideHailCommons_VehicleState()}
    set {_state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return self._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {self._state = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _definition: Rideos_RideHailCommons_VehicleDefinition? = nil
  fileprivate var _info: Rideos_RideHailCommons_VehicleInfo? = nil
  fileprivate var _state: Rideos_RideHailCommons_VehicleState? = nil
}

/// Current state of the vehicle
public struct Rideos_RideHailCommons_VehicleState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Last known position of the vehicle as WGS84 coordinate.
  public var position: Rideos_Geo_V1_Position {
    get {return _position ?? Rideos_Geo_V1_Position()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  /// Last known heading of the vehicle in degrees 0...360 from true-north.
  public var heading: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _heading ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_heading = newValue}
  }
  /// Returns true if `heading` has been explicitly set.
  public var hasHeading: Bool {return self._heading != nil}
  /// Clears the value of `heading`. Subsequent reads from it will return its default value.
  public mutating func clearHeading() {self._heading = nil}

  /// Last time the vehicle updated its state.
  public var lastActiveTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastActiveTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastActiveTime = newValue}
  }
  /// Returns true if `lastActiveTime` has been explicitly set.
  public var hasLastActiveTime: Bool {return self._lastActiveTime != nil}
  /// Clears the value of `lastActiveTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastActiveTime() {self._lastActiveTime = nil}

  /// The full plan assigned to the vehicle, e.g. steps of all trips it was assigned to.
  /// The assigned trips and order of steps might change, due to optimizations of the route.
  public var plan: Rideos_RideHailCommons_VehicleState.Plan {
    get {return _plan ?? Rideos_RideHailCommons_VehicleState.Plan()}
    set {_plan = newValue}
  }
  /// Returns true if `plan` has been explicitly set.
  public var hasPlan: Bool {return self._plan != nil}
  /// Clears the value of `plan`. Subsequent reads from it will return its default value.
  public mutating func clearPlan() {self._plan = nil}

  /// Indicates that the vehicle is ready to receive new trip assignments.
  public var readiness: Bool = false

  /// Whether a given vehicle is reachable.
  /// Currently, a vehicle will be reachable if it has been active in the last 5 minutes.
  /// Currently, a vehicle's last active time is updated when:
  /// (1) a driver creates a vehicle
  /// (2) a driver updates vehicle state with vehicle set to ready, whether readiness was changed or not.
  public var isReachable: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Plan for completing all assigned trips
  public struct Plan {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Series of steps to complete all assigned trips, e.g. picking up several passengers and dropping them off.
    public var step: [Rideos_RideHailCommons_VehicleState.Step] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Smallest part of a trip
  public struct Step {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Automatically generated identifier of the step, unique per trip.
    public var id: String = String()

    /// Client-provided identifier for the trip.
    public var tripID: String = String()

    /// Location at which the step will be completed.
    /// Location at which the step will be completed.
    public var position: Rideos_Geo_V1_Position {
      get {return _position ?? Rideos_Geo_V1_Position()}
      set {_position = newValue}
    }
    /// Returns true if `position` has been explicitly set.
    public var hasPosition: Bool {return self._position != nil}
    /// Clears the value of `position`. Subsequent reads from it will return its default value.
    public mutating func clearPosition() {self._position = nil}

    public var vehicleAction: Rideos_RideHailCommons_VehicleState.Step.OneOf_VehicleAction? = nil

    /// State information for driving to the step `location`, e.g. the route information.
    public var driveToLocation: Rideos_RideHailCommons_VehicleState.Step.DriveToLocation {
      get {
        if case .driveToLocation(let v)? = vehicleAction {return v}
        return Rideos_RideHailCommons_VehicleState.Step.DriveToLocation()
      }
      set {vehicleAction = .driveToLocation(newValue)}
    }

    /// State information for picking up the passenger at `location`.
    public var pickupRider: Rideos_RideHailCommons_VehicleState.Step.PickupRider {
      get {
        if case .pickupRider(let v)? = vehicleAction {return v}
        return Rideos_RideHailCommons_VehicleState.Step.PickupRider()
      }
      set {vehicleAction = .pickupRider(newValue)}
    }

    /// State information for dropping off the passenger at `location`.
    public var dropoffRider: Rideos_RideHailCommons_VehicleState.Step.DropoffRider {
      get {
        if case .dropoffRider(let v)? = vehicleAction {return v}
        return Rideos_RideHailCommons_VehicleState.Step.DropoffRider()
      }
      set {vehicleAction = .dropoffRider(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_VehicleAction: Equatable {
      /// State information for driving to the step `location`, e.g. the route information.
      case driveToLocation(Rideos_RideHailCommons_VehicleState.Step.DriveToLocation)
      /// State information for picking up the passenger at `location`.
      case pickupRider(Rideos_RideHailCommons_VehicleState.Step.PickupRider)
      /// State information for dropping off the passenger at `location`.
      case dropoffRider(Rideos_RideHailCommons_VehicleState.Step.DropoffRider)

    #if !swift(>=4.1)
      public static func ==(lhs: Rideos_RideHailCommons_VehicleState.Step.OneOf_VehicleAction, rhs: Rideos_RideHailCommons_VehicleState.Step.OneOf_VehicleAction) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.driveToLocation, .driveToLocation): return {
          guard case .driveToLocation(let l) = lhs, case .driveToLocation(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.pickupRider, .pickupRider): return {
          guard case .pickupRider(let l) = lhs, case .pickupRider(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.dropoffRider, .dropoffRider): return {
          guard case .dropoffRider(let l) = lhs, case .dropoffRider(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    /// Route information a drive between two stops
    public struct RouteLeg {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Google polyline encoded geometry of the path the vehicle will take between two stops.
      /// The polyline encoding uses a precision of 5 decimals.
      public var polyline: String = String()

      /// Travel time of the route leg in seconds.
      public var travelTimeInSeconds: Double = 0

      /// Distance of the route leg in meters.
      public var distanceInMeters: Double = 0

      /// The source that generated the route leg
      public var source: Rideos_RideHailCommons_VehicleState.Step.RouteLeg.Source = .vehicle

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum Source: SwiftProtobuf.Enum {
        public typealias RawValue = Int

        /// Provided by the vehicle
        case vehicle // = 0

        /// Default route provided by the rideOS routing API
        case rideosDefault // = 1
        case UNRECOGNIZED(Int)

        public init() {
          self = .vehicle
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .vehicle
          case 1: self = .rideosDefault
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .vehicle: return 0
          case .rideosDefault: return 1
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      public init() {}
    }

    /// Vehicle is driving to a location 
    public struct DriveToLocation {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Route information driving from the current stop to the next stop
      public var route: Rideos_RideHailCommons_VehicleState.Step.RouteLeg {
        get {return _route ?? Rideos_RideHailCommons_VehicleState.Step.RouteLeg()}
        set {_route = newValue}
      }
      /// Returns true if `route` has been explicitly set.
      public var hasRoute: Bool {return self._route != nil}
      /// Clears the value of `route`. Subsequent reads from it will return its default value.
      public mutating func clearRoute() {self._route = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _route: Rideos_RideHailCommons_VehicleState.Step.RouteLeg? = nil
    }

    /// Vehicle is waiting to pick up the rider
    public struct PickupRider {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Number of riders to be picked up
      public var riderCount: UInt32 = 0

      /// Information about the rider such as contact info.
      public var riderInfo: Rideos_RideHailCommons_RiderInfo {
        get {return _riderInfo ?? Rideos_RideHailCommons_RiderInfo()}
        set {_riderInfo = newValue}
      }
      /// Returns true if `riderInfo` has been explicitly set.
      public var hasRiderInfo: Bool {return self._riderInfo != nil}
      /// Clears the value of `riderInfo`. Subsequent reads from it will return its default value.
      public mutating func clearRiderInfo() {self._riderInfo = nil}

      /// Expected amount of time remaining to pickup the rider.
      public var expectedRemainingTime: SwiftProtobuf.Google_Protobuf_Duration {
        get {return _expectedRemainingTime ?? SwiftProtobuf.Google_Protobuf_Duration()}
        set {_expectedRemainingTime = newValue}
      }
      /// Returns true if `expectedRemainingTime` has been explicitly set.
      public var hasExpectedRemainingTime: Bool {return self._expectedRemainingTime != nil}
      /// Clears the value of `expectedRemainingTime`. Subsequent reads from it will return its default value.
      public mutating func clearExpectedRemainingTime() {self._expectedRemainingTime = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _riderInfo: Rideos_RideHailCommons_RiderInfo? = nil
      fileprivate var _expectedRemainingTime: SwiftProtobuf.Google_Protobuf_Duration? = nil
    }

    /// Vehicle is waiting for the rider to leave
    public struct DropoffRider {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Number of riders to be dropped off
      public var riderCount: UInt32 = 0

      /// Information about the rider such as contact info.
      public var riderInfo: Rideos_RideHailCommons_RiderInfo {
        get {return _riderInfo ?? Rideos_RideHailCommons_RiderInfo()}
        set {_riderInfo = newValue}
      }
      /// Returns true if `riderInfo` has been explicitly set.
      public var hasRiderInfo: Bool {return self._riderInfo != nil}
      /// Clears the value of `riderInfo`. Subsequent reads from it will return its default value.
      public mutating func clearRiderInfo() {self._riderInfo = nil}

      /// Expected amount of time remaining to drop off the rider.
      public var expectedRemainingTime: SwiftProtobuf.Google_Protobuf_Duration {
        get {return _expectedRemainingTime ?? SwiftProtobuf.Google_Protobuf_Duration()}
        set {_expectedRemainingTime = newValue}
      }
      /// Returns true if `expectedRemainingTime` has been explicitly set.
      public var hasExpectedRemainingTime: Bool {return self._expectedRemainingTime != nil}
      /// Clears the value of `expectedRemainingTime`. Subsequent reads from it will return its default value.
      public mutating func clearExpectedRemainingTime() {self._expectedRemainingTime = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _riderInfo: Rideos_RideHailCommons_RiderInfo? = nil
      fileprivate var _expectedRemainingTime: SwiftProtobuf.Google_Protobuf_Duration? = nil
    }

    public init() {}

    fileprivate var _position: Rideos_Geo_V1_Position? = nil
  }

  public init() {}

  fileprivate var _position: Rideos_Geo_V1_Position? = nil
  fileprivate var _heading: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
  fileprivate var _lastActiveTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _plan: Rideos_RideHailCommons_VehicleState.Plan? = nil
}

#if swift(>=4.2)

extension Rideos_RideHailCommons_VehicleState.Step.RouteLeg.Source: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Rideos_RideHailCommons_VehicleState.Step.RouteLeg.Source] = [
    .vehicle,
    .rideosDefault,
  ]
}

#endif  // swift(>=4.2)

/// Immutable properties of a vehicle
public struct Rideos_RideHailCommons_VehicleDefinition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Capacity of the vehicle in terms of seats available for riders.
  public var riderCapacity: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Information about the vehicle
public struct Rideos_RideHailCommons_VehicleInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Information about the driver, such as contact information.
  public var driverInfo: Rideos_RideHailCommons_DriverInfo {
    get {return _driverInfo ?? Rideos_RideHailCommons_DriverInfo()}
    set {_driverInfo = newValue}
  }
  /// Returns true if `driverInfo` has been explicitly set.
  public var hasDriverInfo: Bool {return self._driverInfo != nil}
  /// Clears the value of `driverInfo`. Subsequent reads from it will return its default value.
  public mutating func clearDriverInfo() {self._driverInfo = nil}

  /// Additional properties for storing partner-specific information about the vehicle, as string key value pairs.
  public var properties: Dictionary<String,String> = [:]

  /// The vehicle's license plate number.
  public var licensePlate: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _driverInfo: Rideos_RideHailCommons_DriverInfo? = nil
}

public struct Rideos_RideHailCommons_VehicleInfoUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var licensePlate: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _licensePlate ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_licensePlate = newValue}
  }
  /// Returns true if `licensePlate` has been explicitly set.
  public var hasLicensePlate: Bool {return self._licensePlate != nil}
  /// Clears the value of `licensePlate`. Subsequent reads from it will return its default value.
  public mutating func clearLicensePlate() {self._licensePlate = nil}

  public var driverInfo: Rideos_RideHailCommons_DriverInfo {
    get {return _driverInfo ?? Rideos_RideHailCommons_DriverInfo()}
    set {_driverInfo = newValue}
  }
  /// Returns true if `driverInfo` has been explicitly set.
  public var hasDriverInfo: Bool {return self._driverInfo != nil}
  /// Clears the value of `driverInfo`. Subsequent reads from it will return its default value.
  public mutating func clearDriverInfo() {self._driverInfo = nil}

  public var properties: Rideos_RideHailCommons_PropertyUpdate {
    get {return _properties ?? Rideos_RideHailCommons_PropertyUpdate()}
    set {_properties = newValue}
  }
  /// Returns true if `properties` has been explicitly set.
  public var hasProperties: Bool {return self._properties != nil}
  /// Clears the value of `properties`. Subsequent reads from it will return its default value.
  public mutating func clearProperties() {self._properties = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _licensePlate: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _driverInfo: Rideos_RideHailCommons_DriverInfo? = nil
  fileprivate var _properties: Rideos_RideHailCommons_PropertyUpdate? = nil
}

public struct Rideos_RideHailCommons_PropertyUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var properties: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Information about the driver, if applicable
public struct Rideos_RideHailCommons_DriverInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Information for contacting the driver.
  public var contactInfo: Rideos_RideHailCommons_ContactInfo {
    get {return _contactInfo ?? Rideos_RideHailCommons_ContactInfo()}
    set {_contactInfo = newValue}
  }
  /// Returns true if `contactInfo` has been explicitly set.
  public var hasContactInfo: Bool {return self._contactInfo != nil}
  /// Clears the value of `contactInfo`. Subsequent reads from it will return its default value.
  public mutating func clearContactInfo() {self._contactInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _contactInfo: Rideos_RideHailCommons_ContactInfo? = nil
}

public struct Rideos_RideHailCommons_AcceptingRides {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether upcoming passenger trips can be assigned to this vehicle.
  public var isAcceptingRides: Bool = false

  /// Optional: Description outlining reason for vehicle's ride acceptance state.
  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A trip represents transporting one or more rider from a pickup to a drop-off location
public struct Rideos_RideHailCommons_Trip {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Client-provided identifier of the trip, needs to be unqiue across the fleet and can not be reused.
  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// Identifier of the fleet whose vehicles will be used to execute this trip.
  public var fleetID: String {
    get {return _storage._fleetID}
    set {_uniqueStorage()._fleetID = newValue}
  }

  /// Immutable definition of a trip like the pickup and drop-off locations, to change it a new trip needs to be requested.
  public var definition: Rideos_RideHailCommons_TripDefinition {
    get {return _storage._definition ?? Rideos_RideHailCommons_TripDefinition()}
    set {_uniqueStorage()._definition = newValue}
  }
  /// Returns true if `definition` has been explicitly set.
  public var hasDefinition: Bool {return _storage._definition != nil}
  /// Clears the value of `definition`. Subsequent reads from it will return its default value.
  public mutating func clearDefinition() {_uniqueStorage()._definition = nil}

  /// Information about the trip, like contact information of the rider and additional properties.
  public var info: Rideos_RideHailCommons_TripInfo {
    get {return _storage._info ?? Rideos_RideHailCommons_TripInfo()}
    set {_uniqueStorage()._info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  public var hasInfo: Bool {return _storage._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  public mutating func clearInfo() {_uniqueStorage()._info = nil}

  /// State of the trip, containing information specific to each state, for example the assigned vehicle or cancelation reason.
  public var state: Rideos_RideHailCommons_TripState {
    get {return _storage._state ?? Rideos_RideHailCommons_TripState()}
    set {_uniqueStorage()._state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return _storage._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {_uniqueStorage()._state = nil}

  public var creationTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._creationTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return _storage._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {_uniqueStorage()._creationTime = nil}

  public var terminationTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._terminationTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._terminationTime = newValue}
  }
  /// Returns true if `terminationTime` has been explicitly set.
  public var hasTerminationTime: Bool {return _storage._terminationTime != nil}
  /// Clears the value of `terminationTime`. Subsequent reads from it will return its default value.
  public mutating func clearTerminationTime() {_uniqueStorage()._terminationTime = nil}

  /// Client-provided identifier for the requestor
  public var requestorID: String {
    get {return _storage._requestorID}
    set {_uniqueStorage()._requestorID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Immutable properties of a trip
public struct Rideos_RideHailCommons_TripDefinition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tripType: Rideos_RideHailCommons_TripDefinition.OneOf_TripType? = nil

  /// Transport a rider from a pickup location to a drop-off location.
  public var pickupDropoff: Rideos_RideHailCommons_PickupDropoff {
    get {
      if case .pickupDropoff(let v)? = tripType {return v}
      return Rideos_RideHailCommons_PickupDropoff()
    }
    set {tripType = .pickupDropoff(newValue)}
  }

  /// Relocate a vehicle to a specific location.
  public var relocate: Rideos_RideHailCommons_Relocate {
    get {
      if case .relocate(let v)? = tripType {return v}
      return Rideos_RideHailCommons_Relocate()
    }
    set {tripType = .relocate(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_TripType: Equatable {
    /// Transport a rider from a pickup location to a drop-off location.
    case pickupDropoff(Rideos_RideHailCommons_PickupDropoff)
    /// Relocate a vehicle to a specific location.
    case relocate(Rideos_RideHailCommons_Relocate)

  #if !swift(>=4.1)
    public static func ==(lhs: Rideos_RideHailCommons_TripDefinition.OneOf_TripType, rhs: Rideos_RideHailCommons_TripDefinition.OneOf_TripType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.pickupDropoff, .pickupDropoff): return {
        guard case .pickupDropoff(let l) = lhs, case .pickupDropoff(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.relocate, .relocate): return {
        guard case .relocate(let l) = lhs, case .relocate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Trip that drives to a different location
public struct Rideos_RideHailCommons_Relocate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var stop: Rideos_RideHailCommons_Stop {
    get {return _stop ?? Rideos_RideHailCommons_Stop()}
    set {_stop = newValue}
  }
  /// Returns true if `stop` has been explicitly set.
  public var hasStop: Bool {return self._stop != nil}
  /// Clears the value of `stop`. Subsequent reads from it will return its default value.
  public mutating func clearStop() {self._stop = nil}

  public var reason: Rideos_RideHailCommons_Relocate.RelocateReason = .unknown

  /// Description outlining the reason for the relocation trip.
  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum RelocateReason: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case refuel // = 1
    case repair // = 2
    case custom // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .refuel
      case 2: self = .repair
      case 3: self = .custom
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .refuel: return 1
      case .repair: return 2
      case .custom: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _stop: Rideos_RideHailCommons_Stop? = nil
}

#if swift(>=4.2)

extension Rideos_RideHailCommons_Relocate.RelocateReason: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Rideos_RideHailCommons_Relocate.RelocateReason] = [
    .unknown,
    .refuel,
    .repair,
    .custom,
  ]
}

#endif  // swift(>=4.2)

/// Trip that transports one or more rider from a pickup to a drop-off
public struct Rideos_RideHailCommons_PickupDropoff {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Pickup location of the trip.
  public var pickup: Rideos_RideHailCommons_Stop {
    get {return _pickup ?? Rideos_RideHailCommons_Stop()}
    set {_pickup = newValue}
  }
  /// Returns true if `pickup` has been explicitly set.
  public var hasPickup: Bool {return self._pickup != nil}
  /// Clears the value of `pickup`. Subsequent reads from it will return its default value.
  public mutating func clearPickup() {self._pickup = nil}

  /// Dropoff location of the trip.
  public var dropoff: Rideos_RideHailCommons_Stop {
    get {return _dropoff ?? Rideos_RideHailCommons_Stop()}
    set {_dropoff = newValue}
  }
  /// Returns true if `dropoff` has been explicitly set.
  public var hasDropoff: Bool {return self._dropoff != nil}
  /// Clears the value of `dropoff`. Subsequent reads from it will return its default value.
  public mutating func clearDropoff() {self._dropoff = nil}

  /// Number of riders being transported.
  public var riderCount: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _pickup: Rideos_RideHailCommons_Stop? = nil
  fileprivate var _dropoff: Rideos_RideHailCommons_Stop? = nil
}

/// Information about the trip
public struct Rideos_RideHailCommons_TripInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Information about the rider such as contact info.
  public var riderInfo: Rideos_RideHailCommons_RiderInfo {
    get {return _riderInfo ?? Rideos_RideHailCommons_RiderInfo()}
    set {_riderInfo = newValue}
  }
  /// Returns true if `riderInfo` has been explicitly set.
  public var hasRiderInfo: Bool {return self._riderInfo != nil}
  /// Clears the value of `riderInfo`. Subsequent reads from it will return its default value.
  public mutating func clearRiderInfo() {self._riderInfo = nil}

  /// Additional properties for storing partner-specific information about the trip, as string key value pairs.
  public var properties: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _riderInfo: Rideos_RideHailCommons_RiderInfo? = nil
}

/// Information about the rider
public struct Rideos_RideHailCommons_RiderInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Contact information for the rider that requested the trip.
  public var contactInfo: Rideos_RideHailCommons_ContactInfo {
    get {return _contactInfo ?? Rideos_RideHailCommons_ContactInfo()}
    set {_contactInfo = newValue}
  }
  /// Returns true if `contactInfo` has been explicitly set.
  public var hasContactInfo: Bool {return self._contactInfo != nil}
  /// Clears the value of `contactInfo`. Subsequent reads from it will return its default value.
  public mutating func clearContactInfo() {self._contactInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _contactInfo: Rideos_RideHailCommons_ContactInfo? = nil
}

/// State of a trip
///
/// State changes will be triggered by actions of the vehicle, rider or the dispatch optimization.
public struct Rideos_RideHailCommons_TripState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tripState: OneOf_TripState? {
    get {return _storage._tripState}
    set {_uniqueStorage()._tripState = newValue}
  }

  /// State information for an unassigned trip
  public var waitingForAssignment: Rideos_RideHailCommons_TripState.WaitingForAssignment {
    get {
      if case .waitingForAssignment(let v)? = _storage._tripState {return v}
      return Rideos_RideHailCommons_TripState.WaitingForAssignment()
    }
    set {_uniqueStorage()._tripState = .waitingForAssignment(newValue)}
  }

  /// State information for a trip when the vehicle is driving to the pickup location
  public var drivingToPickup: Rideos_RideHailCommons_TripState.DrivingToPickup {
    get {
      if case .drivingToPickup(let v)? = _storage._tripState {return v}
      return Rideos_RideHailCommons_TripState.DrivingToPickup()
    }
    set {_uniqueStorage()._tripState = .drivingToPickup(newValue)}
  }

  /// State information for a trip when the vehicle waiting on the rider at the pickup location
  public var waitingForPickup: Rideos_RideHailCommons_TripState.WaitingForPickup {
    get {
      if case .waitingForPickup(let v)? = _storage._tripState {return v}
      return Rideos_RideHailCommons_TripState.WaitingForPickup()
    }
    set {_uniqueStorage()._tripState = .waitingForPickup(newValue)}
  }

  /// State information for a trip when the vehicle is driving to the drop-off location
  public var drivingToDropoff: Rideos_RideHailCommons_TripState.DrivingToDropoff {
    get {
      if case .drivingToDropoff(let v)? = _storage._tripState {return v}
      return Rideos_RideHailCommons_TripState.DrivingToDropoff()
    }
    set {_uniqueStorage()._tripState = .drivingToDropoff(newValue)}
  }

  /// State information for a trip when the vehicle is waiting at the end of a trip
  public var waitingForDropoff: Rideos_RideHailCommons_TripState.WaitingForDropoff {
    get {
      if case .waitingForDropoff(let v)? = _storage._tripState {return v}
      return Rideos_RideHailCommons_TripState.WaitingForDropoff()
    }
    set {_uniqueStorage()._tripState = .waitingForDropoff(newValue)}
  }

  /// State information for a trip that has been completed successfully
  public var completed: Rideos_RideHailCommons_TripState.Completed {
    get {
      if case .completed(let v)? = _storage._tripState {return v}
      return Rideos_RideHailCommons_TripState.Completed()
    }
    set {_uniqueStorage()._tripState = .completed(newValue)}
  }

  /// State information for a trip that has been canceled
  public var canceled: Rideos_RideHailCommons_TripState.Canceled {
    get {
      if case .canceled(let v)? = _storage._tripState {return v}
      return Rideos_RideHailCommons_TripState.Canceled()
    }
    set {_uniqueStorage()._tripState = .canceled(newValue)}
  }

  /// State information for a trip that has been replaced by another trip (e.g. due to changes to the trip definition)
  public var replaced: Rideos_RideHailCommons_TripState.Replaced {
    get {
      if case .replaced(let v)? = _storage._tripState {return v}
      return Rideos_RideHailCommons_TripState.Replaced()
    }
    set {_uniqueStorage()._tripState = .replaced(newValue)}
  }

  /// When the task was last assigned to a vehicle.
  public var lastAssignedTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._lastAssignedTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._lastAssignedTimestamp = newValue}
  }
  /// Returns true if `lastAssignedTimestamp` has been explicitly set.
  public var hasLastAssignedTimestamp: Bool {return _storage._lastAssignedTimestamp != nil}
  /// Clears the value of `lastAssignedTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearLastAssignedTimestamp() {_uniqueStorage()._lastAssignedTimestamp = nil}

  public var stepCompletionState: Rideos_RideHailCommons_StepCompletionState {
    get {return _storage._stepCompletionState ?? Rideos_RideHailCommons_StepCompletionState()}
    set {_uniqueStorage()._stepCompletionState = newValue}
  }
  /// Returns true if `stepCompletionState` has been explicitly set.
  public var hasStepCompletionState: Bool {return _storage._stepCompletionState != nil}
  /// Clears the value of `stepCompletionState`. Subsequent reads from it will return its default value.
  public mutating func clearStepCompletionState() {_uniqueStorage()._stepCompletionState = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_TripState: Equatable {
    /// State information for an unassigned trip
    case waitingForAssignment(Rideos_RideHailCommons_TripState.WaitingForAssignment)
    /// State information for a trip when the vehicle is driving to the pickup location
    case drivingToPickup(Rideos_RideHailCommons_TripState.DrivingToPickup)
    /// State information for a trip when the vehicle waiting on the rider at the pickup location
    case waitingForPickup(Rideos_RideHailCommons_TripState.WaitingForPickup)
    /// State information for a trip when the vehicle is driving to the drop-off location
    case drivingToDropoff(Rideos_RideHailCommons_TripState.DrivingToDropoff)
    /// State information for a trip when the vehicle is waiting at the end of a trip
    case waitingForDropoff(Rideos_RideHailCommons_TripState.WaitingForDropoff)
    /// State information for a trip that has been completed successfully
    case completed(Rideos_RideHailCommons_TripState.Completed)
    /// State information for a trip that has been canceled
    case canceled(Rideos_RideHailCommons_TripState.Canceled)
    /// State information for a trip that has been replaced by another trip (e.g. due to changes to the trip definition)
    case replaced(Rideos_RideHailCommons_TripState.Replaced)

  #if !swift(>=4.1)
    public static func ==(lhs: Rideos_RideHailCommons_TripState.OneOf_TripState, rhs: Rideos_RideHailCommons_TripState.OneOf_TripState) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.waitingForAssignment, .waitingForAssignment): return {
        guard case .waitingForAssignment(let l) = lhs, case .waitingForAssignment(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.drivingToPickup, .drivingToPickup): return {
        guard case .drivingToPickup(let l) = lhs, case .drivingToPickup(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.waitingForPickup, .waitingForPickup): return {
        guard case .waitingForPickup(let l) = lhs, case .waitingForPickup(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.drivingToDropoff, .drivingToDropoff): return {
        guard case .drivingToDropoff(let l) = lhs, case .drivingToDropoff(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.waitingForDropoff, .waitingForDropoff): return {
        guard case .waitingForDropoff(let l) = lhs, case .waitingForDropoff(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.completed, .completed): return {
        guard case .completed(let l) = lhs, case .completed(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.canceled, .canceled): return {
        guard case .canceled(let l) = lhs, case .canceled(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.replaced, .replaced): return {
        guard case .replaced(let l) = lhs, case .replaced(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public enum CancelSource: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0

    /// Trip was canceled from the Rider API.
    case rider // = 1

    /// Trip was canceled from the Driver API.
    case driver // = 2

    /// Trip was canceled from the Operations API.
    case operations // = 3

    /// Trip was canceled by rideOS from an internal service.
    case `internal` // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .rider
      case 2: self = .driver
      case 3: self = .operations
      case 4: self = .internal
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .rider: return 1
      case .driver: return 2
      case .operations: return 3
      case .internal: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Waiting to be assigned to a vehicle in the fleet.
  public struct WaitingForAssignment {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// One or more reasons why the task was not resolved (not in any particular order) along with the number of
    /// vehicles that match that reason. This field is set only if the trip remains in WaitingForAssignment state
    /// after a dispatch optimization run has already happened. If a vehicle is not able to satisfy the given task
    /// for more than one reason then it will be included in the vehicle_count for each applicable reason.
    /// e.g. For vehicles V1 and V2, if a task T is unresolved because neither has enough capacity and V2 is
    /// blacklisted for T, there will be two UnresolvedReasons:
    ///   1) VEHICLES_WITH_LOW_CAPACITY with vehicle_count 2
    ///   2) VEHICLES_BLACKLISTED with vehicle_count 1
    /// For vehicles where none of the known Type is applicable, the unresolvable_reason_type will be set to UNKNOWN
    /// and the vehicle_count set to the number of such vehicles.
    public var unresolvableReason: [Rideos_FleetPlannerCommons_UnresolvableReason] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Vehicle is on its way to pickup the rider.
  /// There might be intermediate steps, e.g. other riders getting picked up or dropped off before this trip will be started.
  public struct DrivingToPickup {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Information about the vehicle that was assigned to transport the rider,
    /// like driver contact info and steps preceding the pickup of the current rider.
    public var assignedVehicle: Rideos_RideHailCommons_AssignedVehicle {
      get {return _assignedVehicle ?? Rideos_RideHailCommons_AssignedVehicle()}
      set {_assignedVehicle = newValue}
    }
    /// Returns true if `assignedVehicle` has been explicitly set.
    public var hasAssignedVehicle: Bool {return self._assignedVehicle != nil}
    /// Clears the value of `assignedVehicle`. Subsequent reads from it will return its default value.
    public mutating func clearAssignedVehicle() {self._assignedVehicle = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _assignedVehicle: Rideos_RideHailCommons_AssignedVehicle? = nil
  }

  /// Vehicle is waiting for the rider at the pickup location.
  public struct WaitingForPickup {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Information about the vehicle that was assigned to transport the rider,
    /// like driver contact info and steps preceding the pickup of the current rider.
    public var assignedVehicle: Rideos_RideHailCommons_AssignedVehicle {
      get {return _assignedVehicle ?? Rideos_RideHailCommons_AssignedVehicle()}
      set {_assignedVehicle = newValue}
    }
    /// Returns true if `assignedVehicle` has been explicitly set.
    public var hasAssignedVehicle: Bool {return self._assignedVehicle != nil}
    /// Clears the value of `assignedVehicle`. Subsequent reads from it will return its default value.
    public mutating func clearAssignedVehicle() {self._assignedVehicle = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _assignedVehicle: Rideos_RideHailCommons_AssignedVehicle? = nil
  }

  /// Vehicle is driving to the drop-off location.
  /// There might be intermediate steps, e.g. other riders getting picked up or dropped off before this trip will be finished.
  public struct DrivingToDropoff {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Information about the vehicle that was assigned to transport the rider,
    /// like driver contact info and steps preceding the pickup of the current rider.
    public var assignedVehicle: Rideos_RideHailCommons_AssignedVehicle {
      get {return _assignedVehicle ?? Rideos_RideHailCommons_AssignedVehicle()}
      set {_assignedVehicle = newValue}
    }
    /// Returns true if `assignedVehicle` has been explicitly set.
    public var hasAssignedVehicle: Bool {return self._assignedVehicle != nil}
    /// Clears the value of `assignedVehicle`. Subsequent reads from it will return its default value.
    public mutating func clearAssignedVehicle() {self._assignedVehicle = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _assignedVehicle: Rideos_RideHailCommons_AssignedVehicle? = nil
  }

  public struct WaitingForDropoff {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Information about the vehicle that was assigned to transport the rider,
    /// like driver contact info and steps preceding the pickup of the current rider.
    public var assignedVehicle: Rideos_RideHailCommons_AssignedVehicle {
      get {return _assignedVehicle ?? Rideos_RideHailCommons_AssignedVehicle()}
      set {_assignedVehicle = newValue}
    }
    /// Returns true if `assignedVehicle` has been explicitly set.
    public var hasAssignedVehicle: Bool {return self._assignedVehicle != nil}
    /// Clears the value of `assignedVehicle`. Subsequent reads from it will return its default value.
    public mutating func clearAssignedVehicle() {self._assignedVehicle = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _assignedVehicle: Rideos_RideHailCommons_AssignedVehicle? = nil
  }

  /// Trip was completed successfully.
  public struct Completed {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Client-provided identifier of the vehicle that completed the trip.
    public var vehicleID: String = String()

    /// Time at which the trip was completed
    public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_timestamp = newValue}
    }
    /// Returns true if `timestamp` has been explicitly set.
    public var hasTimestamp: Bool {return self._timestamp != nil}
    /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
    public mutating func clearTimestamp() {self._timestamp = nil}

    /// Information about the vehicle that completed the trip
    public var vehicleInfo: Rideos_RideHailCommons_VehicleInfo {
      get {return _vehicleInfo ?? Rideos_RideHailCommons_VehicleInfo()}
      set {_vehicleInfo = newValue}
    }
    /// Returns true if `vehicleInfo` has been explicitly set.
    public var hasVehicleInfo: Bool {return self._vehicleInfo != nil}
    /// Clears the value of `vehicleInfo`. Subsequent reads from it will return its default value.
    public mutating func clearVehicleInfo() {self._vehicleInfo = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _vehicleInfo: Rideos_RideHailCommons_VehicleInfo? = nil
  }

  /// Trip was canceled by either the rider or driver.
  public struct Canceled {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Reason of the cancellation, if available. 
    public var description_p: String = String()

    /// Source of the cancellation
    public var source: Rideos_RideHailCommons_TripState.CancelSource = .unknown

    /// Time at which the trip was canceled
    public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_timestamp = newValue}
    }
    /// Returns true if `timestamp` has been explicitly set.
    public var hasTimestamp: Bool {return self._timestamp != nil}
    /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
    public mutating func clearTimestamp() {self._timestamp = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  /// Trip was replaced by a different trip.
  /// This state occurs when the definition needed to be updated,
  /// e.g. the pick-up or drop-off location changed,
  /// or more riders needed to be picked up.
  public struct Replaced {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Client-provided identifier of the trip that replaced this trip.
    public var replacementTripID: String = String()

    /// Time at which the trip was replaced
    public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_timestamp = newValue}
    }
    /// Returns true if `timestamp` has been explicitly set.
    public var hasTimestamp: Bool {return self._timestamp != nil}
    /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
    public mutating func clearTimestamp() {self._timestamp = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Rideos_RideHailCommons_TripState.CancelSource: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Rideos_RideHailCommons_TripState.CancelSource] = [
    .unknown,
    .rider,
    .driver,
    .operations,
    .internal,
  ]
}

#endif  // swift(>=4.2)

/// Contains the completion timestamps of all steps that have been completed, if any
public struct Rideos_RideHailCommons_StepCompletionState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var drivingToPickup: Rideos_RideHailCommons_StepState {
    get {return _drivingToPickup ?? Rideos_RideHailCommons_StepState()}
    set {_drivingToPickup = newValue}
  }
  /// Returns true if `drivingToPickup` has been explicitly set.
  public var hasDrivingToPickup: Bool {return self._drivingToPickup != nil}
  /// Clears the value of `drivingToPickup`. Subsequent reads from it will return its default value.
  public mutating func clearDrivingToPickup() {self._drivingToPickup = nil}

  public var waitingForPickup: Rideos_RideHailCommons_StepState {
    get {return _waitingForPickup ?? Rideos_RideHailCommons_StepState()}
    set {_waitingForPickup = newValue}
  }
  /// Returns true if `waitingForPickup` has been explicitly set.
  public var hasWaitingForPickup: Bool {return self._waitingForPickup != nil}
  /// Clears the value of `waitingForPickup`. Subsequent reads from it will return its default value.
  public mutating func clearWaitingForPickup() {self._waitingForPickup = nil}

  public var drivingToDropoff: Rideos_RideHailCommons_StepState {
    get {return _drivingToDropoff ?? Rideos_RideHailCommons_StepState()}
    set {_drivingToDropoff = newValue}
  }
  /// Returns true if `drivingToDropoff` has been explicitly set.
  public var hasDrivingToDropoff: Bool {return self._drivingToDropoff != nil}
  /// Clears the value of `drivingToDropoff`. Subsequent reads from it will return its default value.
  public mutating func clearDrivingToDropoff() {self._drivingToDropoff = nil}

  public var waitingForDropoff: Rideos_RideHailCommons_StepState {
    get {return _waitingForDropoff ?? Rideos_RideHailCommons_StepState()}
    set {_waitingForDropoff = newValue}
  }
  /// Returns true if `waitingForDropoff` has been explicitly set.
  public var hasWaitingForDropoff: Bool {return self._waitingForDropoff != nil}
  /// Clears the value of `waitingForDropoff`. Subsequent reads from it will return its default value.
  public mutating func clearWaitingForDropoff() {self._waitingForDropoff = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _drivingToPickup: Rideos_RideHailCommons_StepState? = nil
  fileprivate var _waitingForPickup: Rideos_RideHailCommons_StepState? = nil
  fileprivate var _drivingToDropoff: Rideos_RideHailCommons_StepState? = nil
  fileprivate var _waitingForDropoff: Rideos_RideHailCommons_StepState? = nil
}

/// The completion state of a single step in the trip
public struct Rideos_RideHailCommons_StepState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var timeOfCompletion: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timeOfCompletion ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timeOfCompletion = newValue}
  }
  /// Returns true if `timeOfCompletion` has been explicitly set.
  public var hasTimeOfCompletion: Bool {return self._timeOfCompletion != nil}
  /// Clears the value of `timeOfCompletion`. Subsequent reads from it will return its default value.
  public mutating func clearTimeOfCompletion() {self._timeOfCompletion = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeOfCompletion: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Vehicle that was assigned to a trip
public struct Rideos_RideHailCommons_AssignedVehicle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Client-provided identifier of the vehicle that was assigned.
  public var id: String = String()

  /// Information about the vehicle and its driver, such as contact information and additional properties.
  public var info: Rideos_RideHailCommons_VehicleInfo {
    get {return _info ?? Rideos_RideHailCommons_VehicleInfo()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  public var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  public mutating func clearInfo() {self._info = nil}

  /// Current plan of the vehicle until the assigned trip ends.
  /// 
  /// This includes the steps before the current trip will be started,
  /// and all intermediate steps until the trip will be completed.
  public var planThroughTripEnd: Rideos_RideHailCommons_VehicleState.Plan {
    get {return _planThroughTripEnd ?? Rideos_RideHailCommons_VehicleState.Plan()}
    set {_planThroughTripEnd = newValue}
  }
  /// Returns true if `planThroughTripEnd` has been explicitly set.
  public var hasPlanThroughTripEnd: Bool {return self._planThroughTripEnd != nil}
  /// Clears the value of `planThroughTripEnd`. Subsequent reads from it will return its default value.
  public mutating func clearPlanThroughTripEnd() {self._planThroughTripEnd = nil}

  /// Last known position of the vehicle as WGS84 coordinate.
  public var position: Rideos_Geo_V1_Position {
    get {return _position ?? Rideos_Geo_V1_Position()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  /// Last known heading of the vehicle in degrees 0...360 from true-north.
  public var heading: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _heading ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_heading = newValue}
  }
  /// Returns true if `heading` has been explicitly set.
  public var hasHeading: Bool {return self._heading != nil}
  /// Clears the value of `heading`. Subsequent reads from it will return its default value.
  public mutating func clearHeading() {self._heading = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _info: Rideos_RideHailCommons_VehicleInfo? = nil
  fileprivate var _planThroughTripEnd: Rideos_RideHailCommons_VehicleState.Plan? = nil
  fileprivate var _position: Rideos_Geo_V1_Position? = nil
  fileprivate var _heading: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
}

public struct Rideos_RideHailCommons_AvailableVehicle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fleetControlVehicleID: String = String()

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_RideHailCommons_CancelReason {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var source: Rideos_RideHailCommons_CancelReason.Source = .unknown

  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Source: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case requestor // = 1
    case vehicle // = 2
    case `internal` // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .requestor
      case 2: self = .vehicle
      case 3: self = .internal
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .requestor: return 1
      case .vehicle: return 2
      case .internal: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Rideos_RideHailCommons_CancelReason.Source: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Rideos_RideHailCommons_CancelReason.Source] = [
    .unknown,
    .requestor,
    .vehicle,
    .internal,
  ]
}

#endif  // swift(>=4.2)

public struct Rideos_RideHailCommons_VehiclePreview {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var positionAndHeading: Rideos_Geo_V1_PositionAndHeading {
    get {return _positionAndHeading ?? Rideos_Geo_V1_PositionAndHeading()}
    set {_positionAndHeading = newValue}
  }
  /// Returns true if `positionAndHeading` has been explicitly set.
  public var hasPositionAndHeading: Bool {return self._positionAndHeading != nil}
  /// Clears the value of `positionAndHeading`. Subsequent reads from it will return its default value.
  public mutating func clearPositionAndHeading() {self._positionAndHeading = nil}

  /// ID of the preview vehicle.
  ///
  /// Use this only for animation purposes (to animate a vehicle moving over time). Does not necessarily correspond
  /// to the vehicle ID of a real vehicle.
  public var previewID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _positionAndHeading: Rideos_Geo_V1_PositionAndHeading? = nil
}

public struct Rideos_RideHailCommons_VehicleRouteLeg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var polyline: String = String()

  public var travelTime: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _travelTime ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_travelTime = newValue}
  }
  /// Returns true if `travelTime` has been explicitly set.
  public var hasTravelTime: Bool {return self._travelTime != nil}
  /// Clears the value of `travelTime`. Subsequent reads from it will return its default value.
  public mutating func clearTravelTime() {self._travelTime = nil}

  public var distanceInMeters: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _travelTime: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

public struct Rideos_RideHailCommons_VehicleFilter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Rideos_RideHailCommons_VehicleFilter.OneOf_Type? = nil

  /// Force the task to be dispatched to the vehicle with this vehicle id
  public var vehicleID: String {
    get {
      if case .vehicleID(let v)? = type {return v}
      return String()
    }
    set {type = .vehicleID(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    /// Force the task to be dispatched to the vehicle with this vehicle id
    case vehicleID(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Rideos_RideHailCommons_VehicleFilter.OneOf_Type, rhs: Rideos_RideHailCommons_VehicleFilter.OneOf_Type) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.vehicleID, .vehicleID): return {
        guard case .vehicleID(let l) = lhs, case .vehicleID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

public struct Rideos_RideHailCommons_OptimizationParameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// How long to wait for a dispatch before timing out this task. If left unset, a default value will be selected.
  /// Set to zero or a negative duration to disable the timeout.
  public var dispatchTimeout: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _dispatchTimeout ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_dispatchTimeout = newValue}
  }
  /// Returns true if `dispatchTimeout` has been explicitly set.
  public var hasDispatchTimeout: Bool {return self._dispatchTimeout != nil}
  /// Clears the value of `dispatchTimeout`. Subsequent reads from it will return its default value.
  public mutating func clearDispatchTimeout() {self._dispatchTimeout = nil}

  public var vehicleFilter: Rideos_RideHailCommons_VehicleFilter {
    get {return _vehicleFilter ?? Rideos_RideHailCommons_VehicleFilter()}
    set {_vehicleFilter = newValue}
  }
  /// Returns true if `vehicleFilter` has been explicitly set.
  public var hasVehicleFilter: Bool {return self._vehicleFilter != nil}
  /// Clears the value of `vehicleFilter`. Subsequent reads from it will return its default value.
  public mutating func clearVehicleFilter() {self._vehicleFilter = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _dispatchTimeout: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _vehicleFilter: Rideos_RideHailCommons_VehicleFilter? = nil
}

public struct Rideos_RideHailCommons_PassengerTaskRequestInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This task will only be assigned to vehicles with a matching fleet_id. If the fleet_id is not specified, the task
  /// will only be assigned to vehicles with a blank fleet_id.
  public var fleetID: String {
    get {return _storage._fleetID}
    set {_uniqueStorage()._fleetID = newValue}
  }

  public var pickupLocation: Rideos_RideHailCommons_TaskLocation {
    get {return _storage._pickupLocation ?? Rideos_RideHailCommons_TaskLocation()}
    set {_uniqueStorage()._pickupLocation = newValue}
  }
  /// Returns true if `pickupLocation` has been explicitly set.
  public var hasPickupLocation: Bool {return _storage._pickupLocation != nil}
  /// Clears the value of `pickupLocation`. Subsequent reads from it will return its default value.
  public mutating func clearPickupLocation() {_uniqueStorage()._pickupLocation = nil}

  public var dropoffLocation: Rideos_RideHailCommons_TaskLocation {
    get {return _storage._dropoffLocation ?? Rideos_RideHailCommons_TaskLocation()}
    set {_uniqueStorage()._dropoffLocation = newValue}
  }
  /// Returns true if `dropoffLocation` has been explicitly set.
  public var hasDropoffLocation: Bool {return _storage._dropoffLocation != nil}
  /// Clears the value of `dropoffLocation`. Subsequent reads from it will return its default value.
  public mutating func clearDropoffLocation() {_uniqueStorage()._dropoffLocation = nil}

  /// Required. Must be at least 1.
  public var numPassengers: UInt32 {
    get {return _storage._numPassengers}
    set {_uniqueStorage()._numPassengers = newValue}
  }

  public var optimizationParameters: Rideos_RideHailCommons_OptimizationParameters {
    get {return _storage._optimizationParameters ?? Rideos_RideHailCommons_OptimizationParameters()}
    set {_uniqueStorage()._optimizationParameters = newValue}
  }
  /// Returns true if `optimizationParameters` has been explicitly set.
  public var hasOptimizationParameters: Bool {return _storage._optimizationParameters != nil}
  /// Clears the value of `optimizationParameters`. Subsequent reads from it will return its default value.
  public mutating func clearOptimizationParameters() {_uniqueStorage()._optimizationParameters = nil}

  public var pickup: Rideos_RideHailCommons_StopLocation {
    get {return _storage._pickup ?? Rideos_RideHailCommons_StopLocation()}
    set {_uniqueStorage()._pickup = newValue}
  }
  /// Returns true if `pickup` has been explicitly set.
  public var hasPickup: Bool {return _storage._pickup != nil}
  /// Clears the value of `pickup`. Subsequent reads from it will return its default value.
  public mutating func clearPickup() {_uniqueStorage()._pickup = nil}

  public var dropoff: Rideos_RideHailCommons_StopLocation {
    get {return _storage._dropoff ?? Rideos_RideHailCommons_StopLocation()}
    set {_uniqueStorage()._dropoff = newValue}
  }
  /// Returns true if `dropoff` has been explicitly set.
  public var hasDropoff: Bool {return _storage._dropoff != nil}
  /// Clears the value of `dropoff`. Subsequent reads from it will return its default value.
  public mutating func clearDropoff() {_uniqueStorage()._dropoff = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Rideos_RideHailCommons_Pudol {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pudolID: String = String()

  public var position: Rideos_Geo_V1_Position {
    get {return _position ?? Rideos_Geo_V1_Position()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _position: Rideos_Geo_V1_Position? = nil
}

public struct Rideos_RideHailCommons_StopLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var position: Rideos_Geo_V1_Position {
    get {return _position ?? Rideos_Geo_V1_Position()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var externalStopID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _position: Rideos_Geo_V1_Position? = nil
}

public struct Rideos_RideHailCommons_DeprecatedVehicle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String {
    get {return _storage._vehicleID}
    set {_uniqueStorage()._vehicleID = newValue}
  }

  public var fleetID: String {
    get {return _storage._fleetID}
    set {_uniqueStorage()._fleetID = newValue}
  }

  public var currentTripID: [String] {
    get {return _storage._currentTripID}
    set {_uniqueStorage()._currentTripID = newValue}
  }

  public var currentPositionAndHeading: Rideos_Geo_V1_PositionAndHeading {
    get {return _storage._currentPositionAndHeading ?? Rideos_Geo_V1_PositionAndHeading()}
    set {_uniqueStorage()._currentPositionAndHeading = newValue}
  }
  /// Returns true if `currentPositionAndHeading` has been explicitly set.
  public var hasCurrentPositionAndHeading: Bool {return _storage._currentPositionAndHeading != nil}
  /// Clears the value of `currentPositionAndHeading`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentPositionAndHeading() {_uniqueStorage()._currentPositionAndHeading = nil}

  public var lastActiveTimeEpochMs: Int64 {
    get {return _storage._lastActiveTimeEpochMs}
    set {_uniqueStorage()._lastActiveTimeEpochMs = newValue}
  }

  public var vehiclePlan: Rideos_RideHailCommons_DeprecatedPlan {
    get {return _storage._vehiclePlan ?? Rideos_RideHailCommons_DeprecatedPlan()}
    set {_uniqueStorage()._vehiclePlan = newValue}
  }
  /// Returns true if `vehiclePlan` has been explicitly set.
  public var hasVehiclePlan: Bool {return _storage._vehiclePlan != nil}
  /// Clears the value of `vehiclePlan`. Subsequent reads from it will return its default value.
  public mutating func clearVehiclePlan() {_uniqueStorage()._vehiclePlan = nil}

  public var vehicleInfo: Rideos_RideHailCommons_DeprecatedVehicleInfo {
    get {return _storage._vehicleInfo ?? Rideos_RideHailCommons_DeprecatedVehicleInfo()}
    set {_uniqueStorage()._vehicleInfo = newValue}
  }
  /// Returns true if `vehicleInfo` has been explicitly set.
  public var hasVehicleInfo: Bool {return _storage._vehicleInfo != nil}
  /// Clears the value of `vehicleInfo`. Subsequent reads from it will return its default value.
  public mutating func clearVehicleInfo() {_uniqueStorage()._vehicleInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Rideos_RideHailCommons_Waypoint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ID of the corresponding Task
  public var taskID: String = String()

  /// ID of the original Step from which the Waypoint was derived
  public var stepID: String = String()

  /// The details of the step to complete
  public var step: Rideos_RideHailCommons_Step {
    get {return _step ?? Rideos_RideHailCommons_Step()}
    set {_step = newValue}
  }
  /// Returns true if `step` has been explicitly set.
  public var hasStep: Bool {return self._step != nil}
  /// Clears the value of `step`. Subsequent reads from it will return its default value.
  public mutating func clearStep() {self._step = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _step: Rideos_RideHailCommons_Step? = nil
}

public struct Rideos_RideHailCommons_Step {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Step IDs are globally unique
  public var id: String = String()

  public var location: Rideos_RideHailCommons_TaskLocation {
    get {return _location ?? Rideos_RideHailCommons_TaskLocation()}
    set {_location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  public var hasLocation: Bool {return self._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  public mutating func clearLocation() {self._location = nil}

  /// The resource to be picked up/dropped off
  public var resource: Rideos_RideHailCommons_Resource {
    get {return _resource ?? Rideos_RideHailCommons_Resource()}
    set {_resource = newValue}
  }
  /// Returns true if `resource` has been explicitly set.
  public var hasResource: Bool {return self._resource != nil}
  /// Clears the value of `resource`. Subsequent reads from it will return its default value.
  public mutating func clearResource() {self._resource = nil}

  /// The action to take at this step (pickup, dropoff, etc.)
  public var action: Rideos_RideHailCommons_Step.Action = .unknown

  public var tripLocation: Rideos_RideHailCommons_StopLocation {
    get {return _tripLocation ?? Rideos_RideHailCommons_StopLocation()}
    set {_tripLocation = newValue}
  }
  /// Returns true if `tripLocation` has been explicitly set.
  public var hasTripLocation: Bool {return self._tripLocation != nil}
  /// Clears the value of `tripLocation`. Subsequent reads from it will return its default value.
  public mutating func clearTripLocation() {self._tripLocation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Action: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0

    /// Drive to the pickup location.
    case driveToPickup // = 1

    /// Load the resource (e.g. passenger) into the vehicle.
    case loadResource // = 2

    /// Drive to the dropoff location.
    case driveToDropoff // = 3
    case relocateDrive // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .driveToPickup
      case 2: self = .loadResource
      case 3: self = .driveToDropoff
      case 4: self = .relocateDrive
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .driveToPickup: return 1
      case .loadResource: return 2
      case .driveToDropoff: return 3
      case .relocateDrive: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _location: Rideos_RideHailCommons_TaskLocation? = nil
  fileprivate var _resource: Rideos_RideHailCommons_Resource? = nil
  fileprivate var _tripLocation: Rideos_RideHailCommons_StopLocation? = nil
}

#if swift(>=4.2)

extension Rideos_RideHailCommons_Step.Action: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Rideos_RideHailCommons_Step.Action] = [
    .unknown,
    .driveToPickup,
    .loadResource,
    .driveToDropoff,
    .relocateDrive,
  ]
}

#endif  // swift(>=4.2)

public struct Rideos_RideHailCommons_Resource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var resourceID: String = String()

  public var resourceType: Rideos_RideHailCommons_Resource.OneOf_ResourceType? = nil

  public var passengers: Rideos_RideHailCommons_Resource.Passengers {
    get {
      if case .passengers(let v)? = resourceType {return v}
      return Rideos_RideHailCommons_Resource.Passengers()
    }
    set {resourceType = .passengers(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_ResourceType: Equatable {
    case passengers(Rideos_RideHailCommons_Resource.Passengers)

  #if !swift(>=4.1)
    public static func ==(lhs: Rideos_RideHailCommons_Resource.OneOf_ResourceType, rhs: Rideos_RideHailCommons_Resource.OneOf_ResourceType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.passengers, .passengers): return {
        guard case .passengers(let l) = lhs, case .passengers(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public struct Passengers {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var numPassengers: Int32 = 0

    public var requestorContactInfo: Rideos_RideHailCommons_ContactInfo {
      get {return _requestorContactInfo ?? Rideos_RideHailCommons_ContactInfo()}
      set {_requestorContactInfo = newValue}
    }
    /// Returns true if `requestorContactInfo` has been explicitly set.
    public var hasRequestorContactInfo: Bool {return self._requestorContactInfo != nil}
    /// Clears the value of `requestorContactInfo`. Subsequent reads from it will return its default value.
    public mutating func clearRequestorContactInfo() {self._requestorContactInfo = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _requestorContactInfo: Rideos_RideHailCommons_ContactInfo? = nil
  }

  public init() {}
}

public struct Rideos_RideHailCommons_FleetMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fleetID: String = String()

  public var properties: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_RideHailCommons_DeprecatedPlan {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var waypoints: [Rideos_RideHailCommons_Waypoint] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_RideHailCommons_DeprecatedVehicleInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var make: String = String()

  public var model: String = String()

  public var color: Rideos_RideHailCommons_DeprecatedVehicleInfo.VehicleColor = .unknown

  public var licensePlate: String = String()

  public var passengerCapacity: Int32 = 0

  /// May be empty if the vehicle has no driver contact info.
  public var driverContactInfo: Rideos_RideHailCommons_ContactInfo {
    get {return _driverContactInfo ?? Rideos_RideHailCommons_ContactInfo()}
    set {_driverContactInfo = newValue}
  }
  /// Returns true if `driverContactInfo` has been explicitly set.
  public var hasDriverContactInfo: Bool {return self._driverContactInfo != nil}
  /// Clears the value of `driverContactInfo`. Subsequent reads from it will return its default value.
  public mutating func clearDriverContactInfo() {self._driverContactInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum VehicleColor: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Color choices from the Texas DMV's website, see
    /// https://www.txdmv.gov/component/docman/doc_download/669-vehicle-color-chart?Itemid=232
    case unknown // = 0
    case blue // = 1
    case purple // = 2
    case pink // = 3
    case red // = 4
    case maroon // = 5
    case orange // = 6
    case tan // = 7
    case gold // = 8
    case yellow // = 9
    case green // = 10
    case brown // = 11
    case beige // = 12
    case silver // = 13
    case gray // = 14
    case black // = 15
    case white // = 16
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .blue
      case 2: self = .purple
      case 3: self = .pink
      case 4: self = .red
      case 5: self = .maroon
      case 6: self = .orange
      case 7: self = .tan
      case 8: self = .gold
      case 9: self = .yellow
      case 10: self = .green
      case 11: self = .brown
      case 12: self = .beige
      case 13: self = .silver
      case 14: self = .gray
      case 15: self = .black
      case 16: self = .white
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .blue: return 1
      case .purple: return 2
      case .pink: return 3
      case .red: return 4
      case .maroon: return 5
      case .orange: return 6
      case .tan: return 7
      case .gold: return 8
      case .yellow: return 9
      case .green: return 10
      case .brown: return 11
      case .beige: return 12
      case .silver: return 13
      case .gray: return 14
      case .black: return 15
      case .white: return 16
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _driverContactInfo: Rideos_RideHailCommons_ContactInfo? = nil
}

#if swift(>=4.2)

extension Rideos_RideHailCommons_DeprecatedVehicleInfo.VehicleColor: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Rideos_RideHailCommons_DeprecatedVehicleInfo.VehicleColor] = [
    .unknown,
    .blue,
    .purple,
    .pink,
    .red,
    .maroon,
    .orange,
    .tan,
    .gold,
    .yellow,
    .green,
    .brown,
    .beige,
    .silver,
    .gray,
    .black,
    .white,
  ]
}

#endif  // swift(>=4.2)

public struct Rideos_RideHailCommons_DeprecatedTrip {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tripID: String {
    get {return _storage._tripID}
    set {_uniqueStorage()._tripID = newValue}
  }

  public var fleetID: String {
    get {return _storage._fleetID}
    set {_uniqueStorage()._fleetID = newValue}
  }

  public var stage: Rideos_RideHailCommons_DeprecatedTrip.TripStage {
    get {return _storage._stage}
    set {_uniqueStorage()._stage = newValue}
  }

  public var pickupLocation: Rideos_RideHailCommons_StopLocation {
    get {return _storage._pickupLocation ?? Rideos_RideHailCommons_StopLocation()}
    set {_uniqueStorage()._pickupLocation = newValue}
  }
  /// Returns true if `pickupLocation` has been explicitly set.
  public var hasPickupLocation: Bool {return _storage._pickupLocation != nil}
  /// Clears the value of `pickupLocation`. Subsequent reads from it will return its default value.
  public mutating func clearPickupLocation() {_uniqueStorage()._pickupLocation = nil}

  public var dropoffLocation: Rideos_RideHailCommons_StopLocation {
    get {return _storage._dropoffLocation ?? Rideos_RideHailCommons_StopLocation()}
    set {_uniqueStorage()._dropoffLocation = newValue}
  }
  /// Returns true if `dropoffLocation` has been explicitly set.
  public var hasDropoffLocation: Bool {return _storage._dropoffLocation != nil}
  /// Clears the value of `dropoffLocation`. Subsequent reads from it will return its default value.
  public mutating func clearDropoffLocation() {_uniqueStorage()._dropoffLocation = nil}

  /// Empty if not yet assigned
  public var vehicleInfo: Rideos_RideHailCommons_DeprecatedVehicleInfo {
    get {return _storage._vehicleInfo ?? Rideos_RideHailCommons_DeprecatedVehicleInfo()}
    set {_uniqueStorage()._vehicleInfo = newValue}
  }
  /// Returns true if `vehicleInfo` has been explicitly set.
  public var hasVehicleInfo: Bool {return _storage._vehicleInfo != nil}
  /// Clears the value of `vehicleInfo`. Subsequent reads from it will return its default value.
  public mutating func clearVehicleInfo() {_uniqueStorage()._vehicleInfo = nil}

  public var passengerInfo: Rideos_RideHailCommons_PassengerInfo {
    get {return _storage._passengerInfo ?? Rideos_RideHailCommons_PassengerInfo()}
    set {_uniqueStorage()._passengerInfo = newValue}
  }
  /// Returns true if `passengerInfo` has been explicitly set.
  public var hasPassengerInfo: Bool {return _storage._passengerInfo != nil}
  /// Clears the value of `passengerInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPassengerInfo() {_uniqueStorage()._passengerInfo = nil}

  /// Empty if the task is not cancelled
  public var cancelReason: Rideos_RideHailCommons_CancelReason {
    get {return _storage._cancelReason ?? Rideos_RideHailCommons_CancelReason()}
    set {_uniqueStorage()._cancelReason = newValue}
  }
  /// Returns true if `cancelReason` has been explicitly set.
  public var hasCancelReason: Bool {return _storage._cancelReason != nil}
  /// Clears the value of `cancelReason`. Subsequent reads from it will return its default value.
  public mutating func clearCancelReason() {_uniqueStorage()._cancelReason = nil}

  public var replacementTripID: String {
    get {return _storage._replacementTripID}
    set {_uniqueStorage()._replacementTripID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TripStage: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case waitingForAssignment // = 1
    case drivingToPickup // = 2
    case waitingForPickup // = 3
    case drivingToDropoff // = 4
    case completed // = 5
    case cancelled // = 6
    case replaced // = 7
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .waitingForAssignment
      case 2: self = .drivingToPickup
      case 3: self = .waitingForPickup
      case 4: self = .drivingToDropoff
      case 5: self = .completed
      case 6: self = .cancelled
      case 7: self = .replaced
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .waitingForAssignment: return 1
      case .drivingToPickup: return 2
      case .waitingForPickup: return 3
      case .drivingToDropoff: return 4
      case .completed: return 5
      case .cancelled: return 6
      case .replaced: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Rideos_RideHailCommons_DeprecatedTrip.TripStage: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Rideos_RideHailCommons_DeprecatedTrip.TripStage] = [
    .unknown,
    .waitingForAssignment,
    .drivingToPickup,
    .waitingForPickup,
    .drivingToDropoff,
    .completed,
    .cancelled,
    .replaced,
  ]
}

#endif  // swift(>=4.2)

public struct Rideos_RideHailCommons_PassengerInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var passengerID: String = String()

  public var passengerContactInfo: Rideos_RideHailCommons_ContactInfo {
    get {return _passengerContactInfo ?? Rideos_RideHailCommons_ContactInfo()}
    set {_passengerContactInfo = newValue}
  }
  /// Returns true if `passengerContactInfo` has been explicitly set.
  public var hasPassengerContactInfo: Bool {return self._passengerContactInfo != nil}
  /// Clears the value of `passengerContactInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPassengerContactInfo() {self._passengerContactInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _passengerContactInfo: Rideos_RideHailCommons_ContactInfo? = nil
}

public struct Rideos_RideHailCommons_PassengerTripInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var taskID: String {
    get {return _storage._taskID}
    set {_uniqueStorage()._taskID = newValue}
  }

  public var stage: Rideos_RideHailCommons_TaskStage {
    get {return _storage._stage}
    set {_uniqueStorage()._stage = newValue}
  }

  /// empty if not yet assigned
  public var assignedVehicleID: String {
    get {return _storage._assignedVehicleID}
    set {_uniqueStorage()._assignedVehicleID = newValue}
  }

  public var pickupLocation: Rideos_RideHailCommons_TaskLocation {
    get {return _storage._pickupLocation ?? Rideos_RideHailCommons_TaskLocation()}
    set {_uniqueStorage()._pickupLocation = newValue}
  }
  /// Returns true if `pickupLocation` has been explicitly set.
  public var hasPickupLocation: Bool {return _storage._pickupLocation != nil}
  /// Clears the value of `pickupLocation`. Subsequent reads from it will return its default value.
  public mutating func clearPickupLocation() {_uniqueStorage()._pickupLocation = nil}

  public var dropoffLocation: Rideos_RideHailCommons_TaskLocation {
    get {return _storage._dropoffLocation ?? Rideos_RideHailCommons_TaskLocation()}
    set {_uniqueStorage()._dropoffLocation = newValue}
  }
  /// Returns true if `dropoffLocation` has been explicitly set.
  public var hasDropoffLocation: Bool {return _storage._dropoffLocation != nil}
  /// Clears the value of `dropoffLocation`. Subsequent reads from it will return its default value.
  public mutating func clearDropoffLocation() {_uniqueStorage()._dropoffLocation = nil}

  /// Empty if task not yet assigned. May be empty if the vehicle has no driver contact info.
  public var driverContactInfo: Rideos_RideHailCommons_ContactInfo {
    get {return _storage._driverContactInfo ?? Rideos_RideHailCommons_ContactInfo()}
    set {_uniqueStorage()._driverContactInfo = newValue}
  }
  /// Returns true if `driverContactInfo` has been explicitly set.
  public var hasDriverContactInfo: Bool {return _storage._driverContactInfo != nil}
  /// Clears the value of `driverContactInfo`. Subsequent reads from it will return its default value.
  public mutating func clearDriverContactInfo() {_uniqueStorage()._driverContactInfo = nil}

  /// Empty if task not yet assigned. May be empty if Dispatch does not have any info for the vehicle.
  public var vehicleInfo: Rideos_RideHailCommons_DeprecatedVehicleInfo {
    get {return _storage._vehicleInfo ?? Rideos_RideHailCommons_DeprecatedVehicleInfo()}
    set {_uniqueStorage()._vehicleInfo = newValue}
  }
  /// Returns true if `vehicleInfo` has been explicitly set.
  public var hasVehicleInfo: Bool {return _storage._vehicleInfo != nil}
  /// Clears the value of `vehicleInfo`. Subsequent reads from it will return its default value.
  public mutating func clearVehicleInfo() {_uniqueStorage()._vehicleInfo = nil}

  public var fleetID: String {
    get {return _storage._fleetID}
    set {_uniqueStorage()._fleetID = newValue}
  }

  /// Empty if the task is not cancelled
  public var cancelReason: Rideos_RideHailCommons_CancelReason {
    get {return _storage._cancelReason ?? Rideos_RideHailCommons_CancelReason()}
    set {_uniqueStorage()._cancelReason = newValue}
  }
  /// Returns true if `cancelReason` has been explicitly set.
  public var hasCancelReason: Bool {return _storage._cancelReason != nil}
  /// Clears the value of `cancelReason`. Subsequent reads from it will return its default value.
  public mutating func clearCancelReason() {_uniqueStorage()._cancelReason = nil}

  public var replacementTaskID: String {
    get {return _storage._replacementTaskID}
    set {_uniqueStorage()._replacementTaskID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Rideos_RideHailCommons_TaskLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var position: Rideos_Geo_V1_Position {
    get {return _position ?? Rideos_Geo_V1_Position()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var externalStopID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _position: Rideos_Geo_V1_Position? = nil
}

public struct Rideos_RideHailCommons_ActiveTripInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var passengerTripInfo: Rideos_RideHailCommons_PassengerTripInfo {
    get {return _passengerTripInfo ?? Rideos_RideHailCommons_PassengerTripInfo()}
    set {_passengerTripInfo = newValue}
  }
  /// Returns true if `passengerTripInfo` has been explicitly set.
  public var hasPassengerTripInfo: Bool {return self._passengerTripInfo != nil}
  /// Clears the value of `passengerTripInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPassengerTripInfo() {self._passengerTripInfo = nil}

  public var passengerID: String = String()

  public var passengerContactInfo: Rideos_RideHailCommons_ContactInfo {
    get {return _passengerContactInfo ?? Rideos_RideHailCommons_ContactInfo()}
    set {_passengerContactInfo = newValue}
  }
  /// Returns true if `passengerContactInfo` has been explicitly set.
  public var hasPassengerContactInfo: Bool {return self._passengerContactInfo != nil}
  /// Clears the value of `passengerContactInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPassengerContactInfo() {self._passengerContactInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _passengerTripInfo: Rideos_RideHailCommons_PassengerTripInfo? = nil
  fileprivate var _passengerContactInfo: Rideos_RideHailCommons_ContactInfo? = nil
}

public struct Rideos_RideHailCommons_DeprecatedVehicleState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var readyForDispatch: Bool = false

  public var vehiclePlan: Rideos_RideHailCommons_DeprecatedPlan {
    get {return _vehiclePlan ?? Rideos_RideHailCommons_DeprecatedPlan()}
    set {_vehiclePlan = newValue}
  }
  /// Returns true if `vehiclePlan` has been explicitly set.
  public var hasVehiclePlan: Bool {return self._vehiclePlan != nil}
  /// Clears the value of `vehiclePlan`. Subsequent reads from it will return its default value.
  public mutating func clearVehiclePlan() {self._vehiclePlan = nil}

  public var assignedTaskID: [String] = []

  public var lastActiveTimeEpochMs: Int64 = 0

  public var fleetID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _vehiclePlan: Rideos_RideHailCommons_DeprecatedPlan? = nil
}

public struct Rideos_RideHailCommons_VehicleUIState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var state: Rideos_RideHailCommons_DeprecatedVehicleState {
    get {return _storage._state ?? Rideos_RideHailCommons_DeprecatedVehicleState()}
    set {_uniqueStorage()._state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return _storage._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {_uniqueStorage()._state = nil}

  public var position: Rideos_RideHailCommons_VehicleExtendedPosition {
    get {return _storage._position ?? Rideos_RideHailCommons_VehicleExtendedPosition()}
    set {_uniqueStorage()._position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return _storage._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {_uniqueStorage()._position = nil}

  /// The IDs of the resources (e.g. passengers) currently carried by the vehicle.
  public var currentlyCarriedResourceID: [String] {
    get {return _storage._currentlyCarriedResourceID}
    set {_uniqueStorage()._currentlyCarriedResourceID = newValue}
  }

  public var info: Rideos_RideHailCommons_DeprecatedVehicleInfo {
    get {return _storage._info ?? Rideos_RideHailCommons_DeprecatedVehicleInfo()}
    set {_uniqueStorage()._info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  public var hasInfo: Bool {return _storage._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  public mutating func clearInfo() {_uniqueStorage()._info = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Rideos_RideHailCommons_VehicleExtendedPosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The customer-specified ID of the vehicle
  public var vehicleID: String = String()

  /// Time at which the state is valid
  public var timeOfValidity: Rideos_Timestamp_V1_Timestamp {
    get {return _timeOfValidity ?? Rideos_Timestamp_V1_Timestamp()}
    set {_timeOfValidity = newValue}
  }
  /// Returns true if `timeOfValidity` has been explicitly set.
  public var hasTimeOfValidity: Bool {return self._timeOfValidity != nil}
  /// Clears the value of `timeOfValidity`. Subsequent reads from it will return its default value.
  public mutating func clearTimeOfValidity() {self._timeOfValidity = nil}

  /// Position of the vehicle
  public var position: Rideos_Geo_V1_Position {
    get {return _position ?? Rideos_Geo_V1_Position()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var heading: Rideos_Geo_V1_Heading {
    get {return _heading ?? Rideos_Geo_V1_Heading()}
    set {_heading = newValue}
  }
  /// Returns true if `heading` has been explicitly set.
  public var hasHeading: Bool {return self._heading != nil}
  /// Clears the value of `heading`. Subsequent reads from it will return its default value.
  public mutating func clearHeading() {self._heading = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeOfValidity: Rideos_Timestamp_V1_Timestamp? = nil
  fileprivate var _position: Rideos_Geo_V1_Position? = nil
  fileprivate var _heading: Rideos_Geo_V1_Heading? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rideos.ride_hail_commons"

extension Rideos_RideHailCommons_NotReadyForDispatchTaskAction: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEFAULT"),
    1: .same(proto: "CANCEL_ALL"),
    2: .same(proto: "UNASSIGN_OR_CANCEL_ALL"),
    3: .same(proto: "UNASSIGN_OR_KEEP"),
  ]
}

extension Rideos_RideHailCommons_TaskStage: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "WAITING_FOR_ASSIGNMENT"),
    2: .same(proto: "DRIVING_TO_PICKUP"),
    3: .same(proto: "WAITING_FOR_PICKUP"),
    4: .same(proto: "DRIVING_TO_DROPOFF"),
    5: .same(proto: "COMPLETED"),
    6: .same(proto: "CANCELLED"),
    7: .same(proto: "REPLACED"),
  ]
}

extension Rideos_RideHailCommons_ContactInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContactInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "phone_number"),
    3: .standard(proto: "contact_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.phoneNumber) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.contactURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.phoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 2)
    }
    if !self.contactURL.isEmpty {
      try visitor.visitSingularStringField(value: self.contactURL, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_ContactInfo, rhs: Rideos_RideHailCommons_ContactInfo) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.phoneNumber != rhs.phoneNumber {return false}
    if lhs.contactURL != rhs.contactURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_Stop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Stop"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "predefined_stop_id"),
    2: .same(proto: "position"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.type = .predefinedStopID(v)}
      }()
      case 2: try {
        var v: Rideos_Geo_V1_Position?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .position(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .position(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.type {
    case .predefinedStopID?: try {
      guard case .predefinedStopID(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .position?: try {
      guard case .position(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_Stop, rhs: Rideos_RideHailCommons_Stop) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_PredefinedStop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PredefinedStop"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "position"),
    3: .same(proto: "properties"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.properties) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.properties.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.properties, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_PredefinedStop, rhs: Rideos_RideHailCommons_PredefinedStop) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._position != rhs._position {return false}
    if lhs.properties != rhs.properties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_ViolatedConstraints: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ViolatedConstraints"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "violated_avoid_constraint_ids"),
    2: .standard(proto: "violated_operational_constraints"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.violatedAvoidConstraintIds) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.violatedOperationalConstraints) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.violatedAvoidConstraintIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.violatedAvoidConstraintIds, fieldNumber: 1)
    }
    if self.violatedOperationalConstraints != false {
      try visitor.visitSingularBoolField(value: self.violatedOperationalConstraints, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_ViolatedConstraints, rhs: Rideos_RideHailCommons_ViolatedConstraints) -> Bool {
    if lhs.violatedAvoidConstraintIds != rhs.violatedAvoidConstraintIds {return false}
    if lhs.violatedOperationalConstraints != rhs.violatedOperationalConstraints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_RoutingConstraints: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RoutingConstraints"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "blacklist_constraint_ids"),
    2: .standard(proto: "whitelist_constraint_ids"),
    3: .standard(proto: "avoid_constraint_ids"),
    4: .standard(proto: "operational_constraint_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.blacklistConstraintIds) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.whitelistConstraintIds) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.avoidConstraintIds) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.operationalConstraintIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blacklistConstraintIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blacklistConstraintIds, fieldNumber: 1)
    }
    if !self.whitelistConstraintIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.whitelistConstraintIds, fieldNumber: 2)
    }
    if !self.avoidConstraintIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.avoidConstraintIds, fieldNumber: 3)
    }
    if !self.operationalConstraintIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.operationalConstraintIds, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_RoutingConstraints, rhs: Rideos_RideHailCommons_RoutingConstraints) -> Bool {
    if lhs.blacklistConstraintIds != rhs.blacklistConstraintIds {return false}
    if lhs.whitelistConstraintIds != rhs.whitelistConstraintIds {return false}
    if lhs.avoidConstraintIds != rhs.avoidConstraintIds {return false}
    if lhs.operationalConstraintIds != rhs.operationalConstraintIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_Fleet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Fleet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "info"),
    3: .standard(proto: "optimization_settings"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._optimizationSettings) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._optimizationSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_Fleet, rhs: Rideos_RideHailCommons_Fleet) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._info != rhs._info {return false}
    if lhs._optimizationSettings != rhs._optimizationSettings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_FleetOptimizationSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FleetOptimizationSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "force_private_rides"),
    2: .standard(proto: "enable_vehicle_reassignment"),
    6: .standard(proto: "expected_pickup_service_time_duration"),
    3: .standard(proto: "expected_dropoff_service_time_duration"),
    4: .standard(proto: "required_pickup_time_window"),
    8: .standard(proto: "required_dropoff_time_window"),
    5: .standard(proto: "vehicle_reassignment_configuration"),
    7: .standard(proto: "optimization_profile"),
  ]

  fileprivate class _StorageClass {
    var _forcePrivateRides: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _enableVehicleReassignment: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _expectedPickupServiceTimeDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _expectedDropoffServiceTimeDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _requiredPickupTimeWindow: Rideos_RideHailCommons_RelativeTimeWindow? = nil
    var _requiredDropoffTimeWindow: Rideos_RideHailCommons_RelativeTimeWindow? = nil
    var _vehicleReassignmentConfiguration: Rideos_FleetPlannerCommons_VehicleReassignmentConfiguration? = nil
    var _optimizationProfile: Rideos_RideHailCommons_OptimizationProfileWrapper? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _forcePrivateRides = source._forcePrivateRides
      _enableVehicleReassignment = source._enableVehicleReassignment
      _expectedPickupServiceTimeDuration = source._expectedPickupServiceTimeDuration
      _expectedDropoffServiceTimeDuration = source._expectedDropoffServiceTimeDuration
      _requiredPickupTimeWindow = source._requiredPickupTimeWindow
      _requiredDropoffTimeWindow = source._requiredDropoffTimeWindow
      _vehicleReassignmentConfiguration = source._vehicleReassignmentConfiguration
      _optimizationProfile = source._optimizationProfile
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._forcePrivateRides) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._enableVehicleReassignment) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._expectedDropoffServiceTimeDuration) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._requiredPickupTimeWindow) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._vehicleReassignmentConfiguration) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._expectedPickupServiceTimeDuration) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._optimizationProfile) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._requiredDropoffTimeWindow) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._forcePrivateRides {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._enableVehicleReassignment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._expectedDropoffServiceTimeDuration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._requiredPickupTimeWindow {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._vehicleReassignmentConfiguration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._expectedPickupServiceTimeDuration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._optimizationProfile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._requiredDropoffTimeWindow {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_FleetOptimizationSettings, rhs: Rideos_RideHailCommons_FleetOptimizationSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._forcePrivateRides != rhs_storage._forcePrivateRides {return false}
        if _storage._enableVehicleReassignment != rhs_storage._enableVehicleReassignment {return false}
        if _storage._expectedPickupServiceTimeDuration != rhs_storage._expectedPickupServiceTimeDuration {return false}
        if _storage._expectedDropoffServiceTimeDuration != rhs_storage._expectedDropoffServiceTimeDuration {return false}
        if _storage._requiredPickupTimeWindow != rhs_storage._requiredPickupTimeWindow {return false}
        if _storage._requiredDropoffTimeWindow != rhs_storage._requiredDropoffTimeWindow {return false}
        if _storage._vehicleReassignmentConfiguration != rhs_storage._vehicleReassignmentConfiguration {return false}
        if _storage._optimizationProfile != rhs_storage._optimizationProfile {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_OptimizationProfileWrapper: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OptimizationProfileWrapper"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    7: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 7: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .default {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_OptimizationProfileWrapper, rhs: Rideos_RideHailCommons_OptimizationProfileWrapper) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_RelativeTimeWindow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RelativeTimeWindow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "earliest_relative_time"),
    2: .standard(proto: "latest_relative_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._earliestRelativeTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._latestRelativeTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._earliestRelativeTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._latestRelativeTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_RelativeTimeWindow, rhs: Rideos_RideHailCommons_RelativeTimeWindow) -> Bool {
    if lhs._earliestRelativeTime != rhs._earliestRelativeTime {return false}
    if lhs._latestRelativeTime != rhs._latestRelativeTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_FleetInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FleetInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "display_name"),
    2: .same(proto: "properties"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.properties) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 1)
    }
    if !self.properties.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.properties, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_FleetInfo, rhs: Rideos_RideHailCommons_FleetInfo) -> Bool {
    if lhs.displayName != rhs.displayName {return false}
    if lhs.properties != rhs.properties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_FleetInfoUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FleetInfoUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "display_name"),
    2: .same(proto: "properties"),
    3: .standard(proto: "optimization_settings"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._displayName) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._properties) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._optimizationSettings) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._displayName {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._properties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._optimizationSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_FleetInfoUpdate, rhs: Rideos_RideHailCommons_FleetInfoUpdate) -> Bool {
    if lhs._displayName != rhs._displayName {return false}
    if lhs._properties != rhs._properties {return false}
    if lhs._optimizationSettings != rhs._optimizationSettings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_Vehicle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Vehicle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "fleet_id"),
    3: .same(proto: "definition"),
    4: .same(proto: "info"),
    5: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fleetID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._definition) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._state) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.fleetID.isEmpty {
      try visitor.visitSingularStringField(value: self.fleetID, fieldNumber: 2)
    }
    if let v = self._definition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._state {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_Vehicle, rhs: Rideos_RideHailCommons_Vehicle) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.fleetID != rhs.fleetID {return false}
    if lhs._definition != rhs._definition {return false}
    if lhs._info != rhs._info {return false}
    if lhs._state != rhs._state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_VehicleState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VehicleState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .same(proto: "heading"),
    3: .standard(proto: "last_active_time"),
    4: .same(proto: "plan"),
    5: .same(proto: "readiness"),
    6: .standard(proto: "is_reachable"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._heading) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._lastActiveTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._plan) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.readiness) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isReachable) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._heading {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._lastActiveTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._plan {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.readiness != false {
      try visitor.visitSingularBoolField(value: self.readiness, fieldNumber: 5)
    }
    if self.isReachable != false {
      try visitor.visitSingularBoolField(value: self.isReachable, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_VehicleState, rhs: Rideos_RideHailCommons_VehicleState) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs._heading != rhs._heading {return false}
    if lhs._lastActiveTime != rhs._lastActiveTime {return false}
    if lhs._plan != rhs._plan {return false}
    if lhs.readiness != rhs.readiness {return false}
    if lhs.isReachable != rhs.isReachable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_VehicleState.Plan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailCommons_VehicleState.protoMessageName + ".Plan"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "step"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.step) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.step.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.step, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_VehicleState.Plan, rhs: Rideos_RideHailCommons_VehicleState.Plan) -> Bool {
    if lhs.step != rhs.step {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_VehicleState.Step: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailCommons_VehicleState.protoMessageName + ".Step"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "trip_id"),
    4: .same(proto: "position"),
    5: .standard(proto: "drive_to_location"),
    6: .standard(proto: "pickup_rider"),
    7: .standard(proto: "dropoff_rider"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tripID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 5: try {
        var v: Rideos_RideHailCommons_VehicleState.Step.DriveToLocation?
        if let current = self.vehicleAction {
          try decoder.handleConflictingOneOf()
          if case .driveToLocation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.vehicleAction = .driveToLocation(v)}
      }()
      case 6: try {
        var v: Rideos_RideHailCommons_VehicleState.Step.PickupRider?
        if let current = self.vehicleAction {
          try decoder.handleConflictingOneOf()
          if case .pickupRider(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.vehicleAction = .pickupRider(v)}
      }()
      case 7: try {
        var v: Rideos_RideHailCommons_VehicleState.Step.DropoffRider?
        if let current = self.vehicleAction {
          try decoder.handleConflictingOneOf()
          if case .dropoffRider(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.vehicleAction = .dropoffRider(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.tripID.isEmpty {
      try visitor.visitSingularStringField(value: self.tripID, fieldNumber: 2)
    }
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.vehicleAction {
    case .driveToLocation?: try {
      guard case .driveToLocation(let v)? = self.vehicleAction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .pickupRider?: try {
      guard case .pickupRider(let v)? = self.vehicleAction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .dropoffRider?: try {
      guard case .dropoffRider(let v)? = self.vehicleAction else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_VehicleState.Step, rhs: Rideos_RideHailCommons_VehicleState.Step) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.tripID != rhs.tripID {return false}
    if lhs._position != rhs._position {return false}
    if lhs.vehicleAction != rhs.vehicleAction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_VehicleState.Step.RouteLeg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailCommons_VehicleState.Step.protoMessageName + ".RouteLeg"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "polyline"),
    2: .standard(proto: "travel_time_in_seconds"),
    3: .standard(proto: "distance_in_meters"),
    4: .same(proto: "source"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.polyline) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.travelTimeInSeconds) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.distanceInMeters) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.source) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.polyline.isEmpty {
      try visitor.visitSingularStringField(value: self.polyline, fieldNumber: 1)
    }
    if self.travelTimeInSeconds != 0 {
      try visitor.visitSingularDoubleField(value: self.travelTimeInSeconds, fieldNumber: 2)
    }
    if self.distanceInMeters != 0 {
      try visitor.visitSingularDoubleField(value: self.distanceInMeters, fieldNumber: 3)
    }
    if self.source != .vehicle {
      try visitor.visitSingularEnumField(value: self.source, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_VehicleState.Step.RouteLeg, rhs: Rideos_RideHailCommons_VehicleState.Step.RouteLeg) -> Bool {
    if lhs.polyline != rhs.polyline {return false}
    if lhs.travelTimeInSeconds != rhs.travelTimeInSeconds {return false}
    if lhs.distanceInMeters != rhs.distanceInMeters {return false}
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_VehicleState.Step.RouteLeg.Source: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VEHICLE"),
    1: .same(proto: "RIDEOS_DEFAULT"),
  ]
}

extension Rideos_RideHailCommons_VehicleState.Step.DriveToLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailCommons_VehicleState.Step.protoMessageName + ".DriveToLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "route"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._route) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._route {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_VehicleState.Step.DriveToLocation, rhs: Rideos_RideHailCommons_VehicleState.Step.DriveToLocation) -> Bool {
    if lhs._route != rhs._route {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_VehicleState.Step.PickupRider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailCommons_VehicleState.Step.protoMessageName + ".PickupRider"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rider_count"),
    2: .standard(proto: "rider_info"),
    3: .standard(proto: "expected_remaining_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.riderCount) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._riderInfo) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._expectedRemainingTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.riderCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.riderCount, fieldNumber: 1)
    }
    if let v = self._riderInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._expectedRemainingTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_VehicleState.Step.PickupRider, rhs: Rideos_RideHailCommons_VehicleState.Step.PickupRider) -> Bool {
    if lhs.riderCount != rhs.riderCount {return false}
    if lhs._riderInfo != rhs._riderInfo {return false}
    if lhs._expectedRemainingTime != rhs._expectedRemainingTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_VehicleState.Step.DropoffRider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailCommons_VehicleState.Step.protoMessageName + ".DropoffRider"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rider_count"),
    2: .standard(proto: "rider_info"),
    3: .standard(proto: "expected_remaining_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.riderCount) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._riderInfo) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._expectedRemainingTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.riderCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.riderCount, fieldNumber: 1)
    }
    if let v = self._riderInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._expectedRemainingTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_VehicleState.Step.DropoffRider, rhs: Rideos_RideHailCommons_VehicleState.Step.DropoffRider) -> Bool {
    if lhs.riderCount != rhs.riderCount {return false}
    if lhs._riderInfo != rhs._riderInfo {return false}
    if lhs._expectedRemainingTime != rhs._expectedRemainingTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_VehicleDefinition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VehicleDefinition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rider_capacity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.riderCapacity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.riderCapacity != 0 {
      try visitor.visitSingularUInt32Field(value: self.riderCapacity, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_VehicleDefinition, rhs: Rideos_RideHailCommons_VehicleDefinition) -> Bool {
    if lhs.riderCapacity != rhs.riderCapacity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_VehicleInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VehicleInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "driver_info"),
    2: .same(proto: "properties"),
    3: .standard(proto: "license_plate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._driverInfo) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.properties) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.licensePlate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._driverInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.properties.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.properties, fieldNumber: 2)
    }
    if !self.licensePlate.isEmpty {
      try visitor.visitSingularStringField(value: self.licensePlate, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_VehicleInfo, rhs: Rideos_RideHailCommons_VehicleInfo) -> Bool {
    if lhs._driverInfo != rhs._driverInfo {return false}
    if lhs.properties != rhs.properties {return false}
    if lhs.licensePlate != rhs.licensePlate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_VehicleInfoUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VehicleInfoUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "license_plate"),
    2: .standard(proto: "driver_info"),
    3: .same(proto: "properties"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._licensePlate) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._driverInfo) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._properties) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._licensePlate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._driverInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._properties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_VehicleInfoUpdate, rhs: Rideos_RideHailCommons_VehicleInfoUpdate) -> Bool {
    if lhs._licensePlate != rhs._licensePlate {return false}
    if lhs._driverInfo != rhs._driverInfo {return false}
    if lhs._properties != rhs._properties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_PropertyUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PropertyUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "properties"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.properties) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.properties.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.properties, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_PropertyUpdate, rhs: Rideos_RideHailCommons_PropertyUpdate) -> Bool {
    if lhs.properties != rhs.properties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_DriverInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DriverInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contact_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._contactInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._contactInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_DriverInfo, rhs: Rideos_RideHailCommons_DriverInfo) -> Bool {
    if lhs._contactInfo != rhs._contactInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_AcceptingRides: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcceptingRides"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_accepting_rides"),
    2: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isAcceptingRides) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isAcceptingRides != false {
      try visitor.visitSingularBoolField(value: self.isAcceptingRides, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_AcceptingRides, rhs: Rideos_RideHailCommons_AcceptingRides) -> Bool {
    if lhs.isAcceptingRides != rhs.isAcceptingRides {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_Trip: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Trip"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "fleet_id"),
    3: .same(proto: "definition"),
    4: .same(proto: "info"),
    5: .same(proto: "state"),
    6: .standard(proto: "creation_time"),
    7: .standard(proto: "termination_time"),
    8: .standard(proto: "requestor_id"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _fleetID: String = String()
    var _definition: Rideos_RideHailCommons_TripDefinition? = nil
    var _info: Rideos_RideHailCommons_TripInfo? = nil
    var _state: Rideos_RideHailCommons_TripState? = nil
    var _creationTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _terminationTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _requestorID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _fleetID = source._fleetID
      _definition = source._definition
      _info = source._info
      _state = source._state
      _creationTime = source._creationTime
      _terminationTime = source._terminationTime
      _requestorID = source._requestorID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._fleetID) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._definition) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._info) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._state) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._creationTime) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._terminationTime) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._requestorID) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._fleetID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fleetID, fieldNumber: 2)
      }
      if let v = _storage._definition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._info {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._state {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._creationTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._terminationTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._requestorID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._requestorID, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_Trip, rhs: Rideos_RideHailCommons_Trip) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._fleetID != rhs_storage._fleetID {return false}
        if _storage._definition != rhs_storage._definition {return false}
        if _storage._info != rhs_storage._info {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._creationTime != rhs_storage._creationTime {return false}
        if _storage._terminationTime != rhs_storage._terminationTime {return false}
        if _storage._requestorID != rhs_storage._requestorID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_TripDefinition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TripDefinition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pickup_dropoff"),
    2: .same(proto: "relocate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Rideos_RideHailCommons_PickupDropoff?
        if let current = self.tripType {
          try decoder.handleConflictingOneOf()
          if case .pickupDropoff(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.tripType = .pickupDropoff(v)}
      }()
      case 2: try {
        var v: Rideos_RideHailCommons_Relocate?
        if let current = self.tripType {
          try decoder.handleConflictingOneOf()
          if case .relocate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.tripType = .relocate(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.tripType {
    case .pickupDropoff?: try {
      guard case .pickupDropoff(let v)? = self.tripType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .relocate?: try {
      guard case .relocate(let v)? = self.tripType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_TripDefinition, rhs: Rideos_RideHailCommons_TripDefinition) -> Bool {
    if lhs.tripType != rhs.tripType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_Relocate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Relocate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stop"),
    2: .same(proto: "reason"),
    3: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._stop) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.reason) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._stop {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.reason != .unknown {
      try visitor.visitSingularEnumField(value: self.reason, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_Relocate, rhs: Rideos_RideHailCommons_Relocate) -> Bool {
    if lhs._stop != rhs._stop {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_Relocate.RelocateReason: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "REFUEL"),
    2: .same(proto: "REPAIR"),
    3: .same(proto: "CUSTOM"),
  ]
}

extension Rideos_RideHailCommons_PickupDropoff: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PickupDropoff"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pickup"),
    2: .same(proto: "dropoff"),
    3: .standard(proto: "rider_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pickup) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._dropoff) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.riderCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._pickup {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._dropoff {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.riderCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.riderCount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_PickupDropoff, rhs: Rideos_RideHailCommons_PickupDropoff) -> Bool {
    if lhs._pickup != rhs._pickup {return false}
    if lhs._dropoff != rhs._dropoff {return false}
    if lhs.riderCount != rhs.riderCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_TripInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TripInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rider_info"),
    2: .same(proto: "properties"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._riderInfo) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.properties) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._riderInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.properties.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.properties, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_TripInfo, rhs: Rideos_RideHailCommons_TripInfo) -> Bool {
    if lhs._riderInfo != rhs._riderInfo {return false}
    if lhs.properties != rhs.properties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_RiderInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RiderInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contact_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._contactInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._contactInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_RiderInfo, rhs: Rideos_RideHailCommons_RiderInfo) -> Bool {
    if lhs._contactInfo != rhs._contactInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_TripState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TripState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "waiting_for_assignment"),
    2: .standard(proto: "driving_to_pickup"),
    3: .standard(proto: "waiting_for_pickup"),
    4: .standard(proto: "driving_to_dropoff"),
    10: .standard(proto: "waiting_for_dropoff"),
    5: .same(proto: "completed"),
    6: .same(proto: "canceled"),
    7: .same(proto: "replaced"),
    8: .standard(proto: "last_assigned_timestamp"),
    9: .standard(proto: "step_completion_state"),
  ]

  fileprivate class _StorageClass {
    var _tripState: Rideos_RideHailCommons_TripState.OneOf_TripState?
    var _lastAssignedTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _stepCompletionState: Rideos_RideHailCommons_StepCompletionState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _tripState = source._tripState
      _lastAssignedTimestamp = source._lastAssignedTimestamp
      _stepCompletionState = source._stepCompletionState
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try {
          var v: Rideos_RideHailCommons_TripState.WaitingForAssignment?
          if let current = _storage._tripState {
            try decoder.handleConflictingOneOf()
            if case .waitingForAssignment(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._tripState = .waitingForAssignment(v)}
        }()
        case 2: try {
          var v: Rideos_RideHailCommons_TripState.DrivingToPickup?
          if let current = _storage._tripState {
            try decoder.handleConflictingOneOf()
            if case .drivingToPickup(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._tripState = .drivingToPickup(v)}
        }()
        case 3: try {
          var v: Rideos_RideHailCommons_TripState.WaitingForPickup?
          if let current = _storage._tripState {
            try decoder.handleConflictingOneOf()
            if case .waitingForPickup(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._tripState = .waitingForPickup(v)}
        }()
        case 4: try {
          var v: Rideos_RideHailCommons_TripState.DrivingToDropoff?
          if let current = _storage._tripState {
            try decoder.handleConflictingOneOf()
            if case .drivingToDropoff(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._tripState = .drivingToDropoff(v)}
        }()
        case 5: try {
          var v: Rideos_RideHailCommons_TripState.Completed?
          if let current = _storage._tripState {
            try decoder.handleConflictingOneOf()
            if case .completed(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._tripState = .completed(v)}
        }()
        case 6: try {
          var v: Rideos_RideHailCommons_TripState.Canceled?
          if let current = _storage._tripState {
            try decoder.handleConflictingOneOf()
            if case .canceled(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._tripState = .canceled(v)}
        }()
        case 7: try {
          var v: Rideos_RideHailCommons_TripState.Replaced?
          if let current = _storage._tripState {
            try decoder.handleConflictingOneOf()
            if case .replaced(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._tripState = .replaced(v)}
        }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._lastAssignedTimestamp) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._stepCompletionState) }()
        case 10: try {
          var v: Rideos_RideHailCommons_TripState.WaitingForDropoff?
          if let current = _storage._tripState {
            try decoder.handleConflictingOneOf()
            if case .waitingForDropoff(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._tripState = .waitingForDropoff(v)}
        }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch _storage._tripState {
      case .waitingForAssignment?: try {
        guard case .waitingForAssignment(let v)? = _storage._tripState else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }()
      case .drivingToPickup?: try {
        guard case .drivingToPickup(let v)? = _storage._tripState else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }()
      case .waitingForPickup?: try {
        guard case .waitingForPickup(let v)? = _storage._tripState else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }()
      case .drivingToDropoff?: try {
        guard case .drivingToDropoff(let v)? = _storage._tripState else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }()
      case .completed?: try {
        guard case .completed(let v)? = _storage._tripState else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }()
      case .canceled?: try {
        guard case .canceled(let v)? = _storage._tripState else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }()
      case .replaced?: try {
        guard case .replaced(let v)? = _storage._tripState else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }()
      default: break
      }
      if let v = _storage._lastAssignedTimestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._stepCompletionState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if case .waitingForDropoff(let v)? = _storage._tripState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_TripState, rhs: Rideos_RideHailCommons_TripState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._tripState != rhs_storage._tripState {return false}
        if _storage._lastAssignedTimestamp != rhs_storage._lastAssignedTimestamp {return false}
        if _storage._stepCompletionState != rhs_storage._stepCompletionState {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_TripState.CancelSource: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "RIDER"),
    2: .same(proto: "DRIVER"),
    3: .same(proto: "OPERATIONS"),
    4: .same(proto: "INTERNAL"),
  ]
}

extension Rideos_RideHailCommons_TripState.WaitingForAssignment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailCommons_TripState.protoMessageName + ".WaitingForAssignment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unresolvable_reason"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.unresolvableReason) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.unresolvableReason.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unresolvableReason, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_TripState.WaitingForAssignment, rhs: Rideos_RideHailCommons_TripState.WaitingForAssignment) -> Bool {
    if lhs.unresolvableReason != rhs.unresolvableReason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_TripState.DrivingToPickup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailCommons_TripState.protoMessageName + ".DrivingToPickup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "assigned_vehicle"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._assignedVehicle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._assignedVehicle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_TripState.DrivingToPickup, rhs: Rideos_RideHailCommons_TripState.DrivingToPickup) -> Bool {
    if lhs._assignedVehicle != rhs._assignedVehicle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_TripState.WaitingForPickup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailCommons_TripState.protoMessageName + ".WaitingForPickup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "assigned_vehicle"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._assignedVehicle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._assignedVehicle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_TripState.WaitingForPickup, rhs: Rideos_RideHailCommons_TripState.WaitingForPickup) -> Bool {
    if lhs._assignedVehicle != rhs._assignedVehicle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_TripState.DrivingToDropoff: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailCommons_TripState.protoMessageName + ".DrivingToDropoff"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "assigned_vehicle"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._assignedVehicle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._assignedVehicle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_TripState.DrivingToDropoff, rhs: Rideos_RideHailCommons_TripState.DrivingToDropoff) -> Bool {
    if lhs._assignedVehicle != rhs._assignedVehicle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_TripState.WaitingForDropoff: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailCommons_TripState.protoMessageName + ".WaitingForDropoff"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "assigned_vehicle"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._assignedVehicle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._assignedVehicle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_TripState.WaitingForDropoff, rhs: Rideos_RideHailCommons_TripState.WaitingForDropoff) -> Bool {
    if lhs._assignedVehicle != rhs._assignedVehicle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_TripState.Completed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailCommons_TripState.protoMessageName + ".Completed"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    2: .same(proto: "timestamp"),
    3: .standard(proto: "vehicle_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._vehicleInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._vehicleInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_TripState.Completed, rhs: Rideos_RideHailCommons_TripState.Completed) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._vehicleInfo != rhs._vehicleInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_TripState.Canceled: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailCommons_TripState.protoMessageName + ".Canceled"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "source"),
    3: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.source) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
    }
    if self.source != .unknown {
      try visitor.visitSingularEnumField(value: self.source, fieldNumber: 2)
    }
    if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_TripState.Canceled, rhs: Rideos_RideHailCommons_TripState.Canceled) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.source != rhs.source {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_TripState.Replaced: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailCommons_TripState.protoMessageName + ".Replaced"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "replacement_trip_id"),
    2: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.replacementTripID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.replacementTripID.isEmpty {
      try visitor.visitSingularStringField(value: self.replacementTripID, fieldNumber: 1)
    }
    if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_TripState.Replaced, rhs: Rideos_RideHailCommons_TripState.Replaced) -> Bool {
    if lhs.replacementTripID != rhs.replacementTripID {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_StepCompletionState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StepCompletionState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "driving_to_pickup"),
    2: .standard(proto: "waiting_for_pickup"),
    3: .standard(proto: "driving_to_dropoff"),
    4: .standard(proto: "waiting_for_dropoff"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._drivingToPickup) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._waitingForPickup) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._drivingToDropoff) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._waitingForDropoff) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._drivingToPickup {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._waitingForPickup {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._drivingToDropoff {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._waitingForDropoff {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_StepCompletionState, rhs: Rideos_RideHailCommons_StepCompletionState) -> Bool {
    if lhs._drivingToPickup != rhs._drivingToPickup {return false}
    if lhs._waitingForPickup != rhs._waitingForPickup {return false}
    if lhs._drivingToDropoff != rhs._drivingToDropoff {return false}
    if lhs._waitingForDropoff != rhs._waitingForDropoff {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_StepState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StepState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_of_completion"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timeOfCompletion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeOfCompletion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_StepState, rhs: Rideos_RideHailCommons_StepState) -> Bool {
    if lhs._timeOfCompletion != rhs._timeOfCompletion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_AssignedVehicle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssignedVehicle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "info"),
    3: .standard(proto: "plan_through_trip_end"),
    4: .same(proto: "position"),
    5: .same(proto: "heading"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._planThroughTripEnd) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._heading) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._planThroughTripEnd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._heading {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_AssignedVehicle, rhs: Rideos_RideHailCommons_AssignedVehicle) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._info != rhs._info {return false}
    if lhs._planThroughTripEnd != rhs._planThroughTripEnd {return false}
    if lhs._position != rhs._position {return false}
    if lhs._heading != rhs._heading {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_AvailableVehicle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AvailableVehicle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fleet_control_vehicle_id"),
    2: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fleetControlVehicleID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fleetControlVehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.fleetControlVehicleID, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_AvailableVehicle, rhs: Rideos_RideHailCommons_AvailableVehicle) -> Bool {
    if lhs.fleetControlVehicleID != rhs.fleetControlVehicleID {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_CancelReason: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CancelReason"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
    2: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.source) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.source != .unknown {
      try visitor.visitSingularEnumField(value: self.source, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_CancelReason, rhs: Rideos_RideHailCommons_CancelReason) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_CancelReason.Source: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "REQUESTOR"),
    2: .same(proto: "VEHICLE"),
    3: .same(proto: "INTERNAL"),
  ]
}

extension Rideos_RideHailCommons_VehiclePreview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VehiclePreview"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "position_and_heading"),
    2: .standard(proto: "preview_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._positionAndHeading) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.previewID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._positionAndHeading {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.previewID.isEmpty {
      try visitor.visitSingularStringField(value: self.previewID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_VehiclePreview, rhs: Rideos_RideHailCommons_VehiclePreview) -> Bool {
    if lhs._positionAndHeading != rhs._positionAndHeading {return false}
    if lhs.previewID != rhs.previewID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_VehicleRouteLeg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VehicleRouteLeg"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "polyline"),
    2: .standard(proto: "travel_time"),
    3: .standard(proto: "distance_in_meters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.polyline) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._travelTime) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.distanceInMeters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.polyline.isEmpty {
      try visitor.visitSingularStringField(value: self.polyline, fieldNumber: 1)
    }
    if let v = self._travelTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.distanceInMeters != 0 {
      try visitor.visitSingularDoubleField(value: self.distanceInMeters, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_VehicleRouteLeg, rhs: Rideos_RideHailCommons_VehicleRouteLeg) -> Bool {
    if lhs.polyline != rhs.polyline {return false}
    if lhs._travelTime != rhs._travelTime {return false}
    if lhs.distanceInMeters != rhs.distanceInMeters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_VehicleFilter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VehicleFilter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.type = .vehicleID(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .vehicleID(let v)? = self.type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_VehicleFilter, rhs: Rideos_RideHailCommons_VehicleFilter) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_OptimizationParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OptimizationParameters"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dispatch_timeout"),
    2: .standard(proto: "vehicle_filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._dispatchTimeout) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._vehicleFilter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._dispatchTimeout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._vehicleFilter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_OptimizationParameters, rhs: Rideos_RideHailCommons_OptimizationParameters) -> Bool {
    if lhs._dispatchTimeout != rhs._dispatchTimeout {return false}
    if lhs._vehicleFilter != rhs._vehicleFilter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_PassengerTaskRequestInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PassengerTaskRequestInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fleet_id"),
    2: .standard(proto: "pickup_location"),
    3: .standard(proto: "dropoff_location"),
    4: .standard(proto: "num_passengers"),
    5: .standard(proto: "optimization_parameters"),
    6: .same(proto: "pickup"),
    7: .same(proto: "dropoff"),
  ]

  fileprivate class _StorageClass {
    var _fleetID: String = String()
    var _pickupLocation: Rideos_RideHailCommons_TaskLocation? = nil
    var _dropoffLocation: Rideos_RideHailCommons_TaskLocation? = nil
    var _numPassengers: UInt32 = 0
    var _optimizationParameters: Rideos_RideHailCommons_OptimizationParameters? = nil
    var _pickup: Rideos_RideHailCommons_StopLocation? = nil
    var _dropoff: Rideos_RideHailCommons_StopLocation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _fleetID = source._fleetID
      _pickupLocation = source._pickupLocation
      _dropoffLocation = source._dropoffLocation
      _numPassengers = source._numPassengers
      _optimizationParameters = source._optimizationParameters
      _pickup = source._pickup
      _dropoff = source._dropoff
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._fleetID) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._pickupLocation) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._dropoffLocation) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._numPassengers) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._optimizationParameters) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._pickup) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._dropoff) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._fleetID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fleetID, fieldNumber: 1)
      }
      if let v = _storage._pickupLocation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._dropoffLocation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._numPassengers != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._numPassengers, fieldNumber: 4)
      }
      if let v = _storage._optimizationParameters {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._pickup {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._dropoff {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_PassengerTaskRequestInfo, rhs: Rideos_RideHailCommons_PassengerTaskRequestInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._fleetID != rhs_storage._fleetID {return false}
        if _storage._pickupLocation != rhs_storage._pickupLocation {return false}
        if _storage._dropoffLocation != rhs_storage._dropoffLocation {return false}
        if _storage._numPassengers != rhs_storage._numPassengers {return false}
        if _storage._optimizationParameters != rhs_storage._optimizationParameters {return false}
        if _storage._pickup != rhs_storage._pickup {return false}
        if _storage._dropoff != rhs_storage._dropoff {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_Pudol: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Pudol"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pudol_id"),
    2: .same(proto: "position"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.pudolID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pudolID.isEmpty {
      try visitor.visitSingularStringField(value: self.pudolID, fieldNumber: 1)
    }
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_Pudol, rhs: Rideos_RideHailCommons_Pudol) -> Bool {
    if lhs.pudolID != rhs.pudolID {return false}
    if lhs._position != rhs._position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_StopLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StopLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .standard(proto: "external_stop_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.externalStopID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.externalStopID.isEmpty {
      try visitor.visitSingularStringField(value: self.externalStopID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_StopLocation, rhs: Rideos_RideHailCommons_StopLocation) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs.externalStopID != rhs.externalStopID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_DeprecatedVehicle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeprecatedVehicle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    2: .standard(proto: "fleet_id"),
    3: .standard(proto: "current_trip_id"),
    4: .standard(proto: "current_position_and_heading"),
    5: .standard(proto: "last_active_time_epoch_ms"),
    6: .standard(proto: "vehicle_plan"),
    8: .standard(proto: "vehicle_info"),
  ]

  fileprivate class _StorageClass {
    var _vehicleID: String = String()
    var _fleetID: String = String()
    var _currentTripID: [String] = []
    var _currentPositionAndHeading: Rideos_Geo_V1_PositionAndHeading? = nil
    var _lastActiveTimeEpochMs: Int64 = 0
    var _vehiclePlan: Rideos_RideHailCommons_DeprecatedPlan? = nil
    var _vehicleInfo: Rideos_RideHailCommons_DeprecatedVehicleInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _vehicleID = source._vehicleID
      _fleetID = source._fleetID
      _currentTripID = source._currentTripID
      _currentPositionAndHeading = source._currentPositionAndHeading
      _lastActiveTimeEpochMs = source._lastActiveTimeEpochMs
      _vehiclePlan = source._vehiclePlan
      _vehicleInfo = source._vehicleInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._vehicleID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._fleetID) }()
        case 3: try { try decoder.decodeRepeatedStringField(value: &_storage._currentTripID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._currentPositionAndHeading) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._lastActiveTimeEpochMs) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._vehiclePlan) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._vehicleInfo) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._vehicleID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._vehicleID, fieldNumber: 1)
      }
      if !_storage._fleetID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fleetID, fieldNumber: 2)
      }
      if !_storage._currentTripID.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._currentTripID, fieldNumber: 3)
      }
      if let v = _storage._currentPositionAndHeading {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._lastActiveTimeEpochMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastActiveTimeEpochMs, fieldNumber: 5)
      }
      if let v = _storage._vehiclePlan {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._vehicleInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_DeprecatedVehicle, rhs: Rideos_RideHailCommons_DeprecatedVehicle) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._vehicleID != rhs_storage._vehicleID {return false}
        if _storage._fleetID != rhs_storage._fleetID {return false}
        if _storage._currentTripID != rhs_storage._currentTripID {return false}
        if _storage._currentPositionAndHeading != rhs_storage._currentPositionAndHeading {return false}
        if _storage._lastActiveTimeEpochMs != rhs_storage._lastActiveTimeEpochMs {return false}
        if _storage._vehiclePlan != rhs_storage._vehiclePlan {return false}
        if _storage._vehicleInfo != rhs_storage._vehicleInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_Waypoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Waypoint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "task_id"),
    2: .standard(proto: "step_id"),
    3: .same(proto: "step"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.taskID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.stepID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._step) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.taskID.isEmpty {
      try visitor.visitSingularStringField(value: self.taskID, fieldNumber: 1)
    }
    if !self.stepID.isEmpty {
      try visitor.visitSingularStringField(value: self.stepID, fieldNumber: 2)
    }
    if let v = self._step {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_Waypoint, rhs: Rideos_RideHailCommons_Waypoint) -> Bool {
    if lhs.taskID != rhs.taskID {return false}
    if lhs.stepID != rhs.stepID {return false}
    if lhs._step != rhs._step {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_Step: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Step"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "location"),
    3: .same(proto: "resource"),
    4: .same(proto: "action"),
    5: .standard(proto: "trip_location"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._location) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._resource) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._tripLocation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._location {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._resource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.action != .unknown {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 4)
    }
    if let v = self._tripLocation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_Step, rhs: Rideos_RideHailCommons_Step) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._location != rhs._location {return false}
    if lhs._resource != rhs._resource {return false}
    if lhs.action != rhs.action {return false}
    if lhs._tripLocation != rhs._tripLocation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_Step.Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "DRIVE_TO_PICKUP"),
    2: .same(proto: "LOAD_RESOURCE"),
    3: .same(proto: "DRIVE_TO_DROPOFF"),
    4: .same(proto: "RELOCATE_DRIVE"),
  ]
}

extension Rideos_RideHailCommons_Resource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Resource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "resource_id"),
    2: .same(proto: "passengers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.resourceID) }()
      case 2: try {
        var v: Rideos_RideHailCommons_Resource.Passengers?
        if let current = self.resourceType {
          try decoder.handleConflictingOneOf()
          if case .passengers(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.resourceType = .passengers(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.resourceID.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceID, fieldNumber: 1)
    }
    if case .passengers(let v)? = self.resourceType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_Resource, rhs: Rideos_RideHailCommons_Resource) -> Bool {
    if lhs.resourceID != rhs.resourceID {return false}
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_Resource.Passengers: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailCommons_Resource.protoMessageName + ".Passengers"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_passengers"),
    2: .standard(proto: "requestor_contact_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.numPassengers) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._requestorContactInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numPassengers != 0 {
      try visitor.visitSingularInt32Field(value: self.numPassengers, fieldNumber: 1)
    }
    if let v = self._requestorContactInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_Resource.Passengers, rhs: Rideos_RideHailCommons_Resource.Passengers) -> Bool {
    if lhs.numPassengers != rhs.numPassengers {return false}
    if lhs._requestorContactInfo != rhs._requestorContactInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_FleetMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FleetMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fleet_id"),
    2: .same(proto: "properties"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fleetID) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.properties) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fleetID.isEmpty {
      try visitor.visitSingularStringField(value: self.fleetID, fieldNumber: 1)
    }
    if !self.properties.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.properties, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_FleetMetadata, rhs: Rideos_RideHailCommons_FleetMetadata) -> Bool {
    if lhs.fleetID != rhs.fleetID {return false}
    if lhs.properties != rhs.properties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_DeprecatedPlan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeprecatedPlan"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "waypoints"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.waypoints) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.waypoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.waypoints, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_DeprecatedPlan, rhs: Rideos_RideHailCommons_DeprecatedPlan) -> Bool {
    if lhs.waypoints != rhs.waypoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_DeprecatedVehicleInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeprecatedVehicleInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    2: .same(proto: "make"),
    3: .same(proto: "model"),
    4: .same(proto: "color"),
    5: .standard(proto: "license_plate"),
    6: .standard(proto: "passenger_capacity"),
    7: .standard(proto: "driver_contact_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.make) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.model) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.color) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.licensePlate) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.passengerCapacity) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._driverContactInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    if !self.make.isEmpty {
      try visitor.visitSingularStringField(value: self.make, fieldNumber: 2)
    }
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 3)
    }
    if self.color != .unknown {
      try visitor.visitSingularEnumField(value: self.color, fieldNumber: 4)
    }
    if !self.licensePlate.isEmpty {
      try visitor.visitSingularStringField(value: self.licensePlate, fieldNumber: 5)
    }
    if self.passengerCapacity != 0 {
      try visitor.visitSingularInt32Field(value: self.passengerCapacity, fieldNumber: 6)
    }
    if let v = self._driverContactInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_DeprecatedVehicleInfo, rhs: Rideos_RideHailCommons_DeprecatedVehicleInfo) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.make != rhs.make {return false}
    if lhs.model != rhs.model {return false}
    if lhs.color != rhs.color {return false}
    if lhs.licensePlate != rhs.licensePlate {return false}
    if lhs.passengerCapacity != rhs.passengerCapacity {return false}
    if lhs._driverContactInfo != rhs._driverContactInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_DeprecatedVehicleInfo.VehicleColor: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "BLUE"),
    2: .same(proto: "PURPLE"),
    3: .same(proto: "PINK"),
    4: .same(proto: "RED"),
    5: .same(proto: "MAROON"),
    6: .same(proto: "ORANGE"),
    7: .same(proto: "TAN"),
    8: .same(proto: "GOLD"),
    9: .same(proto: "YELLOW"),
    10: .same(proto: "GREEN"),
    11: .same(proto: "BROWN"),
    12: .same(proto: "BEIGE"),
    13: .same(proto: "SILVER"),
    14: .same(proto: "GRAY"),
    15: .same(proto: "BLACK"),
    16: .same(proto: "WHITE"),
  ]
}

extension Rideos_RideHailCommons_DeprecatedTrip: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeprecatedTrip"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trip_id"),
    2: .standard(proto: "fleet_id"),
    3: .same(proto: "stage"),
    4: .standard(proto: "pickup_location"),
    5: .standard(proto: "dropoff_location"),
    6: .standard(proto: "vehicle_info"),
    7: .standard(proto: "passenger_info"),
    8: .standard(proto: "cancel_reason"),
    9: .standard(proto: "replacement_trip_id"),
  ]

  fileprivate class _StorageClass {
    var _tripID: String = String()
    var _fleetID: String = String()
    var _stage: Rideos_RideHailCommons_DeprecatedTrip.TripStage = .unknown
    var _pickupLocation: Rideos_RideHailCommons_StopLocation? = nil
    var _dropoffLocation: Rideos_RideHailCommons_StopLocation? = nil
    var _vehicleInfo: Rideos_RideHailCommons_DeprecatedVehicleInfo? = nil
    var _passengerInfo: Rideos_RideHailCommons_PassengerInfo? = nil
    var _cancelReason: Rideos_RideHailCommons_CancelReason? = nil
    var _replacementTripID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _tripID = source._tripID
      _fleetID = source._fleetID
      _stage = source._stage
      _pickupLocation = source._pickupLocation
      _dropoffLocation = source._dropoffLocation
      _vehicleInfo = source._vehicleInfo
      _passengerInfo = source._passengerInfo
      _cancelReason = source._cancelReason
      _replacementTripID = source._replacementTripID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._tripID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._fleetID) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._stage) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._pickupLocation) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._dropoffLocation) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._vehicleInfo) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._passengerInfo) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._cancelReason) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._replacementTripID) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._tripID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tripID, fieldNumber: 1)
      }
      if !_storage._fleetID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fleetID, fieldNumber: 2)
      }
      if _storage._stage != .unknown {
        try visitor.visitSingularEnumField(value: _storage._stage, fieldNumber: 3)
      }
      if let v = _storage._pickupLocation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._dropoffLocation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._vehicleInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._passengerInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._cancelReason {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._replacementTripID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._replacementTripID, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_DeprecatedTrip, rhs: Rideos_RideHailCommons_DeprecatedTrip) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._tripID != rhs_storage._tripID {return false}
        if _storage._fleetID != rhs_storage._fleetID {return false}
        if _storage._stage != rhs_storage._stage {return false}
        if _storage._pickupLocation != rhs_storage._pickupLocation {return false}
        if _storage._dropoffLocation != rhs_storage._dropoffLocation {return false}
        if _storage._vehicleInfo != rhs_storage._vehicleInfo {return false}
        if _storage._passengerInfo != rhs_storage._passengerInfo {return false}
        if _storage._cancelReason != rhs_storage._cancelReason {return false}
        if _storage._replacementTripID != rhs_storage._replacementTripID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_DeprecatedTrip.TripStage: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "WAITING_FOR_ASSIGNMENT"),
    2: .same(proto: "DRIVING_TO_PICKUP"),
    3: .same(proto: "WAITING_FOR_PICKUP"),
    4: .same(proto: "DRIVING_TO_DROPOFF"),
    5: .same(proto: "COMPLETED"),
    6: .same(proto: "CANCELLED"),
    7: .same(proto: "REPLACED"),
  ]
}

extension Rideos_RideHailCommons_PassengerInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PassengerInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "passenger_id"),
    2: .standard(proto: "passenger_contact_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.passengerID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._passengerContactInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.passengerID.isEmpty {
      try visitor.visitSingularStringField(value: self.passengerID, fieldNumber: 1)
    }
    if let v = self._passengerContactInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_PassengerInfo, rhs: Rideos_RideHailCommons_PassengerInfo) -> Bool {
    if lhs.passengerID != rhs.passengerID {return false}
    if lhs._passengerContactInfo != rhs._passengerContactInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_PassengerTripInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PassengerTripInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "task_id"),
    2: .same(proto: "stage"),
    3: .standard(proto: "assigned_vehicle_id"),
    4: .standard(proto: "pickup_location"),
    5: .standard(proto: "dropoff_location"),
    6: .standard(proto: "driver_contact_info"),
    7: .standard(proto: "vehicle_info"),
    8: .standard(proto: "fleet_id"),
    9: .standard(proto: "cancel_reason"),
    10: .standard(proto: "replacement_task_id"),
  ]

  fileprivate class _StorageClass {
    var _taskID: String = String()
    var _stage: Rideos_RideHailCommons_TaskStage = .unknown
    var _assignedVehicleID: String = String()
    var _pickupLocation: Rideos_RideHailCommons_TaskLocation? = nil
    var _dropoffLocation: Rideos_RideHailCommons_TaskLocation? = nil
    var _driverContactInfo: Rideos_RideHailCommons_ContactInfo? = nil
    var _vehicleInfo: Rideos_RideHailCommons_DeprecatedVehicleInfo? = nil
    var _fleetID: String = String()
    var _cancelReason: Rideos_RideHailCommons_CancelReason? = nil
    var _replacementTaskID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _taskID = source._taskID
      _stage = source._stage
      _assignedVehicleID = source._assignedVehicleID
      _pickupLocation = source._pickupLocation
      _dropoffLocation = source._dropoffLocation
      _driverContactInfo = source._driverContactInfo
      _vehicleInfo = source._vehicleInfo
      _fleetID = source._fleetID
      _cancelReason = source._cancelReason
      _replacementTaskID = source._replacementTaskID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._taskID) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._stage) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._assignedVehicleID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._pickupLocation) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._dropoffLocation) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._driverContactInfo) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._vehicleInfo) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._fleetID) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._cancelReason) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._replacementTaskID) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._taskID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._taskID, fieldNumber: 1)
      }
      if _storage._stage != .unknown {
        try visitor.visitSingularEnumField(value: _storage._stage, fieldNumber: 2)
      }
      if !_storage._assignedVehicleID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._assignedVehicleID, fieldNumber: 3)
      }
      if let v = _storage._pickupLocation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._dropoffLocation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._driverContactInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._vehicleInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._fleetID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fleetID, fieldNumber: 8)
      }
      if let v = _storage._cancelReason {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._replacementTaskID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._replacementTaskID, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_PassengerTripInfo, rhs: Rideos_RideHailCommons_PassengerTripInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._taskID != rhs_storage._taskID {return false}
        if _storage._stage != rhs_storage._stage {return false}
        if _storage._assignedVehicleID != rhs_storage._assignedVehicleID {return false}
        if _storage._pickupLocation != rhs_storage._pickupLocation {return false}
        if _storage._dropoffLocation != rhs_storage._dropoffLocation {return false}
        if _storage._driverContactInfo != rhs_storage._driverContactInfo {return false}
        if _storage._vehicleInfo != rhs_storage._vehicleInfo {return false}
        if _storage._fleetID != rhs_storage._fleetID {return false}
        if _storage._cancelReason != rhs_storage._cancelReason {return false}
        if _storage._replacementTaskID != rhs_storage._replacementTaskID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_TaskLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TaskLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .standard(proto: "external_stop_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.externalStopID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.externalStopID.isEmpty {
      try visitor.visitSingularStringField(value: self.externalStopID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_TaskLocation, rhs: Rideos_RideHailCommons_TaskLocation) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs.externalStopID != rhs.externalStopID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_ActiveTripInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ActiveTripInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "passenger_trip_info"),
    2: .standard(proto: "passenger_id"),
    3: .standard(proto: "passenger_contact_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._passengerTripInfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.passengerID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._passengerContactInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._passengerTripInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.passengerID.isEmpty {
      try visitor.visitSingularStringField(value: self.passengerID, fieldNumber: 2)
    }
    if let v = self._passengerContactInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_ActiveTripInfo, rhs: Rideos_RideHailCommons_ActiveTripInfo) -> Bool {
    if lhs._passengerTripInfo != rhs._passengerTripInfo {return false}
    if lhs.passengerID != rhs.passengerID {return false}
    if lhs._passengerContactInfo != rhs._passengerContactInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_DeprecatedVehicleState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeprecatedVehicleState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    2: .standard(proto: "ready_for_dispatch"),
    3: .standard(proto: "vehicle_plan"),
    4: .standard(proto: "assigned_task_id"),
    5: .standard(proto: "last_active_time_epoch_ms"),
    6: .standard(proto: "fleet_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.readyForDispatch) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._vehiclePlan) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.assignedTaskID) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.lastActiveTimeEpochMs) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.fleetID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    if self.readyForDispatch != false {
      try visitor.visitSingularBoolField(value: self.readyForDispatch, fieldNumber: 2)
    }
    if let v = self._vehiclePlan {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.assignedTaskID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.assignedTaskID, fieldNumber: 4)
    }
    if self.lastActiveTimeEpochMs != 0 {
      try visitor.visitSingularInt64Field(value: self.lastActiveTimeEpochMs, fieldNumber: 5)
    }
    if !self.fleetID.isEmpty {
      try visitor.visitSingularStringField(value: self.fleetID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_DeprecatedVehicleState, rhs: Rideos_RideHailCommons_DeprecatedVehicleState) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.readyForDispatch != rhs.readyForDispatch {return false}
    if lhs._vehiclePlan != rhs._vehiclePlan {return false}
    if lhs.assignedTaskID != rhs.assignedTaskID {return false}
    if lhs.lastActiveTimeEpochMs != rhs.lastActiveTimeEpochMs {return false}
    if lhs.fleetID != rhs.fleetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_VehicleUIState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VehicleUIState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .same(proto: "position"),
    3: .standard(proto: "currently_carried_resource_id"),
    4: .same(proto: "info"),
  ]

  fileprivate class _StorageClass {
    var _state: Rideos_RideHailCommons_DeprecatedVehicleState? = nil
    var _position: Rideos_RideHailCommons_VehicleExtendedPosition? = nil
    var _currentlyCarriedResourceID: [String] = []
    var _info: Rideos_RideHailCommons_DeprecatedVehicleInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _state = source._state
      _position = source._position
      _currentlyCarriedResourceID = source._currentlyCarriedResourceID
      _info = source._info
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._state) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._position) }()
        case 3: try { try decoder.decodeRepeatedStringField(value: &_storage._currentlyCarriedResourceID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._info) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._state {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._position {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._currentlyCarriedResourceID.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._currentlyCarriedResourceID, fieldNumber: 3)
      }
      if let v = _storage._info {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_VehicleUIState, rhs: Rideos_RideHailCommons_VehicleUIState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._state != rhs_storage._state {return false}
        if _storage._position != rhs_storage._position {return false}
        if _storage._currentlyCarriedResourceID != rhs_storage._currentlyCarriedResourceID {return false}
        if _storage._info != rhs_storage._info {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailCommons_VehicleExtendedPosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VehicleExtendedPosition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    2: .standard(proto: "time_of_validity"),
    3: .same(proto: "position"),
    5: .same(proto: "heading"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._timeOfValidity) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._heading) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    if let v = self._timeOfValidity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._heading {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailCommons_VehicleExtendedPosition, rhs: Rideos_RideHailCommons_VehicleExtendedPosition) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs._timeOfValidity != rhs._timeOfValidity {return false}
    if lhs._position != rhs._position {return false}
    if lhs._heading != rhs._heading {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
