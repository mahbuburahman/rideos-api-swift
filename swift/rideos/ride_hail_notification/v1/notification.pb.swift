// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rideos/ride_hail_notification/v1/notification.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
// Copyright 2018-2019 rideOS, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Rideos_RideHailNotification_V1_PullNotificationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var maxNotificationLimit: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_RideHailNotification_V1_PullNotificationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var notifications: [Rideos_RideHailNotification_V1_Notification] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_RideHailNotification_V1_Notification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var intendedDevice: Rideos_RideHailNotification_V1_DeviceInfo {
    get {return _intendedDevice ?? Rideos_RideHailNotification_V1_DeviceInfo()}
    set {_intendedDevice = newValue}
  }
  /// Returns true if `intendedDevice` has been explicitly set.
  public var hasIntendedDevice: Bool {return self._intendedDevice != nil}
  /// Clears the value of `intendedDevice`. Subsequent reads from it will return its default value.
  public mutating func clearIntendedDevice() {self._intendedDevice = nil}

  public var ackID: String = String()

  public var event: Rideos_RideHailNotification_V1_Event {
    get {return _event ?? Rideos_RideHailNotification_V1_Event()}
    set {_event = newValue}
  }
  /// Returns true if `event` has been explicitly set.
  public var hasEvent: Bool {return self._event != nil}
  /// Clears the value of `event`. Subsequent reads from it will return its default value.
  public mutating func clearEvent() {self._event = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _intendedDevice: Rideos_RideHailNotification_V1_DeviceInfo? = nil
  fileprivate var _event: Rideos_RideHailNotification_V1_Event? = nil
}

public struct Rideos_RideHailNotification_V1_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var eventType: Rideos_RideHailNotification_V1_Event.OneOf_EventType? = nil

  public var riderEvent: Rideos_RideHailNotification_V1_Event.RiderEvent {
    get {
      if case .riderEvent(let v)? = eventType {return v}
      return Rideos_RideHailNotification_V1_Event.RiderEvent()
    }
    set {eventType = .riderEvent(newValue)}
  }

  public var driverEvent: Rideos_RideHailNotification_V1_Event.DriverEvent {
    get {
      if case .driverEvent(let v)? = eventType {return v}
      return Rideos_RideHailNotification_V1_Event.DriverEvent()
    }
    set {eventType = .driverEvent(newValue)}
  }

  public var eventID: String = String()

  /// Timestamp at which the event will expire
  public var expirationTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _expirationTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_expirationTime = newValue}
  }
  /// Returns true if `expirationTime` has been explicitly set.
  public var hasExpirationTime: Bool {return self._expirationTime != nil}
  /// Clears the value of `expirationTime`. Subsequent reads from it will return its default value.
  public mutating func clearExpirationTime() {self._expirationTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_EventType: Equatable {
    case riderEvent(Rideos_RideHailNotification_V1_Event.RiderEvent)
    case driverEvent(Rideos_RideHailNotification_V1_Event.DriverEvent)

  #if !swift(>=4.1)
    public static func ==(lhs: Rideos_RideHailNotification_V1_Event.OneOf_EventType, rhs: Rideos_RideHailNotification_V1_Event.OneOf_EventType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.riderEvent, .riderEvent): return {
        guard case .riderEvent(let l) = lhs, case .riderEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.driverEvent, .driverEvent): return {
        guard case .driverEvent(let l) = lhs, case .driverEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct RiderEvent {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var eventType: Rideos_RideHailNotification_V1_Event.RiderEvent.OneOf_EventType? = nil

    public var vehicleMatchedToPassenger: Rideos_RideHailNotification_V1_Event.RiderEvent.VehicleMatchedToPassenger {
      get {
        if case .vehicleMatchedToPassenger(let v)? = eventType {return v}
        return Rideos_RideHailNotification_V1_Event.RiderEvent.VehicleMatchedToPassenger()
      }
      set {eventType = .vehicleMatchedToPassenger(newValue)}
    }

    public var vehicleArrivedAtPickup: Rideos_RideHailNotification_V1_Event.RiderEvent.VehicleArrivedAtPickup {
      get {
        if case .vehicleArrivedAtPickup(let v)? = eventType {return v}
        return Rideos_RideHailNotification_V1_Event.RiderEvent.VehicleArrivedAtPickup()
      }
      set {eventType = .vehicleArrivedAtPickup(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_EventType: Equatable {
      case vehicleMatchedToPassenger(Rideos_RideHailNotification_V1_Event.RiderEvent.VehicleMatchedToPassenger)
      case vehicleArrivedAtPickup(Rideos_RideHailNotification_V1_Event.RiderEvent.VehicleArrivedAtPickup)

    #if !swift(>=4.1)
      public static func ==(lhs: Rideos_RideHailNotification_V1_Event.RiderEvent.OneOf_EventType, rhs: Rideos_RideHailNotification_V1_Event.RiderEvent.OneOf_EventType) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.vehicleMatchedToPassenger, .vehicleMatchedToPassenger): return {
          guard case .vehicleMatchedToPassenger(let l) = lhs, case .vehicleMatchedToPassenger(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.vehicleArrivedAtPickup, .vehicleArrivedAtPickup): return {
          guard case .vehicleArrivedAtPickup(let l) = lhs, case .vehicleArrivedAtPickup(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public struct VehicleMatchedToPassenger {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var info: Rideos_RideHailCommons_VehicleInfo {
        get {return _info ?? Rideos_RideHailCommons_VehicleInfo()}
        set {_info = newValue}
      }
      /// Returns true if `info` has been explicitly set.
      public var hasInfo: Bool {return self._info != nil}
      /// Clears the value of `info`. Subsequent reads from it will return its default value.
      public mutating func clearInfo() {self._info = nil}

      public var estimatedPickupTime: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {return _estimatedPickupTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
        set {_estimatedPickupTime = newValue}
      }
      /// Returns true if `estimatedPickupTime` has been explicitly set.
      public var hasEstimatedPickupTime: Bool {return self._estimatedPickupTime != nil}
      /// Clears the value of `estimatedPickupTime`. Subsequent reads from it will return its default value.
      public mutating func clearEstimatedPickupTime() {self._estimatedPickupTime = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _info: Rideos_RideHailCommons_VehicleInfo? = nil
      fileprivate var _estimatedPickupTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    }

    public struct VehicleArrivedAtPickup {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var info: Rideos_RideHailCommons_VehicleInfo {
        get {return _info ?? Rideos_RideHailCommons_VehicleInfo()}
        set {_info = newValue}
      }
      /// Returns true if `info` has been explicitly set.
      public var hasInfo: Bool {return self._info != nil}
      /// Clears the value of `info`. Subsequent reads from it will return its default value.
      public mutating func clearInfo() {self._info = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _info: Rideos_RideHailCommons_VehicleInfo? = nil
    }

    public init() {}
  }

  public struct DriverEvent {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var eventType: Rideos_RideHailNotification_V1_Event.DriverEvent.OneOf_EventType? = nil

    public var newTripAssignment: Rideos_RideHailNotification_V1_Event.DriverEvent.NewTripAssignment {
      get {
        if case .newTripAssignment(let v)? = eventType {return v}
        return Rideos_RideHailNotification_V1_Event.DriverEvent.NewTripAssignment()
      }
      set {eventType = .newTripAssignment(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_EventType: Equatable {
      case newTripAssignment(Rideos_RideHailNotification_V1_Event.DriverEvent.NewTripAssignment)

    #if !swift(>=4.1)
      public static func ==(lhs: Rideos_RideHailNotification_V1_Event.DriverEvent.OneOf_EventType, rhs: Rideos_RideHailNotification_V1_Event.DriverEvent.OneOf_EventType) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.newTripAssignment, .newTripAssignment): return {
          guard case .newTripAssignment(let l) = lhs, case .newTripAssignment(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        }
      }
    #endif
    }

    public struct NewTripAssignment {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var tripInfo: Rideos_RideHailCommons_TripInfo {
        get {return _tripInfo ?? Rideos_RideHailCommons_TripInfo()}
        set {_tripInfo = newValue}
      }
      /// Returns true if `tripInfo` has been explicitly set.
      public var hasTripInfo: Bool {return self._tripInfo != nil}
      /// Clears the value of `tripInfo`. Subsequent reads from it will return its default value.
      public mutating func clearTripInfo() {self._tripInfo = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _tripInfo: Rideos_RideHailCommons_TripInfo? = nil
    }

    public init() {}
  }

  public init() {}

  fileprivate var _expirationTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Rideos_RideHailNotification_V1_AckNotificationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var acks: [Rideos_RideHailNotification_V1_Ack] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_RideHailNotification_V1_Ack {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ackID: String = String()

  public var result: Rideos_RideHailNotification_V1_Ack.AckResult = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum AckResult: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case success // = 1
    case failure // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .success
      case 2: self = .failure
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .success: return 1
      case .failure: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Rideos_RideHailNotification_V1_Ack.AckResult: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Rideos_RideHailNotification_V1_Ack.AckResult] = [
    .unknown,
    .success,
    .failure,
  ]
}

#endif  // swift(>=4.2)

public struct Rideos_RideHailNotification_V1_AckNotificationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rideos.ride_hail_notification.v1"

extension Rideos_RideHailNotification_V1_PullNotificationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PullNotificationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_notification_limit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.maxNotificationLimit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.maxNotificationLimit != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxNotificationLimit, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailNotification_V1_PullNotificationsRequest, rhs: Rideos_RideHailNotification_V1_PullNotificationsRequest) -> Bool {
    if lhs.maxNotificationLimit != rhs.maxNotificationLimit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailNotification_V1_PullNotificationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PullNotificationsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "notifications"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.notifications) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.notifications.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.notifications, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailNotification_V1_PullNotificationsResponse, rhs: Rideos_RideHailNotification_V1_PullNotificationsResponse) -> Bool {
    if lhs.notifications != rhs.notifications {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailNotification_V1_Notification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Notification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "intended_device"),
    2: .standard(proto: "ack_id"),
    3: .same(proto: "event"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._intendedDevice) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ackID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._event) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._intendedDevice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.ackID.isEmpty {
      try visitor.visitSingularStringField(value: self.ackID, fieldNumber: 2)
    }
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailNotification_V1_Notification, rhs: Rideos_RideHailNotification_V1_Notification) -> Bool {
    if lhs._intendedDevice != rhs._intendedDevice {return false}
    if lhs.ackID != rhs.ackID {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailNotification_V1_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Event"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rider_event"),
    2: .standard(proto: "driver_event"),
    21: .standard(proto: "event_id"),
    22: .standard(proto: "expiration_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Rideos_RideHailNotification_V1_Event.RiderEvent?
        if let current = self.eventType {
          try decoder.handleConflictingOneOf()
          if case .riderEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.eventType = .riderEvent(v)}
      }()
      case 2: try {
        var v: Rideos_RideHailNotification_V1_Event.DriverEvent?
        if let current = self.eventType {
          try decoder.handleConflictingOneOf()
          if case .driverEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.eventType = .driverEvent(v)}
      }()
      case 21: try { try decoder.decodeSingularStringField(value: &self.eventID) }()
      case 22: try { try decoder.decodeSingularMessageField(value: &self._expirationTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.eventType {
    case .riderEvent?: try {
      guard case .riderEvent(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .driverEvent?: try {
      guard case .driverEvent(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if !self.eventID.isEmpty {
      try visitor.visitSingularStringField(value: self.eventID, fieldNumber: 21)
    }
    if let v = self._expirationTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailNotification_V1_Event, rhs: Rideos_RideHailNotification_V1_Event) -> Bool {
    if lhs.eventType != rhs.eventType {return false}
    if lhs.eventID != rhs.eventID {return false}
    if lhs._expirationTime != rhs._expirationTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailNotification_V1_Event.RiderEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailNotification_V1_Event.protoMessageName + ".RiderEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_matched_to_passenger"),
    2: .standard(proto: "vehicle_arrived_at_pickup"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Rideos_RideHailNotification_V1_Event.RiderEvent.VehicleMatchedToPassenger?
        if let current = self.eventType {
          try decoder.handleConflictingOneOf()
          if case .vehicleMatchedToPassenger(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.eventType = .vehicleMatchedToPassenger(v)}
      }()
      case 2: try {
        var v: Rideos_RideHailNotification_V1_Event.RiderEvent.VehicleArrivedAtPickup?
        if let current = self.eventType {
          try decoder.handleConflictingOneOf()
          if case .vehicleArrivedAtPickup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.eventType = .vehicleArrivedAtPickup(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.eventType {
    case .vehicleMatchedToPassenger?: try {
      guard case .vehicleMatchedToPassenger(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .vehicleArrivedAtPickup?: try {
      guard case .vehicleArrivedAtPickup(let v)? = self.eventType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailNotification_V1_Event.RiderEvent, rhs: Rideos_RideHailNotification_V1_Event.RiderEvent) -> Bool {
    if lhs.eventType != rhs.eventType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailNotification_V1_Event.RiderEvent.VehicleMatchedToPassenger: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailNotification_V1_Event.RiderEvent.protoMessageName + ".VehicleMatchedToPassenger"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "info"),
    2: .standard(proto: "estimated_pickup_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._estimatedPickupTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._estimatedPickupTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailNotification_V1_Event.RiderEvent.VehicleMatchedToPassenger, rhs: Rideos_RideHailNotification_V1_Event.RiderEvent.VehicleMatchedToPassenger) -> Bool {
    if lhs._info != rhs._info {return false}
    if lhs._estimatedPickupTime != rhs._estimatedPickupTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailNotification_V1_Event.RiderEvent.VehicleArrivedAtPickup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailNotification_V1_Event.RiderEvent.protoMessageName + ".VehicleArrivedAtPickup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailNotification_V1_Event.RiderEvent.VehicleArrivedAtPickup, rhs: Rideos_RideHailNotification_V1_Event.RiderEvent.VehicleArrivedAtPickup) -> Bool {
    if lhs._info != rhs._info {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailNotification_V1_Event.DriverEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailNotification_V1_Event.protoMessageName + ".DriverEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "new_trip_assignment"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Rideos_RideHailNotification_V1_Event.DriverEvent.NewTripAssignment?
        if let current = self.eventType {
          try decoder.handleConflictingOneOf()
          if case .newTripAssignment(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.eventType = .newTripAssignment(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .newTripAssignment(let v)? = self.eventType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailNotification_V1_Event.DriverEvent, rhs: Rideos_RideHailNotification_V1_Event.DriverEvent) -> Bool {
    if lhs.eventType != rhs.eventType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailNotification_V1_Event.DriverEvent.NewTripAssignment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailNotification_V1_Event.DriverEvent.protoMessageName + ".NewTripAssignment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trip_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._tripInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._tripInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailNotification_V1_Event.DriverEvent.NewTripAssignment, rhs: Rideos_RideHailNotification_V1_Event.DriverEvent.NewTripAssignment) -> Bool {
    if lhs._tripInfo != rhs._tripInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailNotification_V1_AckNotificationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AckNotificationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "acks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.acks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.acks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.acks, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailNotification_V1_AckNotificationsRequest, rhs: Rideos_RideHailNotification_V1_AckNotificationsRequest) -> Bool {
    if lhs.acks != rhs.acks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailNotification_V1_Ack: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Ack"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ack_id"),
    2: .same(proto: "result"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ackID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ackID.isEmpty {
      try visitor.visitSingularStringField(value: self.ackID, fieldNumber: 1)
    }
    if self.result != .unknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailNotification_V1_Ack, rhs: Rideos_RideHailNotification_V1_Ack) -> Bool {
    if lhs.ackID != rhs.ackID {return false}
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailNotification_V1_Ack.AckResult: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "FAILURE"),
  ]
}

extension Rideos_RideHailNotification_V1_AckNotificationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AckNotificationsResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailNotification_V1_AckNotificationsResponse, rhs: Rideos_RideHailNotification_V1_AckNotificationsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
