// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rideos/ride_hail_notification/v1/notification_common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
// Copyright 2018-2019 rideOS, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Rideos_RideHailNotification_V1_DeviceInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var deviceType: Rideos_RideHailNotification_V1_DeviceInfo.OneOf_DeviceType? = nil

  public var androidDevice: Rideos_RideHailNotification_V1_DeviceInfo.AndroidDevice {
    get {
      if case .androidDevice(let v)? = deviceType {return v}
      return Rideos_RideHailNotification_V1_DeviceInfo.AndroidDevice()
    }
    set {deviceType = .androidDevice(newValue)}
  }

  public var iosDevice: Rideos_RideHailNotification_V1_DeviceInfo.IosDevice {
    get {
      if case .iosDevice(let v)? = deviceType {return v}
      return Rideos_RideHailNotification_V1_DeviceInfo.IosDevice()
    }
    set {deviceType = .iosDevice(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_DeviceType: Equatable {
    case androidDevice(Rideos_RideHailNotification_V1_DeviceInfo.AndroidDevice)
    case iosDevice(Rideos_RideHailNotification_V1_DeviceInfo.IosDevice)

  #if !swift(>=4.1)
    public static func ==(lhs: Rideos_RideHailNotification_V1_DeviceInfo.OneOf_DeviceType, rhs: Rideos_RideHailNotification_V1_DeviceInfo.OneOf_DeviceType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.androidDevice, .androidDevice): return {
        guard case .androidDevice(let l) = lhs, case .androidDevice(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.iosDevice, .iosDevice): return {
        guard case .iosDevice(let l) = lhs, case .iosDevice(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct AndroidDevice {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var token: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct IosDevice {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var token: Data = Data()

    public var bundleID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rideos.ride_hail_notification.v1"

extension Rideos_RideHailNotification_V1_DeviceInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeviceInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "android_device"),
    2: .standard(proto: "ios_device"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Rideos_RideHailNotification_V1_DeviceInfo.AndroidDevice?
        if let current = self.deviceType {
          try decoder.handleConflictingOneOf()
          if case .androidDevice(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.deviceType = .androidDevice(v)}
      }()
      case 2: try {
        var v: Rideos_RideHailNotification_V1_DeviceInfo.IosDevice?
        if let current = self.deviceType {
          try decoder.handleConflictingOneOf()
          if case .iosDevice(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.deviceType = .iosDevice(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.deviceType {
    case .androidDevice?: try {
      guard case .androidDevice(let v)? = self.deviceType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .iosDevice?: try {
      guard case .iosDevice(let v)? = self.deviceType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailNotification_V1_DeviceInfo, rhs: Rideos_RideHailNotification_V1_DeviceInfo) -> Bool {
    if lhs.deviceType != rhs.deviceType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailNotification_V1_DeviceInfo.AndroidDevice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailNotification_V1_DeviceInfo.protoMessageName + ".AndroidDevice"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.token) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailNotification_V1_DeviceInfo.AndroidDevice, rhs: Rideos_RideHailNotification_V1_DeviceInfo.AndroidDevice) -> Bool {
    if lhs.token != rhs.token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_RideHailNotification_V1_DeviceInfo.IosDevice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Rideos_RideHailNotification_V1_DeviceInfo.protoMessageName + ".IosDevice"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .standard(proto: "bundle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.token) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.bundleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularBytesField(value: self.token, fieldNumber: 1)
    }
    if !self.bundleID.isEmpty {
      try visitor.visitSingularStringField(value: self.bundleID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_RideHailNotification_V1_DeviceInfo.IosDevice, rhs: Rideos_RideHailNotification_V1_DeviceInfo.IosDevice) -> Bool {
    if lhs.token != rhs.token {return false}
    if lhs.bundleID != rhs.bundleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
