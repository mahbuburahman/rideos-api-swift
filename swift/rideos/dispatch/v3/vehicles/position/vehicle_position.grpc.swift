//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: rideos/dispatch/v3/vehicles/position/vehicle_position.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Rideos_Dispatch_V3_Vehicles_Position_VehiclePositionServiceClient, then call methods of this protocol to make API calls.
public protocol Rideos_Dispatch_V3_Vehicles_Position_VehiclePositionServiceClientProtocol: GRPCClient {
  func getVehiclePosition(
    _ request: Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionRequest, Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionResponse>

  func getVehiclePositionsById(
    _ request: Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionsByIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionsByIdRequest, Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionsResponse>

  func updateVehiclePosition(
    _ request: Rideos_Dispatch_V3_Vehicles_Position_UpdateVehiclePositionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_Position_UpdateVehiclePositionRequest, Rideos_Dispatch_V3_Vehicles_Position_UpdateVehiclePositionResponse>

}

extension Rideos_Dispatch_V3_Vehicles_Position_VehiclePositionServiceClientProtocol {

  /// Get vehicle position
  ///
  /// Get the latest position for a given vehicle.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVehiclePosition.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVehiclePosition(
    _ request: Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionRequest, Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.vehicles.position.VehiclePositionService/GetVehiclePosition",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get vehicle positions by ID
  ///
  /// Get one or more vehicle positions by vehicle ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVehiclePositionsById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVehiclePositionsById(
    _ request: Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionsByIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionsByIdRequest, Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionsResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.vehicles.position.VehiclePositionService/GetVehiclePositionsById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Update vehicle position
  ///
  /// Update a vehicle's position. An optional timestamp can be provided for when the position is recorded.
  /// Additionally, you can enforce whether the position has to be matched to our base map or not.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateVehiclePosition.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateVehiclePosition(
    _ request: Rideos_Dispatch_V3_Vehicles_Position_UpdateVehiclePositionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_Position_UpdateVehiclePositionRequest, Rideos_Dispatch_V3_Vehicles_Position_UpdateVehiclePositionResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.vehicles.position.VehiclePositionService/UpdateVehiclePosition",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Rideos_Dispatch_V3_Vehicles_Position_VehiclePositionServiceClient: Rideos_Dispatch_V3_Vehicles_Position_VehiclePositionServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the rideos.dispatch.v3.vehicles.position.VehiclePositionService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

