// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rideos/dispatch/v3/vehicles/position/vehicle_position.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
// Copyright 2018-2019 rideOS, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The position and heading of a vehicle
public struct Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var position: Rideos_Geo_V1_Position {
    get {return _position ?? Rideos_Geo_V1_Position()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var heading: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _heading ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_heading = newValue}
  }
  /// Returns true if `heading` has been explicitly set.
  public var hasHeading: Bool {return self._heading != nil}
  /// Clears the value of `heading`. Subsequent reads from it will return its default value.
  public mutating func clearHeading() {self._heading = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _position: Rideos_Geo_V1_Position? = nil
  fileprivate var _heading: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
}

public struct Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehiclePosition: Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition {
    get {return _vehiclePosition ?? Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition()}
    set {_vehiclePosition = newValue}
  }
  /// Returns true if `vehiclePosition` has been explicitly set.
  public var hasVehiclePosition: Bool {return self._vehiclePosition != nil}
  /// Clears the value of `vehiclePosition`. Subsequent reads from it will return its default value.
  public mutating func clearVehiclePosition() {self._vehiclePosition = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _vehiclePosition: Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition? = nil
}

public struct Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionsByIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehiclePositions: Dictionary<String,Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Vehicles_Position_UpdateVehiclePositionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var vehiclePosition: Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition {
    get {return _vehiclePosition ?? Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition()}
    set {_vehiclePosition = newValue}
  }
  /// Returns true if `vehiclePosition` has been explicitly set.
  public var hasVehiclePosition: Bool {return self._vehiclePosition != nil}
  /// Clears the value of `vehiclePosition`. Subsequent reads from it will return its default value.
  public mutating func clearVehiclePosition() {self._vehiclePosition = nil}

  /// Optional. If not set, the current timestamp will be used.
  public var recordedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _recordedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_recordedAt = newValue}
  }
  /// Returns true if `recordedAt` has been explicitly set.
  public var hasRecordedAt: Bool {return self._recordedAt != nil}
  /// Clears the value of `recordedAt`. Subsequent reads from it will return its default value.
  public mutating func clearRecordedAt() {self._recordedAt = nil}

  /// If set to true, we will return an error when a position cannot be matched to our base map.
  public var enforceMatch: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _enforceMatch ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_enforceMatch = newValue}
  }
  /// Returns true if `enforceMatch` has been explicitly set.
  public var hasEnforceMatch: Bool {return self._enforceMatch != nil}
  /// Clears the value of `enforceMatch`. Subsequent reads from it will return its default value.
  public mutating func clearEnforceMatch() {self._enforceMatch = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _vehiclePosition: Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition? = nil
  fileprivate var _recordedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _enforceMatch: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

public struct Rideos_Dispatch_V3_Vehicles_Position_UpdateVehiclePositionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehiclePosition: Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition {
    get {return _vehiclePosition ?? Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition()}
    set {_vehiclePosition = newValue}
  }
  /// Returns true if `vehiclePosition` has been explicitly set.
  public var hasVehiclePosition: Bool {return self._vehiclePosition != nil}
  /// Clears the value of `vehiclePosition`. Subsequent reads from it will return its default value.
  public mutating func clearVehiclePosition() {self._vehiclePosition = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _vehiclePosition: Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition? = nil
}

public struct Rideos_Dispatch_V3_Vehicles_Position_DeleteVehiclePositionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Vehicles_Position_DeleteVehiclePositionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rideos.dispatch.v3.vehicles.position"

extension Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VehiclePosition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .same(proto: "heading"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._heading) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._heading {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition, rhs: Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs._heading != rhs._heading {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetVehiclePositionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionRequest, rhs: Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetVehiclePositionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_position"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._vehiclePosition) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vehiclePosition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionResponse, rhs: Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionResponse) -> Bool {
    if lhs._vehiclePosition != rhs._vehiclePosition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionsByIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetVehiclePositionsByIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.vehicleIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.vehicleIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionsByIdRequest, rhs: Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionsByIdRequest) -> Bool {
    if lhs.vehicleIds != rhs.vehicleIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetVehiclePositionsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_positions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition>.self, value: &self.vehiclePositions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehiclePositions.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition>.self, value: self.vehiclePositions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionsResponse, rhs: Rideos_Dispatch_V3_Vehicles_Position_GetVehiclePositionsResponse) -> Bool {
    if lhs.vehiclePositions != rhs.vehiclePositions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Position_UpdateVehiclePositionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateVehiclePositionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    2: .standard(proto: "vehicle_position"),
    3: .standard(proto: "recorded_at"),
    4: .standard(proto: "enforce_match"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._vehiclePosition) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._recordedAt) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._enforceMatch) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    if let v = self._vehiclePosition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._recordedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._enforceMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Position_UpdateVehiclePositionRequest, rhs: Rideos_Dispatch_V3_Vehicles_Position_UpdateVehiclePositionRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs._vehiclePosition != rhs._vehiclePosition {return false}
    if lhs._recordedAt != rhs._recordedAt {return false}
    if lhs._enforceMatch != rhs._enforceMatch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Position_UpdateVehiclePositionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateVehiclePositionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_position"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._vehiclePosition) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vehiclePosition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Position_UpdateVehiclePositionResponse, rhs: Rideos_Dispatch_V3_Vehicles_Position_UpdateVehiclePositionResponse) -> Bool {
    if lhs._vehiclePosition != rhs._vehiclePosition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Position_DeleteVehiclePositionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteVehiclePositionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Position_DeleteVehiclePositionRequest, rhs: Rideos_Dispatch_V3_Vehicles_Position_DeleteVehiclePositionRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Position_DeleteVehiclePositionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteVehiclePositionResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Position_DeleteVehiclePositionResponse, rhs: Rideos_Dispatch_V3_Vehicles_Position_DeleteVehiclePositionResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
