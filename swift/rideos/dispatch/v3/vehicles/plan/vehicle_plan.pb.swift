// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rideos/dispatch/v3/vehicles/plan/vehicle_plan.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
// Copyright 2018-2019 rideOS, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Rideos_Dispatch_V3_Vehicles_Plan_TaskLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required: geographical position
  public var position: Rideos_Geo_V1_Position {
    get {return _position ?? Rideos_Geo_V1_Position()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  /// Optional: stop ID (opaque to dispatch engine)
  public var externalStopID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _externalStopID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_externalStopID = newValue}
  }
  /// Returns true if `externalStopID` has been explicitly set.
  public var hasExternalStopID: Bool {return self._externalStopID != nil}
  /// Clears the value of `externalStopID`. Subsequent reads from it will return its default value.
  public mutating func clearExternalStopID() {self._externalStopID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _position: Rideos_Geo_V1_Position? = nil
  fileprivate var _externalStopID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

public struct Rideos_Dispatch_V3_Vehicles_Plan_Resource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var resourceType: Rideos_Dispatch_V3_Vehicles_Plan_Resource.OneOf_ResourceType? = nil

  public var uniqueResource: Rideos_Dispatch_V3_Common_UniqueResource {
    get {
      if case .uniqueResource(let v)? = resourceType {return v}
      return Rideos_Dispatch_V3_Common_UniqueResource()
    }
    set {resourceType = .uniqueResource(newValue)}
  }

  public var genericResourceGroup: Rideos_Dispatch_V3_Common_GenericResourceGroup {
    get {
      if case .genericResourceGroup(let v)? = resourceType {return v}
      return Rideos_Dispatch_V3_Common_GenericResourceGroup()
    }
    set {resourceType = .genericResourceGroup(newValue)}
  }

  public var requestorContactInfo: Rideos_Dispatch_V3_Common_ContactInfo {
    get {return _requestorContactInfo ?? Rideos_Dispatch_V3_Common_ContactInfo()}
    set {_requestorContactInfo = newValue}
  }
  /// Returns true if `requestorContactInfo` has been explicitly set.
  public var hasRequestorContactInfo: Bool {return self._requestorContactInfo != nil}
  /// Clears the value of `requestorContactInfo`. Subsequent reads from it will return its default value.
  public mutating func clearRequestorContactInfo() {self._requestorContactInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_ResourceType: Equatable {
    case uniqueResource(Rideos_Dispatch_V3_Common_UniqueResource)
    case genericResourceGroup(Rideos_Dispatch_V3_Common_GenericResourceGroup)

  #if !swift(>=4.1)
    public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Plan_Resource.OneOf_ResourceType, rhs: Rideos_Dispatch_V3_Vehicles_Plan_Resource.OneOf_ResourceType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.uniqueResource, .uniqueResource): return {
        guard case .uniqueResource(let l) = lhs, case .uniqueResource(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.genericResourceGroup, .genericResourceGroup): return {
        guard case .genericResourceGroup(let l) = lhs, case .genericResourceGroup(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _requestorContactInfo: Rideos_Dispatch_V3_Common_ContactInfo? = nil
}

/// One segment of a task. A standard pickup/dropoff task contains the following four steps:
/// [DRIVE_TO_PICKUP, LOAD_RESOURCE, DRIVE_TO_DROPOFF, UNLOAD_RESOURCE]
public struct Rideos_Dispatch_V3_Vehicles_Plan_Step {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var location: Rideos_Dispatch_V3_Vehicles_Plan_TaskLocation {
    get {return _location ?? Rideos_Dispatch_V3_Vehicles_Plan_TaskLocation()}
    set {_location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  public var hasLocation: Bool {return self._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  public mutating func clearLocation() {self._location = nil}

  public var resource: Rideos_Dispatch_V3_Vehicles_Plan_Resource {
    get {return _resource ?? Rideos_Dispatch_V3_Vehicles_Plan_Resource()}
    set {_resource = newValue}
  }
  /// Returns true if `resource` has been explicitly set.
  public var hasResource: Bool {return self._resource != nil}
  /// Clears the value of `resource`. Subsequent reads from it will return its default value.
  public mutating func clearResource() {self._resource = nil}

  public var action: Rideos_Dispatch_V3_Vehicles_Plan_Step.Action = .unknown

  /// Remaining time is currently filled out for LOAD/UNLOAD_RESOURCE steps
  public var expectedRemainingTime: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _expectedRemainingTime ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_expectedRemainingTime = newValue}
  }
  /// Returns true if `expectedRemainingTime` has been explicitly set.
  public var hasExpectedRemainingTime: Bool {return self._expectedRemainingTime != nil}
  /// Clears the value of `expectedRemainingTime`. Subsequent reads from it will return its default value.
  public mutating func clearExpectedRemainingTime() {self._expectedRemainingTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Action: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case driveToPickup // = 1
    case loadResource // = 2
    case driveToDropoff // = 3
    case unloadResource // = 4
    case relocateDrive // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .driveToPickup
      case 2: self = .loadResource
      case 3: self = .driveToDropoff
      case 4: self = .unloadResource
      case 5: self = .relocateDrive
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .driveToPickup: return 1
      case .loadResource: return 2
      case .driveToDropoff: return 3
      case .unloadResource: return 4
      case .relocateDrive: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _location: Rideos_Dispatch_V3_Vehicles_Plan_TaskLocation? = nil
  fileprivate var _resource: Rideos_Dispatch_V3_Vehicles_Plan_Resource? = nil
  fileprivate var _expectedRemainingTime: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

#if swift(>=4.2)

extension Rideos_Dispatch_V3_Vehicles_Plan_Step.Action: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Rideos_Dispatch_V3_Vehicles_Plan_Step.Action] = [
    .unknown,
    .driveToPickup,
    .loadResource,
    .driveToDropoff,
    .unloadResource,
    .relocateDrive,
  ]
}

#endif  // swift(>=4.2)

public struct Rideos_Dispatch_V3_Vehicles_Plan_Waypoint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var taskID: String = String()

  public var stepID: String = String()

  public var step: Rideos_Dispatch_V3_Vehicles_Plan_Step {
    get {return _step ?? Rideos_Dispatch_V3_Vehicles_Plan_Step()}
    set {_step = newValue}
  }
  /// Returns true if `step` has been explicitly set.
  public var hasStep: Bool {return self._step != nil}
  /// Clears the value of `step`. Subsequent reads from it will return its default value.
  public mutating func clearStep() {self._step = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _step: Rideos_Dispatch_V3_Vehicles_Plan_Step? = nil
}

/// The recommended task assignments for a vehicle, in order of how the steps should be completed
public struct Rideos_Dispatch_V3_Vehicles_Plan_VehiclePlan {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var waypoints: [Rideos_Dispatch_V3_Vehicles_Plan_Waypoint] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rideos.dispatch.v3.vehicles.plan"

extension Rideos_Dispatch_V3_Vehicles_Plan_TaskLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TaskLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .standard(proto: "external_stop_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._externalStopID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._externalStopID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Plan_TaskLocation, rhs: Rideos_Dispatch_V3_Vehicles_Plan_TaskLocation) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs._externalStopID != rhs._externalStopID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Plan_Resource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Resource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unique_resource"),
    2: .standard(proto: "generic_resource_group"),
    3: .standard(proto: "requestor_contact_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Rideos_Dispatch_V3_Common_UniqueResource?
        if let current = self.resourceType {
          try decoder.handleConflictingOneOf()
          if case .uniqueResource(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.resourceType = .uniqueResource(v)}
      }()
      case 2: try {
        var v: Rideos_Dispatch_V3_Common_GenericResourceGroup?
        if let current = self.resourceType {
          try decoder.handleConflictingOneOf()
          if case .genericResourceGroup(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.resourceType = .genericResourceGroup(v)}
      }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._requestorContactInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.resourceType {
    case .uniqueResource?: try {
      guard case .uniqueResource(let v)? = self.resourceType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .genericResourceGroup?: try {
      guard case .genericResourceGroup(let v)? = self.resourceType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if let v = self._requestorContactInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Plan_Resource, rhs: Rideos_Dispatch_V3_Vehicles_Plan_Resource) -> Bool {
    if lhs.resourceType != rhs.resourceType {return false}
    if lhs._requestorContactInfo != rhs._requestorContactInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Plan_Step: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Step"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "location"),
    3: .same(proto: "resource"),
    4: .same(proto: "action"),
    5: .standard(proto: "expected_remaining_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._location) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._resource) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._expectedRemainingTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._location {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._resource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.action != .unknown {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 4)
    }
    if let v = self._expectedRemainingTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Plan_Step, rhs: Rideos_Dispatch_V3_Vehicles_Plan_Step) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._location != rhs._location {return false}
    if lhs._resource != rhs._resource {return false}
    if lhs.action != rhs.action {return false}
    if lhs._expectedRemainingTime != rhs._expectedRemainingTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Plan_Step.Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "DRIVE_TO_PICKUP"),
    2: .same(proto: "LOAD_RESOURCE"),
    3: .same(proto: "DRIVE_TO_DROPOFF"),
    4: .same(proto: "UNLOAD_RESOURCE"),
    5: .same(proto: "RELOCATE_DRIVE"),
  ]
}

extension Rideos_Dispatch_V3_Vehicles_Plan_Waypoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Waypoint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "task_id"),
    2: .standard(proto: "step_id"),
    3: .same(proto: "step"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.taskID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.stepID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._step) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.taskID.isEmpty {
      try visitor.visitSingularStringField(value: self.taskID, fieldNumber: 1)
    }
    if !self.stepID.isEmpty {
      try visitor.visitSingularStringField(value: self.stepID, fieldNumber: 2)
    }
    if let v = self._step {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Plan_Waypoint, rhs: Rideos_Dispatch_V3_Vehicles_Plan_Waypoint) -> Bool {
    if lhs.taskID != rhs.taskID {return false}
    if lhs.stepID != rhs.stepID {return false}
    if lhs._step != rhs._step {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Plan_VehiclePlan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VehiclePlan"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "waypoints"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.waypoints) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.waypoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.waypoints, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Plan_VehiclePlan, rhs: Rideos_Dispatch_V3_Vehicles_Plan_VehiclePlan) -> Bool {
    if lhs.waypoints != rhs.waypoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
