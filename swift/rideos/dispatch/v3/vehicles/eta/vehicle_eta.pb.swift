// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rideos/dispatch/v3/vehicles/eta/vehicle_eta.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
// Copyright 2018-2019 rideOS, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Rideos_Dispatch_V3_Vehicles_Eta_StepDuration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  public var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  public mutating func clearDuration() {self._duration = nil}

  public var status: Rideos_Dispatch_V3_Vehicles_Eta_StepDuration.Status = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case success // = 1
    case routeNotFound // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .success
      case 2: self = .routeNotFound
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .success: return 1
      case .routeNotFound: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

#if swift(>=4.2)

extension Rideos_Dispatch_V3_Vehicles_Eta_StepDuration.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Rideos_Dispatch_V3_Vehicles_Eta_StepDuration.Status] = [
    .unknown,
    .success,
    .routeNotFound,
  ]
}

#endif  // swift(>=4.2)

/// Contains the estimated duration for the given step
public struct Rideos_Dispatch_V3_Vehicles_Eta_StepEta {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var stepType: Rideos_Dispatch_V3_Vehicles_Plan_Step.Action = .unknown

  public var taskID: String = String()

  public var stepID: String = String()

  public var expectedDuration: Rideos_Dispatch_V3_Vehicles_Eta_StepDuration {
    get {return _expectedDuration ?? Rideos_Dispatch_V3_Vehicles_Eta_StepDuration()}
    set {_expectedDuration = newValue}
  }
  /// Returns true if `expectedDuration` has been explicitly set.
  public var hasExpectedDuration: Bool {return self._expectedDuration != nil}
  /// Clears the value of `expectedDuration`. Subsequent reads from it will return its default value.
  public mutating func clearExpectedDuration() {self._expectedDuration = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _expectedDuration: Rideos_Dispatch_V3_Vehicles_Eta_StepDuration? = nil
}

/// Contains the estimated duration for each step in a vehicle's plan, as well as the estimated duration from the last
/// step to the specified position.
public struct Rideos_Dispatch_V3_Vehicles_Eta_VehicleEta {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var stepEtas: [Rideos_Dispatch_V3_Vehicles_Eta_StepEta] = []

  public var durationFromLastStepToPosition: Rideos_Dispatch_V3_Vehicles_Eta_StepDuration {
    get {return _durationFromLastStepToPosition ?? Rideos_Dispatch_V3_Vehicles_Eta_StepDuration()}
    set {_durationFromLastStepToPosition = newValue}
  }
  /// Returns true if `durationFromLastStepToPosition` has been explicitly set.
  public var hasDurationFromLastStepToPosition: Bool {return self._durationFromLastStepToPosition != nil}
  /// Clears the value of `durationFromLastStepToPosition`. Subsequent reads from it will return its default value.
  public mutating func clearDurationFromLastStepToPosition() {self._durationFromLastStepToPosition = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _durationFromLastStepToPosition: Rideos_Dispatch_V3_Vehicles_Eta_StepDuration? = nil
}

public struct Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleEtasToPositionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fleetID: String = String()

  public var position: Rideos_Geo_V1_Position {
    get {return _position ?? Rideos_Geo_V1_Position()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _position: Rideos_Geo_V1_Position? = nil
}

public struct Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleEtasToPositionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleEtas: [Rideos_Dispatch_V3_Vehicles_Eta_VehicleEta] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleStepEtasRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  /// Optional - if not given, the current plan will be read from storage
  public var currentPlan: Rideos_Dispatch_V3_Vehicles_Plan_VehiclePlan {
    get {return _currentPlan ?? Rideos_Dispatch_V3_Vehicles_Plan_VehiclePlan()}
    set {_currentPlan = newValue}
  }
  /// Returns true if `currentPlan` has been explicitly set.
  public var hasCurrentPlan: Bool {return self._currentPlan != nil}
  /// Clears the value of `currentPlan`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentPlan() {self._currentPlan = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _currentPlan: Rideos_Dispatch_V3_Vehicles_Plan_VehiclePlan? = nil
}

public struct Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleStepEtasResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var stepEtas: [Rideos_Dispatch_V3_Vehicles_Eta_StepEta] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rideos.dispatch.v3.vehicles.eta"

extension Rideos_Dispatch_V3_Vehicles_Eta_StepDuration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StepDuration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "duration"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Eta_StepDuration, rhs: Rideos_Dispatch_V3_Vehicles_Eta_StepDuration) -> Bool {
    if lhs._duration != rhs._duration {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Eta_StepDuration.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "ROUTE_NOT_FOUND"),
  ]
}

extension Rideos_Dispatch_V3_Vehicles_Eta_StepEta: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StepEta"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "step_type"),
    2: .standard(proto: "task_id"),
    3: .standard(proto: "step_id"),
    4: .standard(proto: "expected_duration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.stepType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.taskID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.stepID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._expectedDuration) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.stepType != .unknown {
      try visitor.visitSingularEnumField(value: self.stepType, fieldNumber: 1)
    }
    if !self.taskID.isEmpty {
      try visitor.visitSingularStringField(value: self.taskID, fieldNumber: 2)
    }
    if !self.stepID.isEmpty {
      try visitor.visitSingularStringField(value: self.stepID, fieldNumber: 3)
    }
    if let v = self._expectedDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Eta_StepEta, rhs: Rideos_Dispatch_V3_Vehicles_Eta_StepEta) -> Bool {
    if lhs.stepType != rhs.stepType {return false}
    if lhs.taskID != rhs.taskID {return false}
    if lhs.stepID != rhs.stepID {return false}
    if lhs._expectedDuration != rhs._expectedDuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Eta_VehicleEta: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VehicleEta"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    2: .standard(proto: "step_etas"),
    3: .standard(proto: "duration_from_last_step_to_position"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.stepEtas) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._durationFromLastStepToPosition) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    if !self.stepEtas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.stepEtas, fieldNumber: 2)
    }
    if let v = self._durationFromLastStepToPosition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Eta_VehicleEta, rhs: Rideos_Dispatch_V3_Vehicles_Eta_VehicleEta) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.stepEtas != rhs.stepEtas {return false}
    if lhs._durationFromLastStepToPosition != rhs._durationFromLastStepToPosition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleEtasToPositionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetVehicleEtasToPositionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fleet_id"),
    2: .same(proto: "position"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fleetID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fleetID.isEmpty {
      try visitor.visitSingularStringField(value: self.fleetID, fieldNumber: 1)
    }
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleEtasToPositionRequest, rhs: Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleEtasToPositionRequest) -> Bool {
    if lhs.fleetID != rhs.fleetID {return false}
    if lhs._position != rhs._position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleEtasToPositionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetVehicleEtasToPositionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_etas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.vehicleEtas) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleEtas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vehicleEtas, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleEtasToPositionResponse, rhs: Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleEtasToPositionResponse) -> Bool {
    if lhs.vehicleEtas != rhs.vehicleEtas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleStepEtasRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetVehicleStepEtasRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    2: .standard(proto: "current_plan"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._currentPlan) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    if let v = self._currentPlan {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleStepEtasRequest, rhs: Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleStepEtasRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs._currentPlan != rhs._currentPlan {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleStepEtasResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetVehicleStepEtasResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "step_etas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.stepEtas) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stepEtas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.stepEtas, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleStepEtasResponse, rhs: Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleStepEtasResponse) -> Bool {
    if lhs.stepEtas != rhs.stepEtas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
