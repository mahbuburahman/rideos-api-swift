//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: rideos/dispatch/v3/vehicles/eta/vehicle_eta.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Rideos_Dispatch_V3_Vehicles_Eta_VehicleEtaServiceClient, then call methods of this protocol to make API calls.
public protocol Rideos_Dispatch_V3_Vehicles_Eta_VehicleEtaServiceClientProtocol: GRPCClient {
  func getVehicleEtasToPosition(
    _ request: Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleEtasToPositionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleEtasToPositionRequest, Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleEtasToPositionResponse>

  func getVehicleStepEtas(
    _ request: Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleStepEtasRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleStepEtasRequest, Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleStepEtasResponse>

}

extension Rideos_Dispatch_V3_Vehicles_Eta_VehicleEtaServiceClientProtocol {

  /// Get vehicle ETAs to position
  ///
  /// Returns the ETAs of vehicles accepting trips in a fleet to a given position. These ETAs can be used to calculate
  /// an "eyeball estimate" of how long it would take a rider to be picked up if they requested a trip. The returned
  /// ETAs are broken up by step, with an additional ETA from the last step to the given position. Vehicles that are
  /// currently servicing other trips can be returned and their ETAs will include the ETAs of these queued steps.
  /// For example, if a vehicle still needs to drive and drop off a passenger, its vehicle ETA will include
  /// [ETA of vehicle -> drop-off spot], [ETA to complete drop-off], [ETA of drop-off spot -> given position].
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVehicleEtasToPosition.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVehicleEtasToPosition(
    _ request: Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleEtasToPositionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleEtasToPositionRequest, Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleEtasToPositionResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.vehicles.eta.VehicleEtaService/GetVehicleEtasToPosition",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get vehicle step ETAs
  ///
  /// Returns the estimated duration of each step in a vehicle's plan. The vehicle plan can optionally be provided and
  /// if it is not, we will query for the latest plan for that vehicle. This endpoint can be used to calculate how
  /// long it will take for a vehicle to reach an assigned task's pickup or drop-off.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVehicleStepEtas.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVehicleStepEtas(
    _ request: Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleStepEtasRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleStepEtasRequest, Rideos_Dispatch_V3_Vehicles_Eta_GetVehicleStepEtasResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.vehicles.eta.VehicleEtaService/GetVehicleStepEtas",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Rideos_Dispatch_V3_Vehicles_Eta_VehicleEtaServiceClient: Rideos_Dispatch_V3_Vehicles_Eta_VehicleEtaServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the rideos.dispatch.v3.vehicles.eta.VehicleEtaService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

