//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: rideos/dispatch/v3/vehicles/vehicle.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Rideos_Dispatch_V3_Vehicles_VehicleServiceClient, then call methods of this protocol to make API calls.
public protocol Rideos_Dispatch_V3_Vehicles_VehicleServiceClientProtocol: GRPCClient {
  func createVehicle(
    _ request: Rideos_Dispatch_V3_Vehicles_CreateVehicleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_CreateVehicleRequest, Rideos_Dispatch_V3_Vehicles_CreateVehicleResponse>

  func getVehicle(
    _ request: Rideos_Dispatch_V3_Vehicles_GetVehicleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_GetVehicleRequest, Rideos_Dispatch_V3_Vehicles_GetVehicleResponse>

  func getVehiclesById(
    _ request: Rideos_Dispatch_V3_Vehicles_GetVehiclesByIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_GetVehiclesByIdRequest, Rideos_Dispatch_V3_Vehicles_GetVehiclesResponse>

  func getVehiclesInFleet(
    _ request: Rideos_Dispatch_V3_Vehicles_GetVehiclesInFleetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_GetVehiclesInFleetRequest, Rideos_Dispatch_V3_Vehicles_GetVehiclesResponse>

  func updateVehicle(
    _ request: Rideos_Dispatch_V3_Vehicles_UpdateVehicleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_UpdateVehicleRequest, Rideos_Dispatch_V3_Vehicles_UpdateVehicleResponse>

  func deleteVehicle(
    _ request: Rideos_Dispatch_V3_Vehicles_DeleteVehicleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_DeleteVehicleRequest, Rideos_Dispatch_V3_Vehicles_DeleteVehicleResponse>

}

extension Rideos_Dispatch_V3_Vehicles_VehicleServiceClientProtocol {

  /// Create vehicle
  ///
  /// Initialize a vehicle in a given fleet. Vehicles can have various capacities for the different types of things
  /// it can hold. For example, a vehicle that has room for 4 passengers might have a capacity
  /// { "capacityType": "seat", "value": 4 }. Additionally, vehicles can store inventory items which consist of
  /// generic resources. These items can be used to complete tasks that request generic resources.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateVehicle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createVehicle(
    _ request: Rideos_Dispatch_V3_Vehicles_CreateVehicleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_CreateVehicleRequest, Rideos_Dispatch_V3_Vehicles_CreateVehicleResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.vehicles.VehicleService/CreateVehicle",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get vehicle
  ///
  /// Get a vehicle by its vehicle ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVehicle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVehicle(
    _ request: Rideos_Dispatch_V3_Vehicles_GetVehicleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_GetVehicleRequest, Rideos_Dispatch_V3_Vehicles_GetVehicleResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.vehicles.VehicleService/GetVehicle",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get vehicles by ID
  ///
  /// Gets vehicles by list of IDs.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVehiclesById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVehiclesById(
    _ request: Rideos_Dispatch_V3_Vehicles_GetVehiclesByIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_GetVehiclesByIdRequest, Rideos_Dispatch_V3_Vehicles_GetVehiclesResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.vehicles.VehicleService/GetVehiclesById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get vehicles in fleet
  ///
  /// Get all vehicles in a given fleet.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVehiclesInFleet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVehiclesInFleet(
    _ request: Rideos_Dispatch_V3_Vehicles_GetVehiclesInFleetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_GetVehiclesInFleetRequest, Rideos_Dispatch_V3_Vehicles_GetVehiclesResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.vehicles.VehicleService/GetVehiclesInFleet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Update vehicle
  ///
  /// Updates a vehicle. At the moment, metadata and inventory are the only updates allowed to a vehicle.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateVehicle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateVehicle(
    _ request: Rideos_Dispatch_V3_Vehicles_UpdateVehicleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_UpdateVehicleRequest, Rideos_Dispatch_V3_Vehicles_UpdateVehicleResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.vehicles.VehicleService/UpdateVehicle",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete vehicle
  ///
  /// Deletes a vehicle by its vehicle ID. A vehicle cannot be deleted if it is assigned an active task.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteVehicle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteVehicle(
    _ request: Rideos_Dispatch_V3_Vehicles_DeleteVehicleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_DeleteVehicleRequest, Rideos_Dispatch_V3_Vehicles_DeleteVehicleResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.vehicles.VehicleService/DeleteVehicle",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Rideos_Dispatch_V3_Vehicles_VehicleServiceClient: Rideos_Dispatch_V3_Vehicles_VehicleServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the rideos.dispatch.v3.vehicles.VehicleService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

