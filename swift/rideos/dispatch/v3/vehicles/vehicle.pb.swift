// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rideos/dispatch/v3/vehicles/vehicle.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
// Copyright 2018-2019 rideOS, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Optional: Specify when the vehicle is expected to be active, servicing tasks.
public struct Rideos_Dispatch_V3_Vehicles_ShiftConstraint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The time the vehicle is expected to be active.
  public var expectedStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _expectedStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_expectedStartTime = newValue}
  }
  /// Returns true if `expectedStartTime` has been explicitly set.
  public var hasExpectedStartTime: Bool {return self._expectedStartTime != nil}
  /// Clears the value of `expectedStartTime`. Subsequent reads from it will return its default value.
  public mutating func clearExpectedStartTime() {self._expectedStartTime = nil}

  /// Optional. If specified, the end position will be considered when assigning tasks for this vehicle.
  public var expectedEndPosition: Rideos_Geo_V1_Position {
    get {return _expectedEndPosition ?? Rideos_Geo_V1_Position()}
    set {_expectedEndPosition = newValue}
  }
  /// Returns true if `expectedEndPosition` has been explicitly set.
  public var hasExpectedEndPosition: Bool {return self._expectedEndPosition != nil}
  /// Clears the value of `expectedEndPosition`. Subsequent reads from it will return its default value.
  public mutating func clearExpectedEndPosition() {self._expectedEndPosition = nil}

  /// Optional. After this time, the vehicle will not be considered active, and will not be assigned tasks.
  public var expectedEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _expectedEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_expectedEndTime = newValue}
  }
  /// Returns true if `expectedEndTime` has been explicitly set.
  public var hasExpectedEndTime: Bool {return self._expectedEndTime != nil}
  /// Clears the value of `expectedEndTime`. Subsequent reads from it will return its default value.
  public mutating func clearExpectedEndTime() {self._expectedEndTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _expectedStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _expectedEndPosition: Rideos_Geo_V1_Position? = nil
  fileprivate var _expectedEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Rideos_Dispatch_V3_Vehicles_Vehicle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var fleetID: String = String()

  /// A vehicle can have one or more capacity types. For example, a passenger vehicle with 4 extra seats may have
  /// the capacity type "seats" with value 4.
  public var vehicleCapacities: [Rideos_Dispatch_V3_Common_Capacity] = []

  public var inventory: Rideos_Dispatch_V3_Common_Inventory {
    get {return _inventory ?? Rideos_Dispatch_V3_Common_Inventory()}
    set {_inventory = newValue}
  }
  /// Returns true if `inventory` has been explicitly set.
  public var hasInventory: Bool {return self._inventory != nil}
  /// Clears the value of `inventory`. Subsequent reads from it will return its default value.
  public mutating func clearInventory() {self._inventory = nil}

  public var metadata: Rideos_Dispatch_V3_Common_Metadata {
    get {return _metadata ?? Rideos_Dispatch_V3_Common_Metadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var routingProfileID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _routingProfileID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_routingProfileID = newValue}
  }
  /// Returns true if `routingProfileID` has been explicitly set.
  public var hasRoutingProfileID: Bool {return self._routingProfileID != nil}
  /// Clears the value of `routingProfileID`. Subsequent reads from it will return its default value.
  public mutating func clearRoutingProfileID() {self._routingProfileID = nil}

  public var shiftConstraint: Rideos_Dispatch_V3_Vehicles_ShiftConstraint {
    get {return _shiftConstraint ?? Rideos_Dispatch_V3_Vehicles_ShiftConstraint()}
    set {_shiftConstraint = newValue}
  }
  /// Returns true if `shiftConstraint` has been explicitly set.
  public var hasShiftConstraint: Bool {return self._shiftConstraint != nil}
  /// Clears the value of `shiftConstraint`. Subsequent reads from it will return its default value.
  public mutating func clearShiftConstraint() {self._shiftConstraint = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _inventory: Rideos_Dispatch_V3_Common_Inventory? = nil
  fileprivate var _metadata: Rideos_Dispatch_V3_Common_Metadata? = nil
  fileprivate var _routingProfileID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _shiftConstraint: Rideos_Dispatch_V3_Vehicles_ShiftConstraint? = nil
}

/// Specify the initial position for the vehicle upon creation.
/// Note this field is required if a shift is specified. Otherwise it is optional.
/// Currently the vehicle may still be created if the vehicle position is invalid.
public struct Rideos_Dispatch_V3_Vehicles_InitialVehiclePosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var position: Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition {
    get {return _position ?? Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var enforceMatch: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _enforceMatch ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_enforceMatch = newValue}
  }
  /// Returns true if `enforceMatch` has been explicitly set.
  public var hasEnforceMatch: Bool {return self._enforceMatch != nil}
  /// Clears the value of `enforceMatch`. Subsequent reads from it will return its default value.
  public mutating func clearEnforceMatch() {self._enforceMatch = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _position: Rideos_Dispatch_V3_Vehicles_Position_VehiclePosition? = nil
  fileprivate var _enforceMatch: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

/// Optional: Specify the initial state of the vehicle.
/// Optimization will be triggered if the vehicle's initial state is accepting assignments.
public struct Rideos_Dispatch_V3_Vehicles_InitialVehicleState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var acceptingAssignments: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Vehicles_CreateVehicleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicle: Rideos_Dispatch_V3_Vehicles_Vehicle {
    get {return _storage._vehicle ?? Rideos_Dispatch_V3_Vehicles_Vehicle()}
    set {_uniqueStorage()._vehicle = newValue}
  }
  /// Returns true if `vehicle` has been explicitly set.
  public var hasVehicle: Bool {return _storage._vehicle != nil}
  /// Clears the value of `vehicle`. Subsequent reads from it will return its default value.
  public mutating func clearVehicle() {_uniqueStorage()._vehicle = nil}

  public var initialPosition: Rideos_Dispatch_V3_Vehicles_InitialVehiclePosition {
    get {return _storage._initialPosition ?? Rideos_Dispatch_V3_Vehicles_InitialVehiclePosition()}
    set {_uniqueStorage()._initialPosition = newValue}
  }
  /// Returns true if `initialPosition` has been explicitly set.
  public var hasInitialPosition: Bool {return _storage._initialPosition != nil}
  /// Clears the value of `initialPosition`. Subsequent reads from it will return its default value.
  public mutating func clearInitialPosition() {_uniqueStorage()._initialPosition = nil}

  public var initialVehicleState: Rideos_Dispatch_V3_Vehicles_InitialVehicleState {
    get {return _storage._initialVehicleState ?? Rideos_Dispatch_V3_Vehicles_InitialVehicleState()}
    set {_uniqueStorage()._initialVehicleState = newValue}
  }
  /// Returns true if `initialVehicleState` has been explicitly set.
  public var hasInitialVehicleState: Bool {return _storage._initialVehicleState != nil}
  /// Clears the value of `initialVehicleState`. Subsequent reads from it will return its default value.
  public mutating func clearInitialVehicleState() {_uniqueStorage()._initialVehicleState = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Rideos_Dispatch_V3_Vehicles_CreateVehicleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicle: Rideos_Dispatch_V3_Vehicles_Vehicle {
    get {return _vehicle ?? Rideos_Dispatch_V3_Vehicles_Vehicle()}
    set {_vehicle = newValue}
  }
  /// Returns true if `vehicle` has been explicitly set.
  public var hasVehicle: Bool {return self._vehicle != nil}
  /// Clears the value of `vehicle`. Subsequent reads from it will return its default value.
  public mutating func clearVehicle() {self._vehicle = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _vehicle: Rideos_Dispatch_V3_Vehicles_Vehicle? = nil
}

public struct Rideos_Dispatch_V3_Vehicles_GetVehicleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Vehicles_GetVehicleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicle: Rideos_Dispatch_V3_Vehicles_Vehicle {
    get {return _vehicle ?? Rideos_Dispatch_V3_Vehicles_Vehicle()}
    set {_vehicle = newValue}
  }
  /// Returns true if `vehicle` has been explicitly set.
  public var hasVehicle: Bool {return self._vehicle != nil}
  /// Clears the value of `vehicle`. Subsequent reads from it will return its default value.
  public mutating func clearVehicle() {self._vehicle = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _vehicle: Rideos_Dispatch_V3_Vehicles_Vehicle? = nil
}

public struct Rideos_Dispatch_V3_Vehicles_GetVehiclesByIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Vehicles_GetVehiclesInFleetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fleetID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Vehicles_GetVehiclesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicles: Dictionary<String,Rideos_Dispatch_V3_Vehicles_Vehicle> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Vehicles_UpdateVehicleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  /// Cannot update fleet_id or shift_constraint
  public var updatedMetadata: Rideos_Dispatch_V3_Common_Metadata {
    get {return _updatedMetadata ?? Rideos_Dispatch_V3_Common_Metadata()}
    set {_updatedMetadata = newValue}
  }
  /// Returns true if `updatedMetadata` has been explicitly set.
  public var hasUpdatedMetadata: Bool {return self._updatedMetadata != nil}
  /// Clears the value of `updatedMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedMetadata() {self._updatedMetadata = nil}

  public var inventoryUpdate: Rideos_Dispatch_V3_Vehicles_InventoryUpdate {
    get {return _inventoryUpdate ?? Rideos_Dispatch_V3_Vehicles_InventoryUpdate()}
    set {_inventoryUpdate = newValue}
  }
  /// Returns true if `inventoryUpdate` has been explicitly set.
  public var hasInventoryUpdate: Bool {return self._inventoryUpdate != nil}
  /// Clears the value of `inventoryUpdate`. Subsequent reads from it will return its default value.
  public mutating func clearInventoryUpdate() {self._inventoryUpdate = nil}

  /// New routing profile id to use in all of the vehicle's future plans. Warning: updating routing profile may
  /// invalidate existing vehicle plans by making some of its tasks inaccessible within time windows. Pass an empty
  /// string to clear routing profile.
  public var updatedRoutingProfileID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _updatedRoutingProfileID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_updatedRoutingProfileID = newValue}
  }
  /// Returns true if `updatedRoutingProfileID` has been explicitly set.
  public var hasUpdatedRoutingProfileID: Bool {return self._updatedRoutingProfileID != nil}
  /// Clears the value of `updatedRoutingProfileID`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedRoutingProfileID() {self._updatedRoutingProfileID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _updatedMetadata: Rideos_Dispatch_V3_Common_Metadata? = nil
  fileprivate var _inventoryUpdate: Rideos_Dispatch_V3_Vehicles_InventoryUpdate? = nil
  fileprivate var _updatedRoutingProfileID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

public struct Rideos_Dispatch_V3_Vehicles_InventoryUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var currentInventory: Rideos_Dispatch_V3_Common_Inventory {
    get {return _currentInventory ?? Rideos_Dispatch_V3_Common_Inventory()}
    set {_currentInventory = newValue}
  }
  /// Returns true if `currentInventory` has been explicitly set.
  public var hasCurrentInventory: Bool {return self._currentInventory != nil}
  /// Clears the value of `currentInventory`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentInventory() {self._currentInventory = nil}

  public var updatedInventory: Rideos_Dispatch_V3_Common_Inventory {
    get {return _updatedInventory ?? Rideos_Dispatch_V3_Common_Inventory()}
    set {_updatedInventory = newValue}
  }
  /// Returns true if `updatedInventory` has been explicitly set.
  public var hasUpdatedInventory: Bool {return self._updatedInventory != nil}
  /// Clears the value of `updatedInventory`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedInventory() {self._updatedInventory = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _currentInventory: Rideos_Dispatch_V3_Common_Inventory? = nil
  fileprivate var _updatedInventory: Rideos_Dispatch_V3_Common_Inventory? = nil
}

public struct Rideos_Dispatch_V3_Vehicles_UpdateVehicleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicle: Rideos_Dispatch_V3_Vehicles_Vehicle {
    get {return _vehicle ?? Rideos_Dispatch_V3_Vehicles_Vehicle()}
    set {_vehicle = newValue}
  }
  /// Returns true if `vehicle` has been explicitly set.
  public var hasVehicle: Bool {return self._vehicle != nil}
  /// Clears the value of `vehicle`. Subsequent reads from it will return its default value.
  public mutating func clearVehicle() {self._vehicle = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _vehicle: Rideos_Dispatch_V3_Vehicles_Vehicle? = nil
}

public struct Rideos_Dispatch_V3_Vehicles_DeleteVehicleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicleID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Vehicles_DeleteVehicleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vehicle: Rideos_Dispatch_V3_Vehicles_Vehicle {
    get {return _vehicle ?? Rideos_Dispatch_V3_Vehicles_Vehicle()}
    set {_vehicle = newValue}
  }
  /// Returns true if `vehicle` has been explicitly set.
  public var hasVehicle: Bool {return self._vehicle != nil}
  /// Clears the value of `vehicle`. Subsequent reads from it will return its default value.
  public mutating func clearVehicle() {self._vehicle = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _vehicle: Rideos_Dispatch_V3_Vehicles_Vehicle? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rideos.dispatch.v3.vehicles"

extension Rideos_Dispatch_V3_Vehicles_ShiftConstraint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShiftConstraint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "expected_start_time"),
    2: .standard(proto: "expected_end_position"),
    3: .standard(proto: "expected_end_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._expectedStartTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._expectedEndPosition) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._expectedEndTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._expectedStartTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._expectedEndPosition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._expectedEndTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_ShiftConstraint, rhs: Rideos_Dispatch_V3_Vehicles_ShiftConstraint) -> Bool {
    if lhs._expectedStartTime != rhs._expectedStartTime {return false}
    if lhs._expectedEndPosition != rhs._expectedEndPosition {return false}
    if lhs._expectedEndTime != rhs._expectedEndTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_Vehicle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Vehicle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    2: .standard(proto: "fleet_id"),
    3: .standard(proto: "vehicle_capacities"),
    4: .same(proto: "inventory"),
    7: .same(proto: "metadata"),
    9: .standard(proto: "routing_profile_id"),
    10: .standard(proto: "shift_constraint"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fleetID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.vehicleCapacities) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._inventory) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._routingProfileID) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._shiftConstraint) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    if !self.fleetID.isEmpty {
      try visitor.visitSingularStringField(value: self.fleetID, fieldNumber: 2)
    }
    if !self.vehicleCapacities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vehicleCapacities, fieldNumber: 3)
    }
    if let v = self._inventory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._routingProfileID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._shiftConstraint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_Vehicle, rhs: Rideos_Dispatch_V3_Vehicles_Vehicle) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.fleetID != rhs.fleetID {return false}
    if lhs.vehicleCapacities != rhs.vehicleCapacities {return false}
    if lhs._inventory != rhs._inventory {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs._routingProfileID != rhs._routingProfileID {return false}
    if lhs._shiftConstraint != rhs._shiftConstraint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_InitialVehiclePosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InitialVehiclePosition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .standard(proto: "enforce_match"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._enforceMatch) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._enforceMatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_InitialVehiclePosition, rhs: Rideos_Dispatch_V3_Vehicles_InitialVehiclePosition) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs._enforceMatch != rhs._enforceMatch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_InitialVehicleState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InitialVehicleState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "accepting_assignments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.acceptingAssignments) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.acceptingAssignments != false {
      try visitor.visitSingularBoolField(value: self.acceptingAssignments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_InitialVehicleState, rhs: Rideos_Dispatch_V3_Vehicles_InitialVehicleState) -> Bool {
    if lhs.acceptingAssignments != rhs.acceptingAssignments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_CreateVehicleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateVehicleRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vehicle"),
    2: .standard(proto: "initial_position"),
    3: .standard(proto: "initial_vehicle_state"),
  ]

  fileprivate class _StorageClass {
    var _vehicle: Rideos_Dispatch_V3_Vehicles_Vehicle? = nil
    var _initialPosition: Rideos_Dispatch_V3_Vehicles_InitialVehiclePosition? = nil
    var _initialVehicleState: Rideos_Dispatch_V3_Vehicles_InitialVehicleState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _vehicle = source._vehicle
      _initialPosition = source._initialPosition
      _initialVehicleState = source._initialVehicleState
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._vehicle) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._initialPosition) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._initialVehicleState) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._vehicle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._initialPosition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._initialVehicleState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_CreateVehicleRequest, rhs: Rideos_Dispatch_V3_Vehicles_CreateVehicleRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._vehicle != rhs_storage._vehicle {return false}
        if _storage._initialPosition != rhs_storage._initialPosition {return false}
        if _storage._initialVehicleState != rhs_storage._initialVehicleState {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_CreateVehicleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateVehicleResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vehicle"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._vehicle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vehicle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_CreateVehicleResponse, rhs: Rideos_Dispatch_V3_Vehicles_CreateVehicleResponse) -> Bool {
    if lhs._vehicle != rhs._vehicle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_GetVehicleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetVehicleRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_GetVehicleRequest, rhs: Rideos_Dispatch_V3_Vehicles_GetVehicleRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_GetVehicleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetVehicleResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vehicle"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._vehicle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vehicle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_GetVehicleResponse, rhs: Rideos_Dispatch_V3_Vehicles_GetVehicleResponse) -> Bool {
    if lhs._vehicle != rhs._vehicle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_GetVehiclesByIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetVehiclesByIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.vehicleIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.vehicleIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_GetVehiclesByIdRequest, rhs: Rideos_Dispatch_V3_Vehicles_GetVehiclesByIdRequest) -> Bool {
    if lhs.vehicleIds != rhs.vehicleIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_GetVehiclesInFleetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetVehiclesInFleetRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fleet_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fleetID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fleetID.isEmpty {
      try visitor.visitSingularStringField(value: self.fleetID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_GetVehiclesInFleetRequest, rhs: Rideos_Dispatch_V3_Vehicles_GetVehiclesInFleetRequest) -> Bool {
    if lhs.fleetID != rhs.fleetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_GetVehiclesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetVehiclesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vehicles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Rideos_Dispatch_V3_Vehicles_Vehicle>.self, value: &self.vehicles) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicles.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Rideos_Dispatch_V3_Vehicles_Vehicle>.self, value: self.vehicles, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_GetVehiclesResponse, rhs: Rideos_Dispatch_V3_Vehicles_GetVehiclesResponse) -> Bool {
    if lhs.vehicles != rhs.vehicles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_UpdateVehicleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateVehicleRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
    4: .standard(proto: "updated_metadata"),
    5: .standard(proto: "inventory_update"),
    6: .standard(proto: "updated_routing_profile_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._updatedMetadata) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._inventoryUpdate) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._updatedRoutingProfileID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    if let v = self._updatedMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._inventoryUpdate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._updatedRoutingProfileID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_UpdateVehicleRequest, rhs: Rideos_Dispatch_V3_Vehicles_UpdateVehicleRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs._updatedMetadata != rhs._updatedMetadata {return false}
    if lhs._inventoryUpdate != rhs._inventoryUpdate {return false}
    if lhs._updatedRoutingProfileID != rhs._updatedRoutingProfileID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_InventoryUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InventoryUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_inventory"),
    2: .standard(proto: "updated_inventory"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._currentInventory) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updatedInventory) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._currentInventory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._updatedInventory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_InventoryUpdate, rhs: Rideos_Dispatch_V3_Vehicles_InventoryUpdate) -> Bool {
    if lhs._currentInventory != rhs._currentInventory {return false}
    if lhs._updatedInventory != rhs._updatedInventory {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_UpdateVehicleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateVehicleResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vehicle"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._vehicle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vehicle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_UpdateVehicleResponse, rhs: Rideos_Dispatch_V3_Vehicles_UpdateVehicleResponse) -> Bool {
    if lhs._vehicle != rhs._vehicle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_DeleteVehicleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteVehicleRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vehicle_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_DeleteVehicleRequest, rhs: Rideos_Dispatch_V3_Vehicles_DeleteVehicleRequest) -> Bool {
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Vehicles_DeleteVehicleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteVehicleResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vehicle"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._vehicle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vehicle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Vehicles_DeleteVehicleResponse, rhs: Rideos_Dispatch_V3_Vehicles_DeleteVehicleResponse) -> Bool {
    if lhs._vehicle != rhs._vehicle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
