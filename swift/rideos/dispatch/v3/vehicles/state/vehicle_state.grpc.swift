//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: rideos/dispatch/v3/vehicles/state/vehicle_state.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Rideos_Dispatch_V3_Vehicles_State_VehicleStateServiceClient, then call methods of this protocol to make API calls.
public protocol Rideos_Dispatch_V3_Vehicles_State_VehicleStateServiceClientProtocol: GRPCClient {
  func getVehicleState(
    _ request: Rideos_Dispatch_V3_Vehicles_State_GetVehicleStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_State_GetVehicleStateRequest, Rideos_Dispatch_V3_Vehicles_State_GetVehicleStateResponse>

  func getVehicleStatesById(
    _ request: Rideos_Dispatch_V3_Vehicles_State_GetVehicleStatesByIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_State_GetVehicleStatesByIdRequest, Rideos_Dispatch_V3_Vehicles_State_GetVehicleStatesResponse>

  func getAssignableVehicleStates(
    _ request: Rideos_Dispatch_V3_Vehicles_State_GetAssignableVehicleStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_State_GetAssignableVehicleStatesRequest, Rideos_Dispatch_V3_Vehicles_State_GetVehicleStatesResponse>

  func updateVehicleState(
    _ request: Rideos_Dispatch_V3_Vehicles_State_UpdateVehicleStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_State_UpdateVehicleStateRequest, Rideos_Dispatch_V3_Vehicles_State_UpdateVehicleStateResponse>

}

extension Rideos_Dispatch_V3_Vehicles_State_VehicleStateServiceClientProtocol {

  /// Get vehicle state
  ///
  /// Retrieves a vehicle's current state. The response will include the vehicle's assigned tasks and whether or not
  /// the vehicle is accepting assignments.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVehicleState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVehicleState(
    _ request: Rideos_Dispatch_V3_Vehicles_State_GetVehicleStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_State_GetVehicleStateRequest, Rideos_Dispatch_V3_Vehicles_State_GetVehicleStateResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.vehicles.state.VehicleStateService/GetVehicleState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get vehicle states by ID
  ///
  /// Retrieves a one or more vehicle states by their vehicle IDs
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVehicleStatesById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVehicleStatesById(
    _ request: Rideos_Dispatch_V3_Vehicles_State_GetVehicleStatesByIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_State_GetVehicleStatesByIdRequest, Rideos_Dispatch_V3_Vehicles_State_GetVehicleStatesResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.vehicles.state.VehicleStateService/GetVehicleStatesById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get assignable vehicle states
  ///
  /// Retrieves all vehicle states in a given fleet that are accepting new assignments. This means that the vehicle
  /// can be assigned new tasks to its plan.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAssignableVehicleStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAssignableVehicleStates(
    _ request: Rideos_Dispatch_V3_Vehicles_State_GetAssignableVehicleStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_State_GetAssignableVehicleStatesRequest, Rideos_Dispatch_V3_Vehicles_State_GetVehicleStatesResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.vehicles.state.VehicleStateService/GetAssignableVehicleStates",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Update vehicle state
  ///
  /// Update a vehicle's state. Currently, only updating whether or not the vehicle is accepting assignments is allowed.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateVehicleState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateVehicleState(
    _ request: Rideos_Dispatch_V3_Vehicles_State_UpdateVehicleStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Vehicles_State_UpdateVehicleStateRequest, Rideos_Dispatch_V3_Vehicles_State_UpdateVehicleStateResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.vehicles.state.VehicleStateService/UpdateVehicleState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Rideos_Dispatch_V3_Vehicles_State_VehicleStateServiceClient: Rideos_Dispatch_V3_Vehicles_State_VehicleStateServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the rideos.dispatch.v3.vehicles.state.VehicleStateService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

