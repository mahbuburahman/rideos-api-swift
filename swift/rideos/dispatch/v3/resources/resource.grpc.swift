//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: rideos/dispatch/v3/resources/resource.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Rideos_Dispatch_V3_Resources_ResourceServiceClient, then call methods of this protocol to make API calls.
public protocol Rideos_Dispatch_V3_Resources_ResourceServiceClientProtocol: GRPCClient {
  func createGenericResource(
    _ request: Rideos_Dispatch_V3_Resources_CreateGenericResourceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Resources_CreateGenericResourceRequest, Rideos_Dispatch_V3_Resources_CreateGenericResourceResponse>

  func getGenericResource(
    _ request: Rideos_Dispatch_V3_Resources_GetGenericResourceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Resources_GetGenericResourceRequest, Rideos_Dispatch_V3_Resources_GetGenericResourceResponse>

  func getGenericResourcesById(
    _ request: Rideos_Dispatch_V3_Resources_GetGenericResourcesByIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Resources_GetGenericResourcesByIdRequest, Rideos_Dispatch_V3_Resources_GetGenericResourcesResponse>

  func getAllGenericResources(
    _ request: Rideos_Dispatch_V3_Resources_GetAllGenericResourcesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Resources_GetAllGenericResourcesRequest, Rideos_Dispatch_V3_Resources_GetGenericResourcesResponse>

}

extension Rideos_Dispatch_V3_Resources_ResourceServiceClientProtocol {

  /// Create generic resource
  ///
  /// Creates a generic resource. A generic resource can be used when the items are interchangeable. This means any
  /// vehicle with this resource can fulfill an order. Generic resources are pre-added to inventory. Metadata can be
  /// included and the capacities of the resource can be defined (e.g. 4 seats, 8 boxes, 15 kg).
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGenericResource.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createGenericResource(
    _ request: Rideos_Dispatch_V3_Resources_CreateGenericResourceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Resources_CreateGenericResourceRequest, Rideos_Dispatch_V3_Resources_CreateGenericResourceResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.resources.ResourceService/CreateGenericResource",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get generic resource
  ///
  /// Gets a generic resource by the resource ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetGenericResource.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getGenericResource(
    _ request: Rideos_Dispatch_V3_Resources_GetGenericResourceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Resources_GetGenericResourceRequest, Rideos_Dispatch_V3_Resources_GetGenericResourceResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.resources.ResourceService/GetGenericResource",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get generic resources by id
  ///
  /// Gets a map of generic resources by their IDs.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetGenericResourcesById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getGenericResourcesById(
    _ request: Rideos_Dispatch_V3_Resources_GetGenericResourcesByIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Resources_GetGenericResourcesByIdRequest, Rideos_Dispatch_V3_Resources_GetGenericResourcesResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.resources.ResourceService/GetGenericResourcesById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get all generic resources
  ///
  /// Gets all the generic resources that have been created for an account.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllGenericResources.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAllGenericResources(
    _ request: Rideos_Dispatch_V3_Resources_GetAllGenericResourcesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Resources_GetAllGenericResourcesRequest, Rideos_Dispatch_V3_Resources_GetGenericResourcesResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.resources.ResourceService/GetAllGenericResources",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Rideos_Dispatch_V3_Resources_ResourceServiceClient: Rideos_Dispatch_V3_Resources_ResourceServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the rideos.dispatch.v3.resources.ResourceService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

