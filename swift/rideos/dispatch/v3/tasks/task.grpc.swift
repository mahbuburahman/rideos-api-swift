//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: rideos/dispatch/v3/tasks/task.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Rideos_Dispatch_V3_Tasks_TaskServiceClient, then call methods of this protocol to make API calls.
public protocol Rideos_Dispatch_V3_Tasks_TaskServiceClientProtocol: GRPCClient {
  func createTask(
    _ request: Rideos_Dispatch_V3_Tasks_CreateTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_CreateTaskRequest, Rideos_Dispatch_V3_Tasks_CreateTaskResponse>

  func getTask(
    _ request: Rideos_Dispatch_V3_Tasks_GetTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_GetTaskRequest, Rideos_Dispatch_V3_Tasks_GetTaskResponse>

  func getTasksById(
    _ request: Rideos_Dispatch_V3_Tasks_GetTasksByIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_GetTasksByIdRequest, Rideos_Dispatch_V3_Tasks_GetTasksResponse>

  func getTasksByTime(
    _ request: Rideos_Dispatch_V3_Tasks_GetTasksByTimeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_GetTasksByTimeRequest, Rideos_Dispatch_V3_Tasks_GetTasksResponse>

  func getTasksByCreationTime(
    _ request: Rideos_Dispatch_V3_Tasks_GetTasksByCreationTimeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_GetTasksByCreationTimeRequest, Rideos_Dispatch_V3_Tasks_GetTasksResponse>

  func updateTask(
    _ request: Rideos_Dispatch_V3_Tasks_UpdateTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_UpdateTaskRequest, Rideos_Dispatch_V3_Tasks_UpdateTaskResponse>

  func cancelTask(
    _ request: Rideos_Dispatch_V3_Tasks_CancelTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_CancelTaskRequest, Rideos_Dispatch_V3_Tasks_CancelTaskResponse>

  func rejectTask(
    _ request: Rideos_Dispatch_V3_Tasks_RejectTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_RejectTaskRequest, Rideos_Dispatch_V3_Tasks_RejectTaskResponse>

  func unassignTask(
    _ request: Rideos_Dispatch_V3_Tasks_UnassignTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_UnassignTaskRequest, Rideos_Dispatch_V3_Tasks_UnassignTaskResponse>

  func completeSteps(
    _ request: Rideos_Dispatch_V3_Tasks_CompleteStepsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_CompleteStepsRequest, Rideos_Dispatch_V3_Tasks_CompleteStepsResponse>

  func getTasksByRider(
    _ request: Rideos_Dispatch_V3_Tasks_GetTasksByRiderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_GetTasksByRiderRequest, Rideos_Dispatch_V3_Tasks_GetTasksResponse>

  func replaceTask(
    _ request: Rideos_Dispatch_V3_Tasks_ReplaceTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_ReplaceTaskRequest, Rideos_Dispatch_V3_Tasks_ReplaceTaskResponse>

}

extension Rideos_Dispatch_V3_Tasks_TaskServiceClientProtocol {

  /// Create task
  ///
  /// Creates and returns a new task that can only be completed by the vehicles in the fleet ID provided. Metadata can
  /// be included  in the task. Dispatch parameters such as pickup and dropoff time windows can be set to ensure the
  /// task is completed by a certain time. A list of allowable vehicles to complete the task can also be provided.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createTask(
    _ request: Rideos_Dispatch_V3_Tasks_CreateTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_CreateTaskRequest, Rideos_Dispatch_V3_Tasks_CreateTaskResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.tasks.TaskService/CreateTask",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get task
  ///
  /// Gets a task by its task ID. This returns the current state of the task as well, including the step completion
  /// state and vehicle assignment.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTask(
    _ request: Rideos_Dispatch_V3_Tasks_GetTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_GetTaskRequest, Rideos_Dispatch_V3_Tasks_GetTaskResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.tasks.TaskService/GetTask",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get tasks by ID
  ///
  /// Gets a map of tasks by their IDs.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTasksById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTasksById(
    _ request: Rideos_Dispatch_V3_Tasks_GetTasksByIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_GetTasksByIdRequest, Rideos_Dispatch_V3_Tasks_GetTasksResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.tasks.TaskService/GetTasksById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get tasks by time
  ///
  /// Gets tasks by their creation and completion times. To get all active tasks, simply exclude the `terminated_after`
  /// and `created_before` fields, which will default both of these fields to now.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTasksByTime.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTasksByTime(
    _ request: Rideos_Dispatch_V3_Tasks_GetTasksByTimeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_GetTasksByTimeRequest, Rideos_Dispatch_V3_Tasks_GetTasksResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.tasks.TaskService/GetTasksByTime",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Hidden: only used by our internal metrics
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTasksByCreationTime.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTasksByCreationTime(
    _ request: Rideos_Dispatch_V3_Tasks_GetTasksByCreationTimeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_GetTasksByCreationTimeRequest, Rideos_Dispatch_V3_Tasks_GetTasksResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.tasks.TaskService/GetTasksByCreationTime",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Update task
  ///
  /// Updates a task by its task ID. Updating the task metadata is the only update currently supported.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateTask(
    _ request: Rideos_Dispatch_V3_Tasks_UpdateTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_UpdateTaskRequest, Rideos_Dispatch_V3_Tasks_UpdateTaskResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.tasks.TaskService/UpdateTask",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Cancel task
  ///
  /// Cancels a task by its task ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cancelTask(
    _ request: Rideos_Dispatch_V3_Tasks_CancelTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_CancelTaskRequest, Rideos_Dispatch_V3_Tasks_CancelTaskResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.tasks.TaskService/CancelTask",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Reject task
  ///
  /// Unassign the task from the rejecting vehicle. The task will be reassigned automatically, but never to the
  /// vehicle that rejected it.
  ///
  /// - Parameters:
  ///   - request: Request to send to RejectTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func rejectTask(
    _ request: Rideos_Dispatch_V3_Tasks_RejectTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_RejectTaskRequest, Rideos_Dispatch_V3_Tasks_RejectTaskResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.tasks.TaskService/RejectTask",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unassign task
  ///
  /// The task will be reassigned to a vehicle to a vehicle that is accepting rides.
  /// If the given vehicle is still accepting rides, the task may be assigned back to the same vehicle.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnassignTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func unassignTask(
    _ request: Rideos_Dispatch_V3_Tasks_UnassignTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_UnassignTaskRequest, Rideos_Dispatch_V3_Tasks_UnassignTaskResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.tasks.TaskService/UnassignTask",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Complete steps
  ///
  /// Completes one or more steps in a task by the task ID and given step IDs.
  ///
  /// - Parameters:
  ///   - request: Request to send to CompleteSteps.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func completeSteps(
    _ request: Rideos_Dispatch_V3_Tasks_CompleteStepsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_CompleteStepsRequest, Rideos_Dispatch_V3_Tasks_CompleteStepsResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.tasks.TaskService/CompleteSteps",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to GetTasksByRider
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTasksByRider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTasksByRider(
    _ request: Rideos_Dispatch_V3_Tasks_GetTasksByRiderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_GetTasksByRiderRequest, Rideos_Dispatch_V3_Tasks_GetTasksResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.tasks.TaskService/GetTasksByRider",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to ReplaceTask
  ///
  /// - Parameters:
  ///   - request: Request to send to ReplaceTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func replaceTask(
    _ request: Rideos_Dispatch_V3_Tasks_ReplaceTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Tasks_ReplaceTaskRequest, Rideos_Dispatch_V3_Tasks_ReplaceTaskResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.tasks.TaskService/ReplaceTask",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Rideos_Dispatch_V3_Tasks_TaskServiceClient: Rideos_Dispatch_V3_Tasks_TaskServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the rideos.dispatch.v3.tasks.TaskService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

