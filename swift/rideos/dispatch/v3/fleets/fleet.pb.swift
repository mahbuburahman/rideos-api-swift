// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rideos/dispatch/v3/fleets/fleet.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
// Copyright 2018-2019 rideOS, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Rideos_Dispatch_V3_Fleets_Fleet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fleetID: String = String()

  public var displayName: String = String()

  public var metadata: Rideos_Dispatch_V3_Common_Metadata {
    get {return _metadata ?? Rideos_Dispatch_V3_Common_Metadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var optimizationSettings: Rideos_Dispatch_V3_Fleets_FleetOptimizationSettings {
    get {return _optimizationSettings ?? Rideos_Dispatch_V3_Fleets_FleetOptimizationSettings()}
    set {_optimizationSettings = newValue}
  }
  /// Returns true if `optimizationSettings` has been explicitly set.
  public var hasOptimizationSettings: Bool {return self._optimizationSettings != nil}
  /// Clears the value of `optimizationSettings`. Subsequent reads from it will return its default value.
  public mutating func clearOptimizationSettings() {self._optimizationSettings = nil}

  public var routingProfileID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _routingProfileID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_routingProfileID = newValue}
  }
  /// Returns true if `routingProfileID` has been explicitly set.
  public var hasRoutingProfileID: Bool {return self._routingProfileID != nil}
  /// Clears the value of `routingProfileID`. Subsequent reads from it will return its default value.
  public mutating func clearRoutingProfileID() {self._routingProfileID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metadata: Rideos_Dispatch_V3_Common_Metadata? = nil
  fileprivate var _optimizationSettings: Rideos_Dispatch_V3_Fleets_FleetOptimizationSettings? = nil
  fileprivate var _routingProfileID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

public struct Rideos_Dispatch_V3_Fleets_FleetOptimizationSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Set to true to force all tasks to be private
  public var forcePrivateRides: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._forcePrivateRides ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._forcePrivateRides = newValue}
  }
  /// Returns true if `forcePrivateRides` has been explicitly set.
  public var hasForcePrivateRides: Bool {return _storage._forcePrivateRides != nil}
  /// Clears the value of `forcePrivateRides`. Subsequent reads from it will return its default value.
  public mutating func clearForcePrivateRides() {_uniqueStorage()._forcePrivateRides = nil}

  /// Optional. Set to true to allow tasks to be reassigned to a different vehicle before being picked up
  public var enableVehicleReassignment: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._enableVehicleReassignment ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._enableVehicleReassignment = newValue}
  }
  /// Returns true if `enableVehicleReassignment` has been explicitly set.
  public var hasEnableVehicleReassignment: Bool {return _storage._enableVehicleReassignment != nil}
  /// Clears the value of `enableVehicleReassignment`. Subsequent reads from it will return its default value.
  public mutating func clearEnableVehicleReassignment() {_uniqueStorage()._enableVehicleReassignment = nil}

  /// Optional. Set the expected time that the `LOAD_RESOURCE` step will take for vehicles
  public var expectedPickupServiceTimeDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._expectedPickupServiceTimeDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._expectedPickupServiceTimeDuration = newValue}
  }
  /// Returns true if `expectedPickupServiceTimeDuration` has been explicitly set.
  public var hasExpectedPickupServiceTimeDuration: Bool {return _storage._expectedPickupServiceTimeDuration != nil}
  /// Clears the value of `expectedPickupServiceTimeDuration`. Subsequent reads from it will return its default value.
  public mutating func clearExpectedPickupServiceTimeDuration() {_uniqueStorage()._expectedPickupServiceTimeDuration = nil}

  /// Optional. Set the expected time that the `UNLOAD_RESOURCE` step will take for vehicles
  public var expectedDropoffServiceTimeDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._expectedDropoffServiceTimeDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._expectedDropoffServiceTimeDuration = newValue}
  }
  /// Returns true if `expectedDropoffServiceTimeDuration` has been explicitly set.
  public var hasExpectedDropoffServiceTimeDuration: Bool {return _storage._expectedDropoffServiceTimeDuration != nil}
  /// Clears the value of `expectedDropoffServiceTimeDuration`. Subsequent reads from it will return its default value.
  public mutating func clearExpectedDropoffServiceTimeDuration() {_uniqueStorage()._expectedDropoffServiceTimeDuration = nil}

  public var requiredPickupTimeWindow: Rideos_Dispatch_V3_Fleets_RelativeTimeWindow {
    get {return _storage._requiredPickupTimeWindow ?? Rideos_Dispatch_V3_Fleets_RelativeTimeWindow()}
    set {_uniqueStorage()._requiredPickupTimeWindow = newValue}
  }
  /// Returns true if `requiredPickupTimeWindow` has been explicitly set.
  public var hasRequiredPickupTimeWindow: Bool {return _storage._requiredPickupTimeWindow != nil}
  /// Clears the value of `requiredPickupTimeWindow`. Subsequent reads from it will return its default value.
  public mutating func clearRequiredPickupTimeWindow() {_uniqueStorage()._requiredPickupTimeWindow = nil}

  public var requiredDropoffTimeWindow: Rideos_Dispatch_V3_Fleets_RelativeTimeWindow {
    get {return _storage._requiredDropoffTimeWindow ?? Rideos_Dispatch_V3_Fleets_RelativeTimeWindow()}
    set {_uniqueStorage()._requiredDropoffTimeWindow = newValue}
  }
  /// Returns true if `requiredDropoffTimeWindow` has been explicitly set.
  public var hasRequiredDropoffTimeWindow: Bool {return _storage._requiredDropoffTimeWindow != nil}
  /// Clears the value of `requiredDropoffTimeWindow`. Subsequent reads from it will return its default value.
  public mutating func clearRequiredDropoffTimeWindow() {_uniqueStorage()._requiredDropoffTimeWindow = nil}

  public var vehicleReassignmentConfiguration: Rideos_FleetPlannerCommons_VehicleReassignmentConfiguration {
    get {return _storage._vehicleReassignmentConfiguration ?? Rideos_FleetPlannerCommons_VehicleReassignmentConfiguration()}
    set {_uniqueStorage()._vehicleReassignmentConfiguration = newValue}
  }
  /// Returns true if `vehicleReassignmentConfiguration` has been explicitly set.
  public var hasVehicleReassignmentConfiguration: Bool {return _storage._vehicleReassignmentConfiguration != nil}
  /// Clears the value of `vehicleReassignmentConfiguration`. Subsequent reads from it will return its default value.
  public mutating func clearVehicleReassignmentConfiguration() {_uniqueStorage()._vehicleReassignmentConfiguration = nil}

  public var optimizationProfile: Rideos_Dispatch_V3_Fleets_OptimizationProfileWrapper {
    get {return _storage._optimizationProfile ?? Rideos_Dispatch_V3_Fleets_OptimizationProfileWrapper()}
    set {_uniqueStorage()._optimizationProfile = newValue}
  }
  /// Returns true if `optimizationProfile` has been explicitly set.
  public var hasOptimizationProfile: Bool {return _storage._optimizationProfile != nil}
  /// Clears the value of `optimizationProfile`. Subsequent reads from it will return its default value.
  public mutating func clearOptimizationProfile() {_uniqueStorage()._optimizationProfile = nil}

  public var allowOutOfBoundsAssignments: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._allowOutOfBoundsAssignments ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._allowOutOfBoundsAssignments = newValue}
  }
  /// Returns true if `allowOutOfBoundsAssignments` has been explicitly set.
  public var hasAllowOutOfBoundsAssignments: Bool {return _storage._allowOutOfBoundsAssignments != nil}
  /// Clears the value of `allowOutOfBoundsAssignments`. Subsequent reads from it will return its default value.
  public mutating func clearAllowOutOfBoundsAssignments() {_uniqueStorage()._allowOutOfBoundsAssignments = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Optional. Set to override what costs we consider when optimizing the fleet.
public struct Rideos_Dispatch_V3_Fleets_OptimizationProfileWrapper {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Rideos_FleetPlannerCommons_OptimizationProfile = .default

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Optional. Set the time window relative to task creation that a resource must be picked up/dropped off after and before.
/// This will be overwritten if specified by a specific task in the dispatch parameters.
public struct Rideos_Dispatch_V3_Fleets_RelativeTimeWindow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var earliestRelativeTime: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _earliestRelativeTime ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_earliestRelativeTime = newValue}
  }
  /// Returns true if `earliestRelativeTime` has been explicitly set.
  public var hasEarliestRelativeTime: Bool {return self._earliestRelativeTime != nil}
  /// Clears the value of `earliestRelativeTime`. Subsequent reads from it will return its default value.
  public mutating func clearEarliestRelativeTime() {self._earliestRelativeTime = nil}

  public var latestRelativeTime: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _latestRelativeTime ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_latestRelativeTime = newValue}
  }
  /// Returns true if `latestRelativeTime` has been explicitly set.
  public var hasLatestRelativeTime: Bool {return self._latestRelativeTime != nil}
  /// Clears the value of `latestRelativeTime`. Subsequent reads from it will return its default value.
  public mutating func clearLatestRelativeTime() {self._latestRelativeTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _earliestRelativeTime: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _latestRelativeTime: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

public struct Rideos_Dispatch_V3_Fleets_CreateFleetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fleet: Rideos_Dispatch_V3_Fleets_Fleet {
    get {return _fleet ?? Rideos_Dispatch_V3_Fleets_Fleet()}
    set {_fleet = newValue}
  }
  /// Returns true if `fleet` has been explicitly set.
  public var hasFleet: Bool {return self._fleet != nil}
  /// Clears the value of `fleet`. Subsequent reads from it will return its default value.
  public mutating func clearFleet() {self._fleet = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _fleet: Rideos_Dispatch_V3_Fleets_Fleet? = nil
}

public struct Rideos_Dispatch_V3_Fleets_CreateFleetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fleet: Rideos_Dispatch_V3_Fleets_Fleet {
    get {return _fleet ?? Rideos_Dispatch_V3_Fleets_Fleet()}
    set {_fleet = newValue}
  }
  /// Returns true if `fleet` has been explicitly set.
  public var hasFleet: Bool {return self._fleet != nil}
  /// Clears the value of `fleet`. Subsequent reads from it will return its default value.
  public mutating func clearFleet() {self._fleet = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _fleet: Rideos_Dispatch_V3_Fleets_Fleet? = nil
}

public struct Rideos_Dispatch_V3_Fleets_GetFleetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The fleet identifier used when creating a fleet via CreateFleet
  public var fleetID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Fleets_GetFleetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fleet: Rideos_Dispatch_V3_Fleets_Fleet {
    get {return _fleet ?? Rideos_Dispatch_V3_Fleets_Fleet()}
    set {_fleet = newValue}
  }
  /// Returns true if `fleet` has been explicitly set.
  public var hasFleet: Bool {return self._fleet != nil}
  /// Clears the value of `fleet`. Subsequent reads from it will return its default value.
  public mutating func clearFleet() {self._fleet = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _fleet: Rideos_Dispatch_V3_Fleets_Fleet? = nil
}

public struct Rideos_Dispatch_V3_Fleets_GetAllFleetsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Fleets_GetAllFleetsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Map of fleetId as key and Fleet object as value.
  public var fleets: Dictionary<String,Rideos_Dispatch_V3_Fleets_Fleet> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Fleets_UpdateFleetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fleetID: String = String()

  public var updatedDisplayName: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _updatedDisplayName ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_updatedDisplayName = newValue}
  }
  /// Returns true if `updatedDisplayName` has been explicitly set.
  public var hasUpdatedDisplayName: Bool {return self._updatedDisplayName != nil}
  /// Clears the value of `updatedDisplayName`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedDisplayName() {self._updatedDisplayName = nil}

  public var updatedMetadata: Rideos_Dispatch_V3_Common_Metadata {
    get {return _updatedMetadata ?? Rideos_Dispatch_V3_Common_Metadata()}
    set {_updatedMetadata = newValue}
  }
  /// Returns true if `updatedMetadata` has been explicitly set.
  public var hasUpdatedMetadata: Bool {return self._updatedMetadata != nil}
  /// Clears the value of `updatedMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedMetadata() {self._updatedMetadata = nil}

  public var updatedOptimizationSettings: Rideos_Dispatch_V3_Fleets_FleetOptimizationSettings {
    get {return _updatedOptimizationSettings ?? Rideos_Dispatch_V3_Fleets_FleetOptimizationSettings()}
    set {_updatedOptimizationSettings = newValue}
  }
  /// Returns true if `updatedOptimizationSettings` has been explicitly set.
  public var hasUpdatedOptimizationSettings: Bool {return self._updatedOptimizationSettings != nil}
  /// Clears the value of `updatedOptimizationSettings`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedOptimizationSettings() {self._updatedOptimizationSettings = nil}

  /// New routing profile id to use as the fleet's default. Warning: updating routing profile may invalidate existing
  /// vehicle plans by making some of its tasks inaccessible within time windows. Pass an empty string to clear routing
  /// profile.
  public var updatedRoutingProfileID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _updatedRoutingProfileID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_updatedRoutingProfileID = newValue}
  }
  /// Returns true if `updatedRoutingProfileID` has been explicitly set.
  public var hasUpdatedRoutingProfileID: Bool {return self._updatedRoutingProfileID != nil}
  /// Clears the value of `updatedRoutingProfileID`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedRoutingProfileID() {self._updatedRoutingProfileID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _updatedDisplayName: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _updatedMetadata: Rideos_Dispatch_V3_Common_Metadata? = nil
  fileprivate var _updatedOptimizationSettings: Rideos_Dispatch_V3_Fleets_FleetOptimizationSettings? = nil
  fileprivate var _updatedRoutingProfileID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

public struct Rideos_Dispatch_V3_Fleets_UpdateFleetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fleet: Rideos_Dispatch_V3_Fleets_Fleet {
    get {return _fleet ?? Rideos_Dispatch_V3_Fleets_Fleet()}
    set {_fleet = newValue}
  }
  /// Returns true if `fleet` has been explicitly set.
  public var hasFleet: Bool {return self._fleet != nil}
  /// Clears the value of `fleet`. Subsequent reads from it will return its default value.
  public mutating func clearFleet() {self._fleet = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _fleet: Rideos_Dispatch_V3_Fleets_Fleet? = nil
}

public struct Rideos_Dispatch_V3_Fleets_DeleteFleetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fleetID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Fleets_DeleteFleetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fleet: Rideos_Dispatch_V3_Fleets_Fleet {
    get {return _fleet ?? Rideos_Dispatch_V3_Fleets_Fleet()}
    set {_fleet = newValue}
  }
  /// Returns true if `fleet` has been explicitly set.
  public var hasFleet: Bool {return self._fleet != nil}
  /// Clears the value of `fleet`. Subsequent reads from it will return its default value.
  public mutating func clearFleet() {self._fleet = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _fleet: Rideos_Dispatch_V3_Fleets_Fleet? = nil
}

public struct Rideos_Dispatch_V3_Fleets_TriggerOptimizationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fleetID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rideos_Dispatch_V3_Fleets_TriggerOptimizationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rideos.dispatch.v3.fleets"

extension Rideos_Dispatch_V3_Fleets_Fleet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Fleet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fleet_id"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "metadata"),
    4: .standard(proto: "optimization_settings"),
    5: .standard(proto: "routing_profile_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fleetID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._optimizationSettings) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._routingProfileID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fleetID.isEmpty {
      try visitor.visitSingularStringField(value: self.fleetID, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._optimizationSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._routingProfileID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_Fleet, rhs: Rideos_Dispatch_V3_Fleets_Fleet) -> Bool {
    if lhs.fleetID != rhs.fleetID {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs._optimizationSettings != rhs._optimizationSettings {return false}
    if lhs._routingProfileID != rhs._routingProfileID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Fleets_FleetOptimizationSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FleetOptimizationSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "force_private_rides"),
    2: .standard(proto: "enable_vehicle_reassignment"),
    6: .standard(proto: "expected_pickup_service_time_duration"),
    3: .standard(proto: "expected_dropoff_service_time_duration"),
    4: .standard(proto: "required_pickup_time_window"),
    8: .standard(proto: "required_dropoff_time_window"),
    5: .standard(proto: "vehicle_reassignment_configuration"),
    7: .standard(proto: "optimization_profile"),
    9: .standard(proto: "allow_out_of_bounds_assignments"),
  ]

  fileprivate class _StorageClass {
    var _forcePrivateRides: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _enableVehicleReassignment: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _expectedPickupServiceTimeDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _expectedDropoffServiceTimeDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _requiredPickupTimeWindow: Rideos_Dispatch_V3_Fleets_RelativeTimeWindow? = nil
    var _requiredDropoffTimeWindow: Rideos_Dispatch_V3_Fleets_RelativeTimeWindow? = nil
    var _vehicleReassignmentConfiguration: Rideos_FleetPlannerCommons_VehicleReassignmentConfiguration? = nil
    var _optimizationProfile: Rideos_Dispatch_V3_Fleets_OptimizationProfileWrapper? = nil
    var _allowOutOfBoundsAssignments: SwiftProtobuf.Google_Protobuf_BoolValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _forcePrivateRides = source._forcePrivateRides
      _enableVehicleReassignment = source._enableVehicleReassignment
      _expectedPickupServiceTimeDuration = source._expectedPickupServiceTimeDuration
      _expectedDropoffServiceTimeDuration = source._expectedDropoffServiceTimeDuration
      _requiredPickupTimeWindow = source._requiredPickupTimeWindow
      _requiredDropoffTimeWindow = source._requiredDropoffTimeWindow
      _vehicleReassignmentConfiguration = source._vehicleReassignmentConfiguration
      _optimizationProfile = source._optimizationProfile
      _allowOutOfBoundsAssignments = source._allowOutOfBoundsAssignments
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._forcePrivateRides) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._enableVehicleReassignment) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._expectedDropoffServiceTimeDuration) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._requiredPickupTimeWindow) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._vehicleReassignmentConfiguration) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._expectedPickupServiceTimeDuration) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._optimizationProfile) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._requiredDropoffTimeWindow) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._allowOutOfBoundsAssignments) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._forcePrivateRides {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._enableVehicleReassignment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._expectedDropoffServiceTimeDuration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._requiredPickupTimeWindow {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._vehicleReassignmentConfiguration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._expectedPickupServiceTimeDuration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._optimizationProfile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._requiredDropoffTimeWindow {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._allowOutOfBoundsAssignments {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_FleetOptimizationSettings, rhs: Rideos_Dispatch_V3_Fleets_FleetOptimizationSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._forcePrivateRides != rhs_storage._forcePrivateRides {return false}
        if _storage._enableVehicleReassignment != rhs_storage._enableVehicleReassignment {return false}
        if _storage._expectedPickupServiceTimeDuration != rhs_storage._expectedPickupServiceTimeDuration {return false}
        if _storage._expectedDropoffServiceTimeDuration != rhs_storage._expectedDropoffServiceTimeDuration {return false}
        if _storage._requiredPickupTimeWindow != rhs_storage._requiredPickupTimeWindow {return false}
        if _storage._requiredDropoffTimeWindow != rhs_storage._requiredDropoffTimeWindow {return false}
        if _storage._vehicleReassignmentConfiguration != rhs_storage._vehicleReassignmentConfiguration {return false}
        if _storage._optimizationProfile != rhs_storage._optimizationProfile {return false}
        if _storage._allowOutOfBoundsAssignments != rhs_storage._allowOutOfBoundsAssignments {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Fleets_OptimizationProfileWrapper: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OptimizationProfileWrapper"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    7: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 7: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .default {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_OptimizationProfileWrapper, rhs: Rideos_Dispatch_V3_Fleets_OptimizationProfileWrapper) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Fleets_RelativeTimeWindow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RelativeTimeWindow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "earliest_relative_time"),
    2: .standard(proto: "latest_relative_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._earliestRelativeTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._latestRelativeTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._earliestRelativeTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._latestRelativeTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_RelativeTimeWindow, rhs: Rideos_Dispatch_V3_Fleets_RelativeTimeWindow) -> Bool {
    if lhs._earliestRelativeTime != rhs._earliestRelativeTime {return false}
    if lhs._latestRelativeTime != rhs._latestRelativeTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Fleets_CreateFleetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateFleetRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fleet"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._fleet) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._fleet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_CreateFleetRequest, rhs: Rideos_Dispatch_V3_Fleets_CreateFleetRequest) -> Bool {
    if lhs._fleet != rhs._fleet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Fleets_CreateFleetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateFleetResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fleet"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._fleet) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._fleet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_CreateFleetResponse, rhs: Rideos_Dispatch_V3_Fleets_CreateFleetResponse) -> Bool {
    if lhs._fleet != rhs._fleet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Fleets_GetFleetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFleetRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fleet_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fleetID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fleetID.isEmpty {
      try visitor.visitSingularStringField(value: self.fleetID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_GetFleetRequest, rhs: Rideos_Dispatch_V3_Fleets_GetFleetRequest) -> Bool {
    if lhs.fleetID != rhs.fleetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Fleets_GetFleetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFleetResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fleet"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._fleet) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._fleet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_GetFleetResponse, rhs: Rideos_Dispatch_V3_Fleets_GetFleetResponse) -> Bool {
    if lhs._fleet != rhs._fleet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Fleets_GetAllFleetsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAllFleetsRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_GetAllFleetsRequest, rhs: Rideos_Dispatch_V3_Fleets_GetAllFleetsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Fleets_GetAllFleetsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAllFleetsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fleets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Rideos_Dispatch_V3_Fleets_Fleet>.self, value: &self.fleets) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fleets.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Rideos_Dispatch_V3_Fleets_Fleet>.self, value: self.fleets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_GetAllFleetsResponse, rhs: Rideos_Dispatch_V3_Fleets_GetAllFleetsResponse) -> Bool {
    if lhs.fleets != rhs.fleets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Fleets_UpdateFleetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateFleetRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fleet_id"),
    2: .standard(proto: "updated_display_name"),
    3: .standard(proto: "updated_metadata"),
    4: .standard(proto: "updated_optimization_settings"),
    5: .standard(proto: "updated_routing_profile_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fleetID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updatedDisplayName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updatedMetadata) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._updatedOptimizationSettings) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._updatedRoutingProfileID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fleetID.isEmpty {
      try visitor.visitSingularStringField(value: self.fleetID, fieldNumber: 1)
    }
    if let v = self._updatedDisplayName {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._updatedMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._updatedOptimizationSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._updatedRoutingProfileID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_UpdateFleetRequest, rhs: Rideos_Dispatch_V3_Fleets_UpdateFleetRequest) -> Bool {
    if lhs.fleetID != rhs.fleetID {return false}
    if lhs._updatedDisplayName != rhs._updatedDisplayName {return false}
    if lhs._updatedMetadata != rhs._updatedMetadata {return false}
    if lhs._updatedOptimizationSettings != rhs._updatedOptimizationSettings {return false}
    if lhs._updatedRoutingProfileID != rhs._updatedRoutingProfileID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Fleets_UpdateFleetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateFleetResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fleet"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._fleet) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._fleet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_UpdateFleetResponse, rhs: Rideos_Dispatch_V3_Fleets_UpdateFleetResponse) -> Bool {
    if lhs._fleet != rhs._fleet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Fleets_DeleteFleetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteFleetRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fleet_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fleetID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fleetID.isEmpty {
      try visitor.visitSingularStringField(value: self.fleetID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_DeleteFleetRequest, rhs: Rideos_Dispatch_V3_Fleets_DeleteFleetRequest) -> Bool {
    if lhs.fleetID != rhs.fleetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Fleets_DeleteFleetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteFleetResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fleet"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._fleet) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._fleet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_DeleteFleetResponse, rhs: Rideos_Dispatch_V3_Fleets_DeleteFleetResponse) -> Bool {
    if lhs._fleet != rhs._fleet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Fleets_TriggerOptimizationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TriggerOptimizationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fleet_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fleetID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fleetID.isEmpty {
      try visitor.visitSingularStringField(value: self.fleetID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_TriggerOptimizationRequest, rhs: Rideos_Dispatch_V3_Fleets_TriggerOptimizationRequest) -> Bool {
    if lhs.fleetID != rhs.fleetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rideos_Dispatch_V3_Fleets_TriggerOptimizationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TriggerOptimizationResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rideos_Dispatch_V3_Fleets_TriggerOptimizationResponse, rhs: Rideos_Dispatch_V3_Fleets_TriggerOptimizationResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
