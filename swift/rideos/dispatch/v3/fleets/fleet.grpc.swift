//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: rideos/dispatch/v3/fleets/fleet.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Rideos_Dispatch_V3_Fleets_FleetServiceClient, then call methods of this protocol to make API calls.
public protocol Rideos_Dispatch_V3_Fleets_FleetServiceClientProtocol: GRPCClient {
  func createFleet(
    _ request: Rideos_Dispatch_V3_Fleets_CreateFleetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Fleets_CreateFleetRequest, Rideos_Dispatch_V3_Fleets_CreateFleetResponse>

  func getFleet(
    _ request: Rideos_Dispatch_V3_Fleets_GetFleetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Fleets_GetFleetRequest, Rideos_Dispatch_V3_Fleets_GetFleetResponse>

  func getAllFleets(
    _ request: Rideos_Dispatch_V3_Fleets_GetAllFleetsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Fleets_GetAllFleetsRequest, Rideos_Dispatch_V3_Fleets_GetAllFleetsResponse>

  func updateFleet(
    _ request: Rideos_Dispatch_V3_Fleets_UpdateFleetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Fleets_UpdateFleetRequest, Rideos_Dispatch_V3_Fleets_UpdateFleetResponse>

  func deleteFleet(
    _ request: Rideos_Dispatch_V3_Fleets_DeleteFleetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Fleets_DeleteFleetRequest, Rideos_Dispatch_V3_Fleets_DeleteFleetResponse>

  func triggerOptimization(
    _ request: Rideos_Dispatch_V3_Fleets_TriggerOptimizationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rideos_Dispatch_V3_Fleets_TriggerOptimizationRequest, Rideos_Dispatch_V3_Fleets_TriggerOptimizationResponse>

}

extension Rideos_Dispatch_V3_Fleets_FleetServiceClientProtocol {

  /// Create fleet
  ///
  /// Initialize a new fleet and returns the created fleet. This is required before adding any vehicles or requesting tasks.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFleet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createFleet(
    _ request: Rideos_Dispatch_V3_Fleets_CreateFleetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Fleets_CreateFleetRequest, Rideos_Dispatch_V3_Fleets_CreateFleetResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.fleets.FleetService/CreateFleet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get fleet
  ///
  /// Retrieves a fleet by its fleet ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFleet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getFleet(
    _ request: Rideos_Dispatch_V3_Fleets_GetFleetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Fleets_GetFleetRequest, Rideos_Dispatch_V3_Fleets_GetFleetResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.fleets.FleetService/GetFleet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get all fleets
  ///
  /// Gets all fleets for a given account.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllFleets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAllFleets(
    _ request: Rideos_Dispatch_V3_Fleets_GetAllFleetsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Fleets_GetAllFleetsRequest, Rideos_Dispatch_V3_Fleets_GetAllFleetsResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.fleets.FleetService/GetAllFleets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Update fleet
  ///
  /// Updates a fleet by its fleet ID and returns the updated fleet.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateFleet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateFleet(
    _ request: Rideos_Dispatch_V3_Fleets_UpdateFleetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Fleets_UpdateFleetRequest, Rideos_Dispatch_V3_Fleets_UpdateFleetResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.fleets.FleetService/UpdateFleet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete fleet
  ///
  /// Deletes a fleet by its fleet ID and returns the deleted fleet.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteFleet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteFleet(
    _ request: Rideos_Dispatch_V3_Fleets_DeleteFleetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Fleets_DeleteFleetRequest, Rideos_Dispatch_V3_Fleets_DeleteFleetResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.fleets.FleetService/DeleteFleet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Trigger optimization
  ///
  /// Triggers a fleet's optimization by its fleet ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to TriggerOptimization.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func triggerOptimization(
    _ request: Rideos_Dispatch_V3_Fleets_TriggerOptimizationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rideos_Dispatch_V3_Fleets_TriggerOptimizationRequest, Rideos_Dispatch_V3_Fleets_TriggerOptimizationResponse> {
    return self.makeUnaryCall(
      path: "/rideos.dispatch.v3.fleets.FleetService/TriggerOptimization",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Rideos_Dispatch_V3_Fleets_FleetServiceClient: Rideos_Dispatch_V3_Fleets_FleetServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the rideos.dispatch.v3.fleets.FleetService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

